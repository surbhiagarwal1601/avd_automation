{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "vmNames": {
            "type": "Array"
        },
        "nicConfigurations": {
            "type": "Array"
        },
        "avSetNames": {
            "type": "Array"
        },
        "maxNumberOfVmsPerAvSet": {
            "type": "Int"
        },
        "maxNumberOfVmsPerDeployment": {
            "type": "Int"
        },
        "bulkVMdeploymentLoopIndex": {
            "type": "Int"
        },
        "proximityPlacementGroupName": {
            "type": "String"
        },
        "location": {
            "type": "String"
        },
        "tags": {
            "type": "Object"
        },
        "vmComputerNames": {
            "type": "Object"
        },
        "vmComputerNamesTransformation": {
            "type": "String"
        },
        "useAvailabilityZone": {
            "type": "Bool"
        },
        "availabilityZones": {
            "type": "Array"
        },
        "plan": {
            "type": "Object"
        },
        "lockForDeletion": {
            "type": "Bool"
        },
        "diagnosticSettingName": {
            "type": "String"
        },
        "diagnosticStorageAccountId": {
            "type": "String"
        },
        "workspaceId": {
            "type": "String"
        },
        "eventHubAuthorizationRuleId": {
            "type": "String"
        },
        "eventHubName": {
            "type": "String"
        },
        "diagnosticsMetrics": {
            "type": "Array"
        },
        "diagnosticLogsRetentionInDays": {
            "type": "Int"
        },
        "vmSize": {
            "type": "String"
        },
        "imageReference": {
            "type": "Object"
        },
        "osDisk": {
            "type": "Object"
        },
        "dataDisks": {
            "type": "Array"
        },
        "enableServerSideEncryption": {
            "type": "Bool"
        },
        "ultraSSDEnabled": {
            "type": "Bool"
        },
        "adminUsername": {
            "type": "SecureString"
        },
        "adminPassword": {
            "type": "SecureString"
        },
        "customData": {
            "type": "String"
        },
        "windowsConfiguration": {
            "type": "Object"
        },
        "linuxConfiguration": {
            "type": "Object"
        },
        "certificatesToBeInstalled": {
            "type": "Array"
        },
        "allowExtensionOperations": {
            "type": "Bool"
        },
        "bootDiagnosticStorageAccountName": {
            "type": "String"
        },
        "bootDiagnosticStorageAccountUri": {
            "type": "String"
        },
        "vmPriority": {
            "type": "String"
        },
        "enableEvictionPolicy": {
            "type": "Bool"
        },
        "dedicatedHostId": {
            "type": "String"
        },
        "licenseType": {
            "type": "String"
        },
        "domainName": {
            "type": "String"
        },
        "domainJoinUser": {
            "type": "String"
        },
        "domainJoinOU": {
            "type": "String"
        },
        "domainJoinRestart": {
            "type": "Bool"
        },
        "domainJoinOptions": {
            "type": "Int"
        },
        "domainJoinPassword": {
            "type": "SecureString"
        },
        "enableMicrosoftAntiMalware": {
            "type": "Bool"
        },
        "microsoftAntiMalwareSettings": {
            "type": "Object"
        },
        "enableWindowsMMAAgent": {
            "type": "Bool"
        },
        "enableLinuxMMAAgent": {
            "type": "Bool"
        },
        "enableWindowsDiskEncryption": {
            "type": "Bool"
        },
        "forceUpdateTag": {
            "type": "String"
        },
        "keyVaultUri": {
            "type": "String"
        },
        "keyVaultId": {
            "type": "String"
        },
        "keyEncryptionKeyURL": {
            "type": "String"
        },
        "diskKeyEncryptionAlgorithm": {
            "type": "String"
        },
        "diskEncryptionVolumeType": {
            "type": "String"
        },
        "resizeOSDisk": {
            "type": "Bool"
        },
        "enableLinuxDiskEncryption": {
            "type": "Bool"
        },
        "enableWindowsDependencyAgent": {
            "type": "Bool"
        },
        "enableLinuxDependencyAgent": {
            "type": "Bool"
        },
        "enableNetworkWatcherWindows": {
            "type": "Bool"
        },
        "enableNetworkWatcherLinux": {
            "type": "Bool"
        },
        "identity": {
            "type": "Object"
        },
        "dscConfiguration": {
            "type": "Object"
        },
        "windowsScriptExtensionFileData": {
            "type": "Array"
        },
        "windowsScriptExtensionCommandToExecute": {
            "type": "SecureString"
        },
        "cseStorageAccountName": {
            "type": "String"
        },
        "cseStorageAccountKey": {
            "type": "String"
        },
        "cseManagedIdentity": {
            "type": "Object"
        },
        "maxPriceForLowPriorityVm": {
            "type": "string",
            "defaultValue": ""
        },
        "accountSasProperties": {
            "type": "Object"
        },
        "roleAssignments": {
            "type": "Array"
        },
        "builtInRoleNames": {
            "type": "Object"
        },
        "backupVaultName": {
            "type": "String"
        },
        "backupVaultResourceGroup": {
            "type": "String"
        },
        "backupPolicyName": {
            "type": "String"
        }
    },
    "resources": [
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "name": "[concat(parameters('vmNames')[copyIndex('vmLoop')], '-vmLoop')]",
            "dependsOn": [],
            "properties": {
                "mode": "Incremental",
                "expressionEvaluationOptions": {
                    "scope": "inner"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    },
                    "vmLoopIndex": {
                        "value": "[copyIndex('vmLoop')]"
                    },
                    "vmName": {
                        "value": "[parameters('vmNames')[copyIndex('vmLoop')]]"
                    },
                    "vmComputerNames": {
                        "value": "[parameters('vmComputerNames')]"
                    },
                    "vmComputerNamesTransformation": {
                        "value": "[parameters('vmComputerNamesTransformation')]"
                    },
                    "useAvailabilityZone": {
                        "value": "[parameters('useAvailabilityZone')]"
                    },
                    "availabilityZone": {
                        "value": "[parameters('availabilityZones')[copyIndex('vmLoop')]]"
                    },
                    "plan": {
                        "value": "[parameters('plan')]"
                    },
                    "nicConfigurations": {
                        "value": "[parameters('nicConfigurations')]"
                    },
                    "lockForDeletion": {
                        "value": "[parameters('lockForDeletion')]"
                    },
                    "diagnosticSettingName": {
                        "value": "[parameters('diagnosticSettingName')]"
                    },
                    "diagnosticStorageAccountId": {
                        "value": "[parameters('diagnosticStorageAccountId')]"
                    },
                    "workspaceId": {
                        "value": "[parameters('workspaceId')]"
                    },
                    "eventHubAuthorizationRuleId": {
                        "value": "[parameters('eventHubAuthorizationRuleId')]"
                    },
                    "eventHubName": {
                        "value": "[parameters('eventHubName')]"
                    },
                    "diagnosticsMetrics": {
                        "value": "[parameters('diagnosticsMetrics')]"
                    },
                    "diagnosticLogsRetentionInDays": {
                        "value": "[parameters('diagnosticLogsRetentionInDays')]"
                    },
                    "vmSize": {
                        "value": "[parameters('vmSize')]"
                    },
                    "imageReference": {
                        "value": "[parameters('imageReference')]"
                    },
                    "osDisk": {
                        "value": "[parameters('osDisk')]"
                    },
                    "dataDisks": {
                        "value": "[parameters('dataDisks')]"
                    },
                    "enableServerSideEncryption": {
                        "value": "[parameters('enableServerSideEncryption')]"
                    },
                    "ultraSSDEnabled": {
                        "value": "[parameters('ultraSSDEnabled')]"
                    },
                    "adminUsername": {
                        "value": "[parameters('adminUsername')]"
                    },
                    "adminPassword": {
                        "value": "[parameters('adminPassword')]"
                    },
                    "customData": {
                        "value": "[parameters('customData')]"
                    },
                    "windowsConfiguration": {
                        "value": "[parameters('windowsConfiguration')]"
                    },
                    "linuxConfiguration": {
                        "value": "[parameters('linuxConfiguration')]"
                    },
                    "certificatesToBeInstalled": {
                        "value": "[parameters('certificatesToBeInstalled')]"
                    },
                    "allowExtensionOperations": {
                        "value": "[parameters('allowExtensionOperations')]"
                    },
                    "bootDiagnosticStorageAccountName": {
                        "value": "[parameters('bootDiagnosticStorageAccountName')]"
                    },
                    "bootDiagnosticStorageAccountUri": {
                        "value": "[parameters('bootDiagnosticStorageAccountUri')]"
                    },
                    "avSetNames": {
                        "value": "[parameters('avSetNames')]"
                    },
                    "maxNumberOfVmsPerAvSet": {
                        "value": "[parameters('maxNumberOfVmsPerAvSet')]"
                    },
                    "maxNumberOfVmsPerDeployment": {
                        "value": "[parameters('maxNumberOfVmsPerDeployment')]"
                    },
                    "bulkVMdeploymentLoopIndex": {
                        "value": "[parameters('bulkVMdeploymentLoopIndex')]"
                    },
                    "proximityPlacementGroupName": {
                        "value": "[parameters('proximityPlacementGroupName')]"
                    },
                    "vmPriority": {
                        "value": "[parameters('vmPriority')]"
                    },
                    "enableEvictionPolicy": {
                        "value": "[parameters('enableEvictionPolicy')]"
                    },
                    "dedicatedHostId": {
                        "value": "[parameters('dedicatedHostId')]"
                    },
                    "licenseType": {
                        "value": "[parameters('licenseType')]"
                    },
                    "domainName": {
                        "value": "[parameters('domainName')]"
                    },
                    "domainJoinUser": {
                        "value": "[parameters('domainJoinUser')]"
                    },
                    "domainJoinOU": {
                        "value": "[parameters('domainJoinOU')]"
                    },
                    "domainJoinRestart": {
                        "value": "[parameters('domainJoinRestart')]"
                    },
                    "domainJoinOptions": {
                        "value": "[parameters('domainJoinOptions')]"
                    },
                    "domainJoinPassword": {
                        "value": "[parameters('domainJoinPassword')]"
                    },
                    "enableMicrosoftAntiMalware": {
                        "value": "[parameters('enableMicrosoftAntiMalware')]"
                    },
                    "microsoftAntiMalwareSettings": {
                        "value": "[parameters('microsoftAntiMalwareSettings')]"
                    },
                    "enableWindowsMMAAgent": {
                        "value": "[parameters('enableWindowsMMAAgent')]"
                    },
                    "enableLinuxMMAAgent": {
                        "value": "[parameters('enableLinuxMMAAgent')]"
                    },
                    "enableWindowsDiskEncryption": {
                        "value": "[parameters('enableWindowsDiskEncryption')]"
                    },
                    "forceUpdateTag": {
                        "value": "[parameters('forceUpdateTag')]"
                    },
                    "keyVaultUri": {
                        "value": "[parameters('keyVaultUri')]"
                    },
                    "keyVaultId": {
                        "value": "[parameters('keyVaultId')]"
                    },
                    "keyEncryptionKeyURL": {
                        "value": "[parameters('keyEncryptionKeyURL')]"
                    },
                    "diskKeyEncryptionAlgorithm": {
                        "value": "[parameters('diskKeyEncryptionAlgorithm')]"
                    },
                    "diskEncryptionVolumeType": {
                        "value": "[parameters('diskEncryptionVolumeType')]"
                    },
                    "resizeOSDisk": {
                        "value": "[parameters('resizeOSDisk')]"
                    },
                    "enableLinuxDiskEncryption": {
                        "value": "[parameters('enableLinuxDiskEncryption')]"
                    },
                    "enableWindowsDependencyAgent": {
                        "value": "[parameters('enableWindowsDependencyAgent')]"
                    },
                    "enableLinuxDependencyAgent": {
                        "value": "[parameters('enableLinuxDependencyAgent')]"
                    },
                    "enableNetworkWatcherWindows": {
                        "value": "[parameters('enableNetworkWatcherWindows')]"
                    },
                    "enableNetworkWatcherLinux": {
                        "value": "[parameters('enableNetworkWatcherLinux')]"
                    },
                    "identity": {
                        "value": "[parameters('identity')]"
                    },
                    "dscConfiguration": {
                        "value": "[parameters('dscConfiguration')]"
                    },
                    "windowsScriptExtensionFileData": {
                        "value": "[parameters('windowsScriptExtensionFileData')]"
                    },
                    "windowsScriptExtensionCommandToExecute": {
                        "value": "[parameters('windowsScriptExtensionCommandToExecute')]"
                    },
                    "cseStorageAccountName": {
                        "value": "[parameters('cseStorageAccountName')]"
                    },
                    "cseStorageAccountKey": {
                        "value": "[parameters('cseStorageAccountKey')]"
                    },
                    "cseManagedIdentity": {
                        "value": "[parameters('cseManagedIdentity')]"
                    },
                    "maxPriceForLowPriorityVm": {
                        "value": "[parameters('maxPriceForLowPriorityVm')]"
                    },
                    "accountSasProperties": {
                        "value": "[parameters('accountSasProperties')]"
                    },
                    "roleAssignments": {
                        "value": "[parameters('roleAssignments')]"
                    },
                    "builtInRoleNames": {
                        "value": "[parameters('builtInRoleNames')]"
                    },
                    "backupVaultName": {
                        "value": "[parameters('backupVaultName')]"
                    },
                    "backupVaultResourceGroup": {
                        "value": "[parameters('backupVaultResourceGroup')]"
                    },
                    "backupPolicyName": {
                        "value": "[parameters('backupPolicyName')]"
                    }
                },
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "location": {
                            "type": "string"
                        },
                        "tags": {
                            "type": "object"
                        },
                        "vmName": {
                            "type": "string"
                        },
                        "vmLoopIndex": {
                            "type": "int"
                        },
                        "vmComputerNames": {
                            "type": "object"
                        },
                        "vmComputerNamesTransformation": {
                            "type": "string"
                        },
                        "useAvailabilityZone": {
                            "type": "bool"
                        },
                        "availabilityZone": {
                            "type": "string"
                        },
                        "plan": {
                            "type": "object"
                        },
                        "nicConfigurations": {
                            "type": "array"
                        },
                        "lockForDeletion": {
                            "type": "bool"
                        },
                        "diagnosticSettingName": {
                            "type": "string"
                        },
                        "diagnosticStorageAccountId": {
                            "type": "string"
                        },
                        "workspaceId": {
                            "type": "string"
                        },
                        "eventHubAuthorizationRuleId": {
                            "type": "string"
                        },
                        "eventHubName": {
                            "type": "string"
                        },
                        "diagnosticsMetrics": {
                            "type": "array"
                        },
                        "diagnosticLogsRetentionInDays": {
                            "type": "int"
                        },
                        "vmSize": {
                            "type": "string"
                        },
                        "imageReference": {
                            "type": "object"
                        },
                        "osDisk": {
                            "type": "object"
                        },
                        "dataDisks": {
                            "type": "array"
                        },
                        "enableServerSideEncryption": {
                            "type": "bool"
                        },
                        "ultraSSDEnabled": {
                            "type": "bool"
                        },
                        "adminUsername": {
                            "type": "securestring"
                        },
                        "adminPassword": {
                            "type": "securestring"
                        },
                        "customData": {
                            "type": "string"
                        },
                        "windowsConfiguration": {
                            "type": "object"
                        },
                        "linuxConfiguration": {
                            "type": "object"
                        },
                        "certificatesToBeInstalled": {
                            "type": "array"
                        },
                        "allowExtensionOperations": {
                            "type": "bool"
                        },
                        "bootDiagnosticStorageAccountName": {
                            "type": "string"
                        },
                        "bootDiagnosticStorageAccountUri": {
                            "type": "string"
                        },
                        "avSetNames": {
                            "type": "array"
                        },
                        "maxNumberOfVmsPerAvSet": {
                            "type": "int"
                        },
                        "maxNumberOfVmsPerDeployment": {
                            "type": "int"
                        },
                        "bulkVMdeploymentLoopIndex": {
                            "type": "int"
                        },
                        "proximityPlacementGroupName": {
                            "type": "string"
                        },
                        "vmPriority": {
                            "type": "string"
                        },
                        "enableEvictionPolicy": {
                            "type": "bool"
                        },
                        "dedicatedHostId": {
                            "type": "string"
                        },
                        "licenseType": {
                            "type": "string"
                        },
                        "domainName": {
                            "type": "string"
                        },
                        "domainJoinUser": {
                            "type": "string"
                        },
                        "domainJoinOU": {
                            "type": "string"
                        },
                        "domainJoinRestart": {
                            "type": "bool"
                        },
                        "domainJoinOptions": {
                            "type": "int"
                        },
                        "domainJoinPassword": {
                            "type": "securestring"
                        },
                        "enableMicrosoftAntiMalware": {
                            "type": "bool"
                        },
                        "microsoftAntiMalwareSettings": {
                            "type": "object"
                        },
                        "enableWindowsMMAAgent": {
                            "type": "bool"
                        },
                        "enableLinuxMMAAgent": {
                            "type": "bool"
                        },
                        "enableWindowsDiskEncryption": {
                            "type": "bool"
                        },
                        "forceUpdateTag": {
                            "type": "string"
                        },
                        "keyVaultUri": {
                            "type": "string"
                        },
                        "keyVaultId": {
                            "type": "string"
                        },
                        "keyEncryptionKeyURL": {
                            "type": "string"
                        },
                        "diskKeyEncryptionAlgorithm": {
                            "type": "string"
                        },
                        "diskEncryptionVolumeType": {
                            "type": "string"
                        },
                        "resizeOSDisk": {
                            "type": "bool"
                        },
                        "enableLinuxDiskEncryption": {
                            "type": "bool"
                        },
                        "enableWindowsDependencyAgent": {
                            "type": "bool"
                        },
                        "enableLinuxDependencyAgent": {
                            "type": "bool"
                        },
                        "enableNetworkWatcherWindows": {
                            "type": "bool"
                        },
                        "enableNetworkWatcherLinux": {
                            "type": "bool"
                        },
                        "identity": {
                            "type": "object"
                        },
                        "dscConfiguration": {
                            "type": "object"
                        },
                        "windowsScriptExtensionFileData": {
                            "type": "array"
                        },
                        "windowsScriptExtensionCommandToExecute": {
                            "type": "securestring"
                        },
                        "cseStorageAccountName": {
                            "type": "string"
                        },
                        "cseStorageAccountKey": {
                            "type": "string"
                        },
                        "cseManagedIdentity": {
                            "type": "object"
                        },
                        "maxPriceForLowPriorityVm": {
                            "type": "securestring"
                        },
                        "accountSasProperties": {
                            "type": "object"
                        },
                        "roleAssignments": {
                            "type": "array"
                        },
                        "builtInRoleNames": {
                            "type": "object"
                        },
                        "backupVaultName": {
                            "type": "string"
                        },
                        "backupVaultResourceGroup": {
                            "type": "string"
                        },
                        "backupPolicyName": {
                            "type": "string"
                        }
                    },
                    "variables": {
                        "vmComputerName": "[if(contains(parameters('vmComputerNames'), parameters('vmName')), parameters('vmComputerNames')[parameters('vmName')], parameters('vmName') )]",
                        "vmComputerNameTransformed": "[if(equals(parameters('vmComputerNamesTransformation'), 'uppercase'), toUpper(variables('vmComputerName')), if(equals(parameters('vmComputerNamesTransformation'), 'lowercase'), toLower(variables('vmComputerName')), variables('vmComputerName')))]",
                        "availabilitySetName": "[if(not(empty(parameters('avSetNames'))), parameters('avSetNames')[div(add(parameters('vmLoopIndex'),mul(parameters('maxNumberOfVmsPerDeployment'),parameters('bulkVMdeploymentLoopIndex'))),parameters('maxNumberOfVmsPerAvSet'))], '')]",
                        "nicName": "[if(equals(length(parameters('nicConfigurations')),1), concat(parameters('vmName'), parameters('nicConfigurations')[0].nicSuffix), json('[]'))]",
                        "dnsServersValues": {
                            "dnsServers": "[if(equals(length(parameters('nicConfigurations')),1), if(contains(parameters('nicConfigurations')[0], 'dnsServers'), parameters('nicConfigurations')[0].dnsServers, json('[]')), json('[]'))]"
                        }
                    },
                    "resources": [
                        {
                            "name": "[if(equals(length(parameters('nicConfigurations')),1), concat(parameters('vmName'), parameters('nicConfigurations')[0].nicSuffix, '-', parameters('nicConfigurations')[0].ipConfigurations[copyIndex('vmNicPipConfigLoop')].name , '-vmNicPipConfigLoop'),'dummyVmNicPipConfigLoop')]",
                            "apiVersion": "2020-06-01",
                            "type": "Microsoft.Resources/deployments",
                            "condition": "[and(equals(length(parameters('nicConfigurations')),1), not(empty(parameters('nicConfigurations')[0].ipConfigurations)), contains(parameters('nicConfigurations')[0].ipConfigurations[copyIndex('vmNicPipConfigLoop')], 'enablePublicIP'), parameters('nicConfigurations')[0].ipConfigurations[copyIndex('vmNicPipConfigLoop')].enablePublicIP)]",
                            "dependsOn": [],
                            "copy": {
                                "name": "vmNicPipConfigLoop",
                                "count": "[if(equals(length(parameters('nicConfigurations')),1), length(parameters('nicConfigurations')[0].ipConfigurations),0)]"
                            },
                            "properties": {
                                "mode": "Incremental",
                                "expressionEvaluationOptions": {
                                    "scope": "inner"
                                },
                                "parameters": {
                                    "location": {
                                        "value": "[parameters('location')]"
                                    },
                                    "tags": {
                                        "value": "[parameters('tags')]"
                                    },
                                    "vmName": {
                                        "value": "[parameters('vmName')]"
                                    },
                                    "ipConfiguration": {
                                        "value": "[parameters('nicConfigurations')[0].ipConfigurations[copyIndex('vmNicPipConfigLoop')]]"
                                    },
                                    "lockForDeletion": {
                                        "value": "[parameters('lockForDeletion')]"
                                    },
                                    "diagnosticSettingName": {
                                        "value": "[parameters('diagnosticSettingName')]"
                                    },
                                    "diagnosticStorageAccountId": {
                                        "value": "[parameters('diagnosticStorageAccountId')]"
                                    },
                                    "workspaceId": {
                                        "value": "[parameters('workspaceId')]"
                                    },
                                    "eventHubAuthorizationRuleId": {
                                        "value": "[parameters('eventHubAuthorizationRuleId')]"
                                    },
                                    "eventHubName": {
                                        "value": "[parameters('eventHubName')]"
                                    },
                                    "diagnosticsMetrics": {
                                        "value": "[parameters('diagnosticsMetrics')]"
                                    },
                                    "diagnosticLogsRetentionInDays": {
                                        "value": "[parameters('diagnosticLogsRetentionInDays')]"
                                    }
                                },
                                "template": {
                                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                    "contentVersion": "1.0.0.0",
                                    "parameters": {
                                        "location": {
                                            "type": "string"
                                        },
                                        "tags": {
                                            "type": "object"
                                        },
                                        "vmName": {
                                            "type": "string"
                                        },
                                        "ipConfiguration": {
                                            "type": "object"
                                        },
                                        "lockForDeletion": {
                                            "type": "bool"
                                        },
                                        "diagnosticSettingName": {
                                            "type": "string"
                                        },
                                        "diagnosticStorageAccountId": {
                                            "type": "string"
                                        },
                                        "workspaceId": {
                                            "type": "string"
                                        },
                                        "eventHubAuthorizationRuleId": {
                                            "type": "string"
                                        },
                                        "eventHubName": {
                                            "type": "string"
                                        },
                                        "diagnosticsMetrics": {
                                            "type": "array"
                                        },
                                        "diagnosticLogsRetentionInDays": {
                                            "type": "int"
                                        }
                                    },
                                    "variables": {
                                        "pipName": "[if(contains(parameters('ipConfiguration'), 'publicIpNameSuffix'), concat(parameters('vmName'), parameters('ipConfiguration').publicIpNameSuffix), 'dummyPipName')]",
                                        "pipDiagnosticsLogs": [
                                            {
                                                "category": "DDoSProtectionNotifications",
                                                "enabled": true,
                                                "retentionPolicy": {
                                                    "enabled": true,
                                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                                }
                                            },
                                            {
                                                "category": "DDoSMitigationFlowLogs",
                                                "enabled": true,
                                                "retentionPolicy": {
                                                    "enabled": true,
                                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                                }
                                            },
                                            {
                                                "category": "DDoSMitigationReports",
                                                "enabled": true,
                                                "retentionPolicy": {
                                                    "enabled": true,
                                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                                }
                                            }
                                        ]
                                    },
                                    "resources": [
                                        {
                                            "type": "Microsoft.Network/publicIPAddresses",
                                            "apiVersion": "2020-08-01",
                                            "name": "[variables('pipName')]",
                                            "location": "[parameters('location')]",
                                            "tags": "[parameters('tags')]",
                                            "condition": "[and(contains(parameters('ipConfiguration') , 'enablePublicIP'), parameters('ipConfiguration').enablePublicIP)]",
                                            "sku": {
                                                "name": "Standard"
                                            },
                                            "properties": {
                                                "publicIPAllocationMethod": "Static",
                                                "publicIPPrefix": "[if(contains(parameters('ipConfiguration') , 'publicIPPrefixId'), if(not(empty(parameters('ipConfiguration').publicIPPrefixId)), json(concat('{\"id\": \"', parameters('ipConfiguration').publicIPPrefixId, '\"}')), json('null')), json('null'))]"
                                            },
                                            "zones": "[json('null')]",
                                            "resources": [
                                                {
                                                    "type": "providers/locks",
                                                    "apiVersion": "2016-09-01",
                                                    "condition": "[and(and(contains(parameters('ipConfiguration'), 'enablePublicIP'), parameters('ipConfiguration').enablePublicIP),parameters('lockForDeletion'))]",
                                                    "name": "Microsoft.Authorization/publicIpDoNotDelete",
                                                    "dependsOn": [
                                                        "[concat('Microsoft.Network/publicIPAddresses/', variables('pipName'))]"
                                                    ],
                                                    "comments": "Resource lock on Public IP",
                                                    "properties": {
                                                        "level": "CannotDelete"
                                                    }
                                                },
                                                {
                                                    "type": "Microsoft.Network/publicIPAddresses/providers/diagnosticSettings",
                                                    "apiVersion": "2017-05-01-preview",
                                                    "location": "[parameters('location')]",
                                                    "tags": "[parameters('tags')]",
                                                    "condition": "[and(and(contains(parameters('ipConfiguration'), 'enablePublicIP'), parameters('ipConfiguration').enablePublicIP), or(not(empty(parameters('diagnosticStorageAccountId'))),not(empty(parameters('workspaceId'))),not(empty(parameters('eventHubAuthorizationRuleId'))),not(empty(parameters('eventHubName')))))]",
                                                    "name": "[concat(variables('pipName'), '/Microsoft.Insights/', parameters('diagnosticSettingName'))]",
                                                    "dependsOn": [
                                                        "[concat('Microsoft.Network/publicIPAddresses/', variables('pipName'))]"
                                                    ],
                                                    "properties": {
                                                        "storageAccountId": "[if(empty(parameters('diagnosticStorageAccountId')), json('null'), parameters('diagnosticStorageAccountId'))]",
                                                        "workspaceId": "[if(empty(parameters('workspaceId')), json('null'), parameters('workspaceId'))]",
                                                        "eventHubAuthorizationRuleId": "[if(empty(parameters('eventHubAuthorizationRuleId')), json('null'), parameters('eventHubAuthorizationRuleId'))]",
                                                        "eventHubName": "[if(empty(parameters('eventHubName')), json('null'), parameters('eventHubName'))]",
                                                        "metrics": "[if(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId')), empty(parameters('eventHubAuthorizationRuleId')), empty(parameters('eventHubName'))), json('null'), parameters('diagnosticsMetrics'))]",
                                                        "logs": "[if(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId')), empty(parameters('eventHubAuthorizationRuleId')), empty(parameters('eventHubName'))), json('null'), variables('pipDiagnosticsLogs'))]"
                                                    }
                                                }
                                            ]
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "type": "Microsoft.Network/networkInterfaces",
                            "apiVersion": "2020-08-01",
                            "location": "[parameters('location')]",
                            "tags": "[parameters('tags')]",
                            "condition": "[and(equals(length(parameters('nicConfigurations')),1), not(empty(parameters('nicConfigurations')[0].ipConfigurations)))]",
                            "name": "[if(equals(length(parameters('nicConfigurations')),1), variables('nicName'),'dummyVmNic')]",
                            "dependsOn": [
                                "vmNicPipConfigLoop"
                            ],
                            "properties": {
                                "enableIPForwarding": "[if(contains(parameters('nicConfigurations')[0], 'enableIPForwarding'), parameters('nicConfigurations')[0].enableIPForwarding, 'false')]",
                                "enableAcceleratedNetworking": "[if(contains(parameters('nicConfigurations')[0], 'enableAcceleratedNetworking'), parameters('nicConfigurations')[0].enableAcceleratedNetworking, 'false')]",
                                "dnsSettings": "[if(contains(parameters('nicConfigurations')[0], 'dnsServers'), if(empty(parameters('nicConfigurations')[0].dnsServers), json('null'), variables('dnsServersValues')), json('null'))]",
                                "copy": [
                                    {
                                        "name": "ipConfigurations",
                                        "count": "[if(contains(parameters('nicConfigurations')[0], 'ipConfigurations'), length(parameters('nicConfigurations')[0].ipConfigurations),0)]",
                                        "input": {
                                            "name": "[if(contains(parameters('nicConfigurations')[0].ipConfigurations[copyIndex('ipConfigurations')], 'name'), parameters('nicConfigurations')[0].ipConfigurations[copyIndex('ipConfigurations')].name, concat('ipconfig', copyIndex('ipConfigurations', 1)))]",
                                            "properties": {
                                                "primary": "[if(equals(copyIndex('ipConfigurations'), 0), 'true', 'false')]",
                                                "privateIPAllocationMethod": "[if(contains(parameters('nicConfigurations')[0].ipConfigurations[copyIndex('ipConfigurations')], 'vmIPAddress'), if(empty(parameters('nicConfigurations')[0].ipConfigurations[copyIndex('ipConfigurations')].vmIPAddress), 'Dynamic', 'Static'), 'Dynamic')]",
                                                "publicIPAddress": "[if(contains(parameters('nicConfigurations')[0].ipConfigurations[copyIndex('ipConfigurations')], 'enablePublicIP'), if(parameters('nicConfigurations')[0].ipConfigurations[copyIndex('ipConfigurations')].enablePublicIP, json(concat('{\"id\":\"', resourceId('Microsoft.Network/publicIPAddresses', concat(parameters('vmName'), parameters('nicConfigurations')[0].ipConfigurations[copyIndex('ipConfigurations')].publicIpNameSuffix)),'\"}')), json('null')), json('null'))]",
                                                "privateIPAddress": "[if(contains(parameters('nicConfigurations')[0].ipConfigurations[copyIndex('ipConfigurations')], 'vmIPAddress'), if(empty(parameters('nicConfigurations')[0].ipConfigurations[copyIndex('ipConfigurations')].vmIPAddress), json('null'), iacs.nextIP(parameters('nicConfigurations')[0].ipConfigurations[copyIndex('ipConfigurations')].vmIPAddress, parameters('vmLoopIndex'))), json('null'))]",
                                                "subnet": {
                                                    "id": "[parameters('nicConfigurations')[0].ipConfigurations[copyIndex('ipConfigurations')].subnetId]"
                                                },
                                                "loadBalancerBackendAddressPools": "[if(contains(parameters('nicConfigurations')[0].ipConfigurations[copyIndex('ipConfigurations')], 'loadBalancerBackendAddressPools'), parameters('nicConfigurations')[0].ipConfigurations[copyIndex('ipConfigurations')].loadBalancerBackendAddressPools, '')]",
                                                "applicationSecurityGroups": "[if(contains(parameters('nicConfigurations')[0].ipConfigurations[copyIndex('ipConfigurations')], 'applicationSecurityGroups'), parameters('nicConfigurations')[0].ipConfigurations[copyIndex('ipConfigurations')].applicationSecurityGroups, '')]"
                                            }
                                        }
                                    }
                                ]
                            },
                            "resources": [
                                {
                                    "type": "providers/locks",
                                    "apiVersion": "2016-09-01",
                                    "condition": "[parameters('lockForDeletion')]",
                                    "name": "Microsoft.Authorization/networkInterfaceDoNotDelete",
                                    "dependsOn": [
                                        "[concat('Microsoft.Network/networkInterfaces/', if(equals(length(parameters('nicConfigurations')),1), variables('nicName'),'dummyVmNic'))]"
                                    ],
                                    "comments": "Resource lock on Network Interface",
                                    "properties": {
                                        "level": "CannotDelete"
                                    }
                                },
                                {
                                    "type": "Microsoft.Network/networkInterfaces/providers/diagnosticSettings",
                                    "apiVersion": "2017-05-01-preview",
                                    "location": "[parameters('location')]",
                                    "tags": "[parameters('tags')]",
                                    "name": "[concat(if(equals(length(parameters('nicConfigurations')),1), variables('nicName'),'dummyVmNic'), '/Microsoft.Insights/', parameters('diagnosticSettingName'))]",
                                    "condition": "[or(not(empty(parameters('diagnosticStorageAccountId'))),not(empty(parameters('workspaceId'))),not(empty(parameters('eventHubAuthorizationRuleId'))),not(empty(parameters('eventHubName'))))]",
                                    "dependsOn": [
                                        "[concat('Microsoft.Network/networkInterfaces/', if(equals(length(parameters('nicConfigurations')),1), variables('nicName'),'dummyVmNic'))]"
                                    ],
                                    "properties": {
                                        "storageAccountId": "[if(empty(parameters('diagnosticStorageAccountId')), json('null'), parameters('diagnosticStorageAccountId'))]",
                                        "workspaceId": "[if(empty(parameters('workspaceId')), json('null'), parameters('workspaceId'))]",
                                        "eventHubAuthorizationRuleId": "[if(empty(parameters('eventHubAuthorizationRuleId')), json('null'), parameters('eventHubAuthorizationRuleId'))]",
                                        "eventHubName": "[if(empty(parameters('eventHubName')), json('null'), parameters('eventHubName'))]",
                                        "metrics": "[if(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId')), empty(parameters('eventHubAuthorizationRuleId')), empty(parameters('eventHubName'))), json('null'), parameters('diagnosticsMetrics'))]"
                                    }
                                }
                            ]
                        },
                        {
                            "name": "[if(greater(length(parameters('nicConfigurations')),1), concat(parameters('vmName'), parameters('nicConfigurations')[copyIndex('vmNicDeployInnerLoop')].nicSuffix, '-vmNicDeployInnerLoop'), 'dummyVmNicDeployInnerLoop')]",
                            "apiVersion": "2020-06-01",
                            "type": "Microsoft.Resources/deployments",
                            "condition": "[greater(length(parameters('nicConfigurations')),1)]",
                            "dependsOn": [],
                            "copy": {
                                "name": "vmNicDeployInnerLoop",
                                "count": "[length(parameters('nicConfigurations'))]"
                            },
                            "properties": {
                                "mode": "Incremental",
                                "expressionEvaluationOptions": {
                                    "scope": "inner"
                                },
                                "parameters": {
                                    "location": {
                                        "value": "[parameters('location')]"
                                    },
                                    "tags": {
                                        "value": "[parameters('tags')]"
                                    },
                                    "vmName": {
                                        "value": "[parameters('vmName')]"
                                    },
                                    "vmLoopIndex": {
                                        "value": "[parameters('vmLoopIndex')]"
                                    },
                                    "nicConfiguration": {
                                        "value": "[parameters('nicConfigurations')[copyIndex('vmNicDeployInnerLoop')]]"
                                    },
                                    "lockForDeletion": {
                                        "value": "[parameters('lockForDeletion')]"
                                    },
                                    "diagnosticSettingName": {
                                        "value": "[parameters('diagnosticSettingName')]"
                                    },
                                    "diagnosticStorageAccountId": {
                                        "value": "[parameters('diagnosticStorageAccountId')]"
                                    },
                                    "workspaceId": {
                                        "value": "[parameters('workspaceId')]"
                                    },
                                    "eventHubAuthorizationRuleId": {
                                        "value": "[parameters('eventHubAuthorizationRuleId')]"
                                    },
                                    "eventHubName": {
                                        "value": "[parameters('eventHubName')]"
                                    },
                                    "diagnosticsMetrics": {
                                        "value": "[parameters('diagnosticsMetrics')]"
                                    },
                                    "diagnosticLogsRetentionInDays": {
                                        "value": "[parameters('diagnosticLogsRetentionInDays')]"
                                    }
                                },
                                "template": {
                                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                    "contentVersion": "1.0.0.0",
                                    "parameters": {
                                        "location": {
                                            "type": "string"
                                        },
                                        "tags": {
                                            "type": "object"
                                        },
                                        "vmName": {
                                            "type": "string"
                                        },
                                        "vmLoopIndex": {
                                            "type": "int"
                                        },
                                        "nicConfiguration": {
                                            "type": "object"
                                        },
                                        "lockForDeletion": {
                                            "type": "bool"
                                        },
                                        "diagnosticSettingName": {
                                            "type": "string"
                                        },
                                        "diagnosticStorageAccountId": {
                                            "type": "string"
                                        },
                                        "workspaceId": {
                                            "type": "string"
                                        },
                                        "eventHubAuthorizationRuleId": {
                                            "type": "string"
                                        },
                                        "eventHubName": {
                                            "type": "string"
                                        },
                                        "diagnosticsMetrics": {
                                            "type": "array"
                                        },
                                        "diagnosticLogsRetentionInDays": {
                                            "type": "int"
                                        }
                                    },
                                    "variables": {
                                        "nicName": "[concat(parameters('vmName'), parameters('nicConfiguration').nicSuffix)]",
                                        "dnsServersValues": {
                                            "dnsServers": "[if(contains(parameters('nicConfiguration'), 'dnsServers'), parameters('nicConfiguration').dnsServers, json('[]'))]"
                                        }
                                    },
                                    "resources": [
                                        {
                                            "name": "[concat(parameters('vmName'), parameters('nicConfiguration').nicSuffix, '-', parameters('nicConfiguration').ipConfigurations[copyIndex('vmNicPipConfigLoop')].name, '-vmNicPipConfigLoop')]",
                                            "apiVersion": "2020-06-01",
                                            "type": "Microsoft.Resources/deployments",
                                            "condition": "[and(not(empty(parameters('nicConfiguration').ipConfigurations)), contains(parameters('nicConfiguration').ipConfigurations[copyIndex('vmNicPipConfigLoop')], 'enablePublicIP'), parameters('nicConfiguration').ipConfigurations[copyIndex('vmNicPipConfigLoop')].enablePublicIP)]",
                                            "dependsOn": [],
                                            "copy": {
                                                "name": "vmNicPipConfigLoop",
                                                "count": "[length(parameters('nicConfiguration').ipConfigurations)]"
                                            },
                                            "properties": {
                                                "mode": "Incremental",
                                                "expressionEvaluationOptions": {
                                                    "scope": "inner"
                                                },
                                                "parameters": {
                                                    "location": {
                                                        "value": "[parameters('location')]"
                                                    },
                                                    "tags": {
                                                        "value": "[parameters('tags')]"
                                                    },
                                                    "vmName": {
                                                        "value": "[parameters('vmName')]"
                                                    },
                                                    "ipConfiguration": {
                                                        "value": "[parameters('nicConfiguration').ipConfigurations[copyIndex('vmNicPipConfigLoop')]]"
                                                    },
                                                    "lockForDeletion": {
                                                        "value": "[parameters('lockForDeletion')]"
                                                    },
                                                    "diagnosticSettingName": {
                                                        "value": "[parameters('diagnosticSettingName')]"
                                                    },
                                                    "diagnosticStorageAccountId": {
                                                        "value": "[parameters('diagnosticStorageAccountId')]"
                                                    },
                                                    "workspaceId": {
                                                        "value": "[parameters('workspaceId')]"
                                                    },
                                                    "eventHubAuthorizationRuleId": {
                                                        "value": "[parameters('eventHubAuthorizationRuleId')]"
                                                    },
                                                    "eventHubName": {
                                                        "value": "[parameters('eventHubName')]"
                                                    },
                                                    "diagnosticsMetrics": {
                                                        "value": "[parameters('diagnosticsMetrics')]"
                                                    },
                                                    "diagnosticLogsRetentionInDays": {
                                                        "value": "[parameters('diagnosticLogsRetentionInDays')]"
                                                    }
                                                },
                                                "template": {
                                                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                                    "contentVersion": "1.0.0.0",
                                                    "parameters": {
                                                        "location": {
                                                            "type": "string"
                                                        },
                                                        "tags": {
                                                            "type": "object"
                                                        },
                                                        "vmName": {
                                                            "type": "string"
                                                        },
                                                        "ipConfiguration": {
                                                            "type": "object"
                                                        },
                                                        "lockForDeletion": {
                                                            "type": "bool"
                                                        },
                                                        "diagnosticSettingName": {
                                                            "type": "string"
                                                        },
                                                        "diagnosticStorageAccountId": {
                                                            "type": "string"
                                                        },
                                                        "workspaceId": {
                                                            "type": "string"
                                                        },
                                                        "eventHubAuthorizationRuleId": {
                                                            "type": "string"
                                                        },
                                                        "eventHubName": {
                                                            "type": "string"
                                                        },
                                                        "diagnosticsMetrics": {
                                                            "type": "array"
                                                        },
                                                        "diagnosticLogsRetentionInDays": {
                                                            "type": "int"
                                                        }
                                                    },
                                                    "variables": {
                                                        "pipName": "[if(contains(parameters('ipConfiguration'), 'publicIpNameSuffix'), concat(parameters('vmName'), parameters('ipConfiguration').publicIpNameSuffix), 'dummyPipName')]",
                                                        "pipDiagnosticsLogs": [
                                                            {
                                                                "category": "DDoSProtectionNotifications",
                                                                "enabled": true,
                                                                "retentionPolicy": {
                                                                    "enabled": true,
                                                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                                                }
                                                            },
                                                            {
                                                                "category": "DDoSMitigationFlowLogs",
                                                                "enabled": true,
                                                                "retentionPolicy": {
                                                                    "enabled": true,
                                                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                                                }
                                                            },
                                                            {
                                                                "category": "DDoSMitigationReports",
                                                                "enabled": true,
                                                                "retentionPolicy": {
                                                                    "enabled": true,
                                                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    "resources": [
                                                        {
                                                            "type": "Microsoft.Network/publicIPAddresses",
                                                            "apiVersion": "2020-08-01",
                                                            "name": "[variables('pipName')]",
                                                            "location": "[parameters('location')]",
                                                            "tags": "[parameters('tags')]",
                                                            "condition": "[and(contains(parameters('ipConfiguration') , 'enablePublicIP'), parameters('ipConfiguration').enablePublicIP)]",
                                                            "sku": {
                                                                "name": "Standard"
                                                            },
                                                            "properties": {
                                                                "publicIPAllocationMethod": "Static",
                                                                "publicIPPrefix": "[if(contains(parameters('ipConfiguration') , 'publicIPPrefixId'), if(not(empty(parameters('ipConfiguration').publicIPPrefixId)), json(concat('{\"id\": \"', parameters('ipConfiguration').publicIPPrefixId, '\"}')), json('null')), json('null'))]"
                                                            },
                                                            "zones": "[json('null')]",
                                                            "resources": [
                                                                {
                                                                    "type": "providers/locks",
                                                                    "apiVersion": "2016-09-01",
                                                                    "condition": "[and(and(contains(parameters('ipConfiguration'), 'enablePublicIP'), parameters('ipConfiguration').enablePublicIP),parameters('lockForDeletion'))]",
                                                                    "name": "Microsoft.Authorization/publicIpDoNotDelete",
                                                                    "dependsOn": [
                                                                        "[concat('Microsoft.Network/publicIPAddresses/', variables('pipName'))]"
                                                                    ],
                                                                    "comments": "Resource lock on Public IP",
                                                                    "properties": {
                                                                        "level": "CannotDelete"
                                                                    }
                                                                },
                                                                {
                                                                    "type": "Microsoft.Network/publicIPAddresses/providers/diagnosticSettings",
                                                                    "apiVersion": "2017-05-01-preview",
                                                                    "location": "[parameters('location')]",
                                                                    "tags": "[parameters('tags')]",
                                                                    "condition": "[and(and(contains(parameters('ipConfiguration'), 'enablePublicIP'), parameters('ipConfiguration').enablePublicIP), or(not(empty(parameters('diagnosticStorageAccountId'))),not(empty(parameters('workspaceId'))),not(empty(parameters('eventHubAuthorizationRuleId'))),not(empty(parameters('eventHubName')))))]",
                                                                    "name": "[concat(variables('pipName'), '/Microsoft.Insights/', parameters('diagnosticSettingName'))]",
                                                                    "dependsOn": [
                                                                        "[concat('Microsoft.Network/publicIPAddresses/', variables('pipName'))]"
                                                                    ],
                                                                    "properties": {
                                                                        "storageAccountId": "[if(empty(parameters('diagnosticStorageAccountId')), json('null'), parameters('diagnosticStorageAccountId'))]",
                                                                        "workspaceId": "[if(empty(parameters('workspaceId')), json('null'), parameters('workspaceId'))]",
                                                                        "eventHubAuthorizationRuleId": "[if(empty(parameters('eventHubAuthorizationRuleId')), json('null'), parameters('eventHubAuthorizationRuleId'))]",
                                                                        "eventHubName": "[if(empty(parameters('eventHubName')), json('null'), parameters('eventHubName'))]",
                                                                        "metrics": "[if(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId')), empty(parameters('eventHubAuthorizationRuleId')), empty(parameters('eventHubName'))), json('null'), parameters('diagnosticsMetrics'))]",
                                                                        "logs": "[if(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId')), empty(parameters('eventHubAuthorizationRuleId')), empty(parameters('eventHubName'))), json('null'), variables('pipDiagnosticsLogs'))]"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        {
                                            "type": "Microsoft.Network/networkInterfaces",
                                            "apiVersion": "2020-08-01",
                                            "location": "[parameters('location')]",
                                            "tags": "[parameters('tags')]",
                                            "dependsOn": [
                                                "vmNicPipConfigLoop"
                                            ],
                                            "name": "[variables('nicName')]",
                                            "properties": {
                                                "enableIPForwarding": "[if(contains(parameters('nicConfiguration'), 'enableIPForwarding'), parameters('nicConfiguration').enableIPForwarding, 'false')]",
                                                "enableAcceleratedNetworking": "[if(contains(parameters('nicConfiguration'), 'enableAcceleratedNetworking'), parameters('nicConfiguration').enableAcceleratedNetworking, 'false')]",
                                                "dnsSettings": "[if(contains(parameters('nicConfiguration'), 'dnsServers'), if(empty(parameters('nicConfiguration').dnsServers), json('null'), variables('dnsServersValues')), json('null'))]",
                                                "copy": [
                                                    {
                                                        "name": "ipConfigurations",
                                                        "count": "[length(parameters('nicConfiguration').ipConfigurations)]",
                                                        "input": {
                                                            "name": "[if(contains(parameters('nicConfiguration').ipConfigurations[copyIndex('ipConfigurations')], 'name'), parameters('nicConfiguration').ipConfigurations[copyIndex('ipConfigurations')].name, concat('ipconfig', copyIndex('ipConfigurations', 1)))]",
                                                            "properties": {
                                                                "primary": "[if(equals(copyIndex('ipConfigurations'), 0), 'true', 'false')]",
                                                                "privateIPAllocationMethod": "[if(contains(parameters('nicConfiguration').ipConfigurations[copyIndex('ipConfigurations')], 'vmIPAddress'), if(empty(parameters('nicConfiguration').ipConfigurations[copyIndex('ipConfigurations')].vmIPAddress), 'Dynamic', 'Static'), 'Dynamic')]",
                                                                "publicIPAddress": "[if(contains(parameters('nicConfiguration').ipConfigurations[copyIndex('ipConfigurations')], 'enablePublicIP'), if(parameters('nicConfiguration').ipConfigurations[copyIndex('ipConfigurations')].enablePublicIP, json(concat('{\"id\":\"', resourceId('Microsoft.Network/publicIPAddresses', concat(parameters('vmName'), parameters('nicConfiguration').ipConfigurations[copyIndex('ipConfigurations')].publicIpNameSuffix)),'\"}')), json('null')), json('null'))]",
                                                                "privateIPAddress": "[if(contains(parameters('nicConfiguration').ipConfigurations[copyIndex('ipConfigurations')], 'vmIPAddress'), if(empty(parameters('nicConfiguration').ipConfigurations[copyIndex('ipConfigurations')].vmIPAddress), json('null'), iacs.nextIP(parameters('nicConfiguration').ipConfigurations[copyIndex('ipConfigurations')].vmIPAddress, parameters('vmLoopIndex'))), json('null'))]",
                                                                "subnet": {
                                                                    "id": "[parameters('nicConfiguration').ipConfigurations[copyIndex('ipConfigurations')].subnetId]"
                                                                },
                                                                "loadBalancerBackendAddressPools": "[if(contains(parameters('nicConfiguration').ipConfigurations[copyIndex('ipConfigurations')], 'loadBalancerBackendAddressPools'), parameters('nicConfiguration').ipConfigurations[copyIndex('ipConfigurations')].loadBalancerBackendAddressPools, '')]",
                                                                "applicationSecurityGroups": "[if(contains(parameters('nicConfiguration').ipConfigurations[copyIndex('ipConfigurations')], 'applicationSecurityGroups'), parameters('nicConfiguration').ipConfigurations[copyIndex('ipConfigurations')].applicationSecurityGroups, '')]"
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            "resources": [
                                                {
                                                    "type": "providers/locks",
                                                    "apiVersion": "2016-09-01",
                                                    "condition": "[parameters('lockForDeletion')]",
                                                    "name": "Microsoft.Authorization/networkInterfaceDoNotDelete",
                                                    "dependsOn": [
                                                        "[concat('Microsoft.Network/networkInterfaces/', variables('nicName'))]"
                                                    ],
                                                    "comments": "Resource lock on Network Interface",
                                                    "properties": {
                                                        "level": "CannotDelete"
                                                    }
                                                },
                                                {
                                                    "type": "Microsoft.Network/networkInterfaces/providers/diagnosticSettings",
                                                    "apiVersion": "2017-05-01-preview",
                                                    "location": "[parameters('location')]",
                                                    "tags": "[parameters('tags')]",
                                                    "name": "[concat(variables('nicName'), '/Microsoft.Insights/', parameters('diagnosticSettingName'))]",
                                                    "condition": "[or(not(empty(parameters('diagnosticStorageAccountId'))),not(empty(parameters('workspaceId'))),not(empty(parameters('eventHubAuthorizationRuleId'))),not(empty(parameters('eventHubName'))))]",
                                                    "dependsOn": [
                                                        "[concat('Microsoft.Network/networkInterfaces/', variables('nicName'))]"
                                                    ],
                                                    "properties": {
                                                        "storageAccountId": "[if(empty(parameters('diagnosticStorageAccountId')), json('null'), parameters('diagnosticStorageAccountId'))]",
                                                        "workspaceId": "[if(empty(parameters('workspaceId')), json('null'), parameters('workspaceId'))]",
                                                        "eventHubAuthorizationRuleId": "[if(empty(parameters('eventHubAuthorizationRuleId')), json('null'), parameters('eventHubAuthorizationRuleId'))]",
                                                        "eventHubName": "[if(empty(parameters('eventHubName')), json('null'), parameters('eventHubName'))]",
                                                        "metrics": "[if(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId')), empty(parameters('eventHubAuthorizationRuleId')), empty(parameters('eventHubName'))), json('null'), parameters('diagnosticsMetrics'))]"
                                                    }
                                                }
                                            ]
                                        }
                                    ],
                                    "functions": [
                                        {
                                            "namespace": "iacs",
                                            "members": {
                                                "nextIP": {
                                                    "parameters": [
                                                        {
                                                            "name": "ip",
                                                            "type": "string"
                                                        },
                                                        {
                                                            "name": "operand",
                                                            "type": "int"
                                                        }
                                                    ],
                                                    "output": {
                                                        "type": "string",
                                                        "value": "[concat(split(parameters('ip'), '.')[0], '.' ,split(parameters('ip'), '.')[1], '.' ,split(parameters('ip'), '.')[2], '.', add(int(split(parameters('ip'), '.')[3]), parameters('operand')))]"
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "[parameters('vmName')]",
                            "type": "Microsoft.Compute/virtualMachines",
                            "apiVersion": "2020-06-01",
                            "dependsOn": [
                                "[if(greater(length(parameters('nicConfigurations')),1), 'vmNicDeployInnerLoop', variables('nicName') )]"
                            ],
                            "location": "[parameters('location')]",
                            "identity": "[parameters('identity')]",
                            "tags": "[parameters('tags')]",
                            "zones": "[if(parameters('useAvailabilityZone'), array(parameters('availabilityZone')), json('null'))]",
                            "plan": "[if(empty(parameters('plan')), json('null'),parameters('plan'))]",
                            "properties": {
                                "hardwareProfile": {
                                    "vmSize": "[parameters('vmSize')]"
                                },
                                "storageProfile": {
                                    "imageReference": "[parameters('imageReference')]",
                                    "osDisk": {
                                        "name": "[concat(parameters('vmName'), '-disk-os-01')]",
                                        "createOption": "[parameters('osDisk').createOption]",
                                        "diskSizeGB": "[parameters('osDisk').diskSizeGB]",
                                        "managedDisk": {
                                            "storageAccountType": "[parameters('osDisk').managedDisk.storageAccountType]"
                                        }
                                    },
                                    "copy": [
                                        {
                                            "name": "dataDisks",
                                            "count": "[length(parameters('dataDisks'))]",
                                            "input": {
                                                "lun": "[copyIndex('dataDisks')]",
                                                "name": "[concat(parameters('vmName'), '-disk-data-', padLeft(copyIndex('dataDisks',1),2,'0'))]",
                                                "diskSizeGB": "[parameters('dataDisks')[copyIndex('dataDisks')].diskSizeGB]",
                                                "createOption": "[parameters('dataDisks')[copyIndex('dataDisks')].createOption]",
                                                "caching": "[parameters('dataDisks')[copyIndex('dataDisks')].caching]",
                                                "managedDisk": {
                                                    "storageAccountType": "[parameters('dataDisks')[copyIndex('dataDisks')].managedDisk.storageAccountType]",
                                                    "diskEncryptionSet": {
                                                        "id": "[if(parameters('enableServerSideEncryption'), parameters('dataDisks')[copyIndex('dataDisks')].managedDisk.diskEncryptionSet.id, json('null'))]"
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                },
                                "additionalCapabilities": {
                                    "ultraSSDEnabled": "[parameters('ultraSSDEnabled')]"
                                },
                                "osProfile": {
                                    "computerName": "[variables('vmComputerNameTransformed')]",
                                    "adminUsername": "[parameters('adminUsername')]",
                                    "adminPassword": "[parameters('adminPassword')]",
                                    "customData": "[if(empty(parameters('customData')), json('null'), base64(parameters('customData')))]",
                                    "windowsConfiguration": "[if(empty(parameters('windowsConfiguration')), json('null'),parameters('windowsConfiguration'))]",
                                    "linuxConfiguration": "[if(empty(parameters('linuxConfiguration')), json('null'),parameters('linuxConfiguration'))]",
                                    "secrets": "[parameters('certificatesToBeInstalled')]",
                                    "allowExtensionOperations": "[parameters('allowExtensionOperations')]"
                                },
                                "networkProfile": {
                                    "copy": [
                                        {
                                            "name": "networkInterfaces",
                                            "count": "[length(parameters('nicConfigurations'))]",
                                            "input": {
                                                "properties": {
                                                    "primary": "[if(equals(copyIndex('networkInterfaces'), 0), 'true', 'false')]"
                                                },
                                                "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('vmName'), parameters('nicConfigurations')[copyIndex('networkInterfaces')].nicSuffix))]"
                                            }
                                        }
                                    ]
                                },
                                "diagnosticsProfile": {
                                    "bootDiagnostics": {
                                        "enabled": "[not(empty(parameters('bootDiagnosticStorageAccountName')))]",
                                        "storageUri": "[if(empty(parameters('bootDiagnosticStorageAccountName')), json('null'), concat('https://', parameters('bootDiagnosticStorageAccountName'), parameters('bootDiagnosticStorageAccountUri')))]"
                                    }
                                },
                                "availabilitySet": "[if(not(empty(variables('availabilitySetName'))), json(concat('{\"id\":\"', resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetName')),'\"}')), json('null'))]",
                                "proximityPlacementGroup": "[if(empty(parameters('proximityPlacementGroupName')), json('null'), json(concat('{\"id\":\"', resourceId('Microsoft.Compute/proximityPlacementGroups', parameters('proximityPlacementGroupName')),'\"}')))]",
                                "priority": "[parameters('vmPriority')]",
                                "evictionPolicy": "[if(parameters('enableEvictionPolicy'), 'Deallocate', json('null'))]",
                                "billingProfile": "[if(and(not(empty(parameters('vmPriority'))),not(empty(parameters('maxPriceForLowPriorityVm')))), json(concat('{\"maxPrice\":\"',parameters('maxPriceForLowPriorityVm'),'\"}')), json('null'))]",
                                "host": "[if(not(empty(parameters('dedicatedHostId'))), json(concat('{\"id\":\"',parameters('dedicatedHostId'),'\"}')), json('null'))]",
                                "licenseType": "[if(empty(parameters('licenseType')), json('null'),parameters('licenseType'))]"
                            },
                            "resources": [
                                {
                                    "type": "providers/locks",
                                    "apiVersion": "2016-09-01",
                                    "condition": "[parameters('lockForDeletion')]",
                                    "name": "Microsoft.Authorization/vmDoNotDelete",
                                    "dependsOn": [
                                        "[concat('Microsoft.Compute/virtualMachines/', parameters('vmName'))]"
                                    ],
                                    "comments": "Resource lock on Azure Virtual Machines",
                                    "properties": {
                                        "level": "CannotDelete"
                                    }
                                },
                                {
                                    "type": "Microsoft.Compute/virtualMachines/extensions",
                                    "name": "[concat(parameters('vmName'),'/DomainJoin')]",
                                    "apiVersion": "2019-07-01",
                                    "location": "[parameters('location')]",
                                    "condition": "[not(empty(parameters('domainName')))]",
                                    "dependsOn": [
                                        "[concat('Microsoft.Compute/virtualMachines/', parameters('vmName'))]"
                                    ],
                                    "properties": {
                                        "publisher": "Microsoft.Compute",
                                        "type": "JsonADDomainExtension",
                                        "typeHandlerVersion": "1.3",
                                        "autoUpgradeMinorVersion": true,
                                        "settings": {
                                            "Name": "[parameters('domainName')]",
                                            "User": "[parameters('domainJoinUser')]",
                                            "OUPath": "[parameters('domainJoinOU')]",
                                            "Restart": "[parameters('domainJoinRestart')]",
                                            "Options": "[parameters('domainJoinOptions')]"
                                        },
                                        "protectedSettings": {
                                            "Password": "[parameters('domainJoinPassword')]"
                                        }
                                    }
                                },
                                {
                                    "type": "Microsoft.Compute/virtualMachines/extensions",
                                    "name": "[concat(parameters('vmName'), '/MicrosoftAntiMalware')]",
                                    "apiVersion": "2019-07-01",
                                    "location": "[parameters('location')]",
                                    "condition": "[parameters('enableMicrosoftAntiMalware')]",
                                    "dependsOn": [
                                        "[concat('Microsoft.Compute/virtualMachines/', parameters('vmName'))]",
                                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('vmName'), 'DomainJoin')]"
                                    ],
                                    "properties": {
                                        "publisher": "Microsoft.Azure.Security",
                                        "type": "IaaSAntimalware",
                                        "typeHandlerVersion": "1.3",
                                        "autoUpgradeMinorVersion": true,
                                        "settings": "[parameters('microsoftAntiMalwareSettings')]"
                                    }
                                },
                                {
                                    "type": "Microsoft.Compute/virtualMachines/extensions",
                                    "name": "[concat(parameters('vmName'), '/WindowsMMAAgent')]",
                                    "apiVersion": "2019-07-01",
                                    "location": "[parameters('location')]",
                                    "condition": "[parameters('enableWindowsMMAAgent')]",
                                    "dependsOn": [
                                        "[concat('Microsoft.Compute/virtualMachines/', parameters('vmName'))]",
                                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('vmName'), 'MicrosoftAntiMalware')]"
                                    ],
                                    "properties": {
                                        "publisher": "Microsoft.EnterpriseCloud.Monitoring",
                                        "type": "MicrosoftMonitoringAgent",
                                        "typeHandlerVersion": "1.0",
                                        "autoUpgradeMinorVersion": true,
                                        "settings": {
                                            "workspaceId": "[if(empty(parameters('workspaceId')), 'dummy', reference(parameters('workspaceId'), '2015-11-01-preview').customerId)]"
                                        },
                                        "protectedSettings": {
                                            "workspaceKey": "[if(empty(parameters('workspaceId')), 'dummy', listKeys(parameters('workspaceId'), '2015-11-01-preview').primarySharedKey)]"
                                        }
                                    }
                                },
                                {
                                    "type": "Microsoft.Compute/virtualMachines/extensions",
                                    "name": "[concat(parameters('vmName'), '/LinuxMMAAgent')]",
                                    "apiVersion": "2019-07-01",
                                    "location": "[parameters('location')]",
                                    "condition": "[parameters('enableLinuxMMAAgent')]",
                                    "dependsOn": [
                                        "[concat('Microsoft.Compute/virtualMachines/', parameters('vmName'))]",
                                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('vmName'), 'WindowsMMAAgent')]"
                                    ],
                                    "properties": {
                                        "publisher": "Microsoft.EnterpriseCloud.Monitoring",
                                        "type": "OmsAgentForLinux",
                                        "typeHandlerVersion": "1.7",
                                        "autoUpgradeMinorVersion": true,
                                        "settings": {
                                            "workspaceId": "[if(empty(parameters('workspaceId')), 'dummy', reference(parameters('workspaceId'), '2015-11-01-preview').customerId)]"
                                        },
                                        "protectedSettings": {
                                            "workspaceKey": "[if(empty(parameters('workspaceId')), 'dummy', listKeys(parameters('workspaceId'), '2015-11-01-preview').primarySharedKey)]"
                                        }
                                    }
                                },
                                {
                                    "type": "Microsoft.Compute/virtualMachines/extensions",
                                    "name": "[concat(parameters('vmName'), '/WindowsDiskEncryption')]",
                                    "apiVersion": "2019-07-01",
                                    "location": "[parameters('location')]",
                                    "condition": "[parameters('enableWindowsDiskEncryption')]",
                                    "dependsOn": [
                                        "[concat('Microsoft.Compute/virtualMachines/', parameters('vmName'))]",
                                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('vmName'), 'LinuxMMAAgent')]"
                                    ],
                                    "properties": {
                                        "publisher": "Microsoft.Azure.Security",
                                        "type": "AzureDiskEncryption",
                                        "typeHandlerVersion": "2.2",
                                        "autoUpgradeMinorVersion": true,
                                        "forceUpdateTag": "[parameters('forceUpdateTag')]",
                                        "settings": {
                                            "EncryptionOperation": "EnableEncryption",
                                            "KeyVaultURL": "[parameters('keyVaultUri')]",
                                            "KeyVaultResourceId": "[parameters('keyVaultId')]",
                                            "KeyEncryptionKeyURL": "[parameters('keyEncryptionKeyURL')]",
                                            "KekVaultResourceId": "[parameters('keyVaultId')]",
                                            "KeyEncryptionAlgorithm": "[parameters('diskKeyEncryptionAlgorithm')]",
                                            "VolumeType": "[parameters('diskEncryptionVolumeType')]",
                                            "ResizeOSDisk": "[parameters('resizeOSDisk')]"
                                        }
                                    }
                                },
                                {
                                    "type": "Microsoft.Compute/virtualMachines/extensions",
                                    "name": "[concat(parameters('vmName'), '/LinuxDiskEncryption')]",
                                    "apiVersion": "2019-07-01",
                                    "location": "[parameters('location')]",
                                    "condition": "[parameters('enableLinuxDiskEncryption')]",
                                    "dependsOn": [
                                        "[concat('Microsoft.Compute/virtualMachines/', parameters('vmName'))]",
                                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('vmName'), 'WindowsDiskEncryption')]"
                                    ],
                                    "properties": {
                                        "publisher": "Microsoft.Azure.Security",
                                        "type": "AzureDiskEncryptionForLinux",
                                        "typeHandlerVersion": "1.1",
                                        "autoUpgradeMinorVersion": true,
                                        "forceUpdateTag": "[parameters('forceUpdateTag')]",
                                        "settings": {
                                            "EncryptionOperation": "EnableEncryption",
                                            "KeyVaultURL": "[parameters('keyVaultUri')]",
                                            "KeyVaultResourceId": "[parameters('keyVaultId')]",
                                            "KeyEncryptionKeyURL": "[parameters('keyEncryptionKeyURL')]",
                                            "KekVaultResourceId": "[parameters('keyVaultId')]",
                                            "KeyEncryptionAlgorithm": "[parameters('diskKeyEncryptionAlgorithm')]",
                                            "VolumeType": "[parameters('diskEncryptionVolumeType')]"
                                        }
                                    }
                                },
                                {
                                    "type": "Microsoft.Compute/virtualMachines/extensions",
                                    "apiVersion": "2019-07-01",
                                    "name": "[concat(parameters('vmName'), '/DependencyAgentWindows')]",
                                    "location": "[parameters('location')]",
                                    "condition": "[parameters('enableWindowsDependencyAgent')]",
                                    "dependsOn": [
                                        "[concat('Microsoft.Compute/virtualMachines/', parameters('vmName'))]",
                                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('vmName'), 'LinuxDiskEncryption')]"
                                    ],
                                    "properties": {
                                        "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                                        "type": "DependencyAgentWindows",
                                        "typeHandlerVersion": "9.5",
                                        "autoUpgradeMinorVersion": true
                                    }
                                },
                                {
                                    "type": "Microsoft.Compute/virtualMachines/extensions",
                                    "apiVersion": "2019-07-01",
                                    "name": "[concat(parameters('vmName'), '/DependencyAgentLinux')]",
                                    "location": "[parameters('location')]",
                                    "condition": "[parameters('enableLinuxDependencyAgent')]",
                                    "dependsOn": [
                                        "[concat('Microsoft.Compute/virtualMachines/', parameters('vmName'))]",
                                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('vmName'), 'DependencyAgentWindows')]"
                                    ],
                                    "properties": {
                                        "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                                        "type": "DependencyAgentLinux",
                                        "typeHandlerVersion": "9.5",
                                        "autoUpgradeMinorVersion": true
                                    }
                                },
                                {
                                    "type": "Microsoft.Compute/virtualMachines/extensions",
                                    "name": "[concat(parameters('vmName'), '/NetworkWatcherAgentWindows')]",
                                    "apiVersion": "2019-07-01",
                                    "location": "[parameters('location')]",
                                    "condition": "[parameters('enableNetworkWatcherWindows')]",
                                    "dependsOn": [
                                        "[concat('Microsoft.Compute/virtualMachines/', parameters('vmName'))]",
                                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('vmName'), 'DependencyAgentLinux')]"
                                    ],
                                    "properties": {
                                        "publisher": "Microsoft.Azure.NetworkWatcher",
                                        "type": "NetworkWatcherAgentWindows",
                                        "typeHandlerVersion": "1.4",
                                        "autoUpgradeMinorVersion": true,
                                        "settings": {}
                                    }
                                },
                                {
                                    "type": "Microsoft.Compute/virtualMachines/extensions",
                                    "name": "[concat(parameters('vmName'), '/NetworkWatcherAgentLinux')]",
                                    "apiVersion": "2019-07-01",
                                    "location": "[parameters('location')]",
                                    "condition": "[parameters('enableNetworkWatcherLinux')]",
                                    "dependsOn": [
                                        "[concat('Microsoft.Compute/virtualMachines/', parameters('vmName'))]",
                                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('vmName'), 'NetworkWatcherAgentWindows')]"
                                    ],
                                    "properties": {
                                        "publisher": "Microsoft.Azure.NetworkWatcher",
                                        "type": "NetworkWatcherAgentLinux",
                                        "typeHandlerVersion": "1.4",
                                        "autoUpgradeMinorVersion": true,
                                        "settings": {}
                                    }
                                },
                                {
                                    "type": "Microsoft.Compute/virtualMachines/extensions",
                                    "name": "[concat(parameters('vmName'), '/windowsDsc')]",
                                    "apiVersion": "2018-10-01",
                                    "location": "[parameters('location')]",
                                    "condition": "[not(empty(parameters('dscConfiguration')))]",
                                    "dependsOn": [
                                        "[concat('Microsoft.Compute/virtualMachines/', parameters('vmName'))]",
                                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('vmName'), 'NetworkWatcherAgentLinux')]"
                                    ],
                                    "properties": {
                                        "publisher": "Microsoft.Powershell",
                                        "type": "DSC",
                                        "typeHandlerVersion": "2.77",
                                        "autoUpgradeMinorVersion": true,
                                        "settings": "[parameters('dscConfiguration').settings]",
                                        "protectedSettings": "[if( contains(parameters('dscConfiguration'), 'protectedSettings'), parameters('dscConfiguration').protectedSettings, json('null') )]"
                                    }
                                }
                            ]
                        },
                        {
                            "apiVersion": "2019-07-01",
                            "type": "Microsoft.Compute/virtualMachines/extensions",
                            "name": "[concat(parameters('vmName'), '/WindowsCustomScriptExtension')]",
                            "location": "[parameters('location')]",
                            "condition": "[and(not(empty(parameters('windowsScriptExtensionFileData'))),not(empty(parameters('windowsScriptExtensionCommandToExecute'))))]",
                            "dependsOn": [
                                "[concat('Microsoft.Compute/virtualMachines/', parameters('vmName'))]",
                                "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('vmName'), 'windowsDsc')]"
                            ],
                            "properties": {
                                "publisher": "Microsoft.Compute",
                                "type": "CustomScriptExtension",
                                "typeHandlerVersion": "1.9",
                                "autoUpgradeMinorVersion": true,
                                "settings": {
                                    "copy": [
                                        {
                                            "name": "fileUris",
                                            "count": "[length(parameters('windowsScriptExtensionFileData'))]",
                                            "input": "[concat(parameters('windowsScriptExtensionFileData')[copyIndex('fileUris')].uri,if(contains(parameters('windowsScriptExtensionFileData')[copyIndex('fileUris')], 'storageAccountId'),concat('?',listAccountSas(parameters('windowsScriptExtensionFileData')[copyIndex('fileUris')].storageAccountId, '2019-04-01', parameters('accountSasProperties')).accountSasToken) , '' ))]"
                                        }
                                    ]
                                },
                                "protectedSettings": {
                                    "commandToExecute": "[parameters('windowsScriptExtensionCommandToExecute')]",
                                    "storageAccountName": "[if(not(empty(parameters('cseStorageAccountName'))), parameters('cseStorageAccountName'), json('null'))]",
                                    "storageAccountKey": "[if(not(empty(parameters('cseStorageAccountKey'))), parameters('cseStorageAccountKey'), json('null'))]",
                                    "managedIdentity": "[if(not(empty(parameters('cseManagedIdentity'))), parameters('cseManagedIdentity'), json('null'))]"
                                }
                            }
                        },
                        {
                            "name": "[concat('add-', parameters('vmName'), '-ToBackup')]",
                            "condition": "[not(empty(parameters('backupVaultName')))]",
                            "type": "Microsoft.Resources/deployments",
                            "apiVersion": "2020-06-01",
                            "dependsOn": [
                                "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('vmName'), 'WindowsCustomScriptExtension')]",
                                "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('vmName'), 'NetworkWatcherAgentLinux')]"
                            ],
                            "resourceGroup": "[parameters('backupVaultResourceGroup')]",
                            "properties": {
                                "mode": "Incremental",
                                "template": {
                                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                    "contentVersion": "1.0.0.0",
                                    "resources": [
                                        {
                                            "apiVersion": "2016-12-01",
                                            "type": "Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems",
                                            "name": "[concat(parameters('backupVaultName'), '/Azure/iaasvmcontainer;iaasvmcontainerv2;', resourceGroup().name, ';', parameters('vmName'), '/vm;iaasvmcontainerv2;', resourceGroup().name, ';', parameters('vmName'))]",
                                            "properties": {
                                                "protectedItemType": "Microsoft.Compute/virtualMachines",
                                                "policyId": "[resourceId('Microsoft.RecoveryServices/vaults/backupPolicies', parameters('backupVaultName'), parameters('backupPolicyName'))]",
                                                "sourceResourceId": "[resourceId('Microsoft.Compute/virtualMachines/', parameters('vmName'))]"
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "[concat('rbac-', parameters('vmName'), '-', copyIndex('rbacDeplCopy'))]",
                            "apiVersion": "2020-06-01",
                            "type": "Microsoft.Resources/deployments",
                            "condition": "[not(empty(parameters('roleAssignments')))]",
                            "dependsOn": [
                                "[parameters('vmName')]"
                            ],
                            "copy": {
                                "name": "rbacDeplCopy",
                                "count": "[length(parameters('roleAssignments'))]"
                            },
                            "properties": {
                                "mode": "Incremental",
                                "expressionEvaluationOptions": {
                                    "scope": "inner"
                                },
                                "parameters": {
                                    "roleAssignment": {
                                        "value": "[parameters('roleAssignments')[copyIndex()]]"
                                    },
                                    "builtInRoleNames": {
                                        "value": "[parameters('builtInRoleNames')]"
                                    },
                                    "vmName": {
                                        "value": "[parameters('vmName')]"
                                    }
                                },
                                "template": {
                                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                    "contentVersion": "1.0.0.0",
                                    "parameters": {
                                        "roleAssignment": {
                                            "type": "object"
                                        },
                                        "builtInRoleNames": {
                                            "type": "object"
                                        },
                                        "vmName": {
                                            "type": "string"
                                        }
                                    },
                                    "resources": [
                                        {
                                            "type": "Microsoft.Compute/virtualMachines/providers/roleAssignments",
                                            "apiVersion": "2018-09-01-preview",
                                            "name": "[concat(parameters('vmName'), '/Microsoft.Authorization/', guid(uniqueString(concat(parameters('vmName'), array(parameters('roleAssignment').principalIds)[copyIndex('innerRbacCopy')], parameters('roleAssignment').roleDefinitionIdOrName ) )))]",
                                            "dependsOn": [],
                                            "copy": {
                                                "name": "innerRbacCopy",
                                                "count": "[length(parameters('roleAssignment').principalIds)]"
                                            },
                                            "properties": {
                                                "roleDefinitionId": "[if(contains(parameters('builtInRoleNames'), parameters('roleAssignment').roleDefinitionIdOrName ), parameters('builtInRoleNames')[parameters('roleAssignment').roleDefinitionIdOrName] , parameters('roleAssignment').roleDefinitionIdOrName )]",
                                                "principalId": "[array(parameters('roleAssignment').principalIds)[copyIndex()]]"
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    ],
                    "functions": [
                        {
                            "namespace": "iacs",
                            "members": {
                                "nextIP": {
                                    "parameters": [
                                        {
                                            "name": "ip",
                                            "type": "string"
                                        },
                                        {
                                            "name": "operand",
                                            "type": "int"
                                        }
                                    ],
                                    "output": {
                                        "type": "string",
                                        "value": "[concat(split(parameters('ip'), '.')[0], '.' ,split(parameters('ip'), '.')[1], '.' ,split(parameters('ip'), '.')[2], '.', add(int(split(parameters('ip'), '.')[3]), parameters('operand')))]"
                                    }
                                }
                            }
                        }
                    ]
                }
            },
            "copy": {
                "name": "vmLoop",
                "count": "[length(parameters('vmNames'))]"
            },
            "condition": "[not(empty(parameters('nicConfigurations')))]"
        }
    ],
    "outputs": {
        "deploymentOutput": {
            "type": "Array",
            "value": "[parameters('vmNames')]",
            "metadata": {
                "description": "VM deployment outputs"
            }
        }
    }
}