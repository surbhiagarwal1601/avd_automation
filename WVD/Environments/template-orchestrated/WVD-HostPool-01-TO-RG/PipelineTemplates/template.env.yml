parameters:
  # Pipeline-related parameters
  environment:
  serviceConnection:
  poolName:
  vmImage:

  # Control-related parameters
  enableJobUpdateAssetsStorageAccount:
  enableJobSyncSessionHostVMs:
  enableDeploymentMasterARMTemplate:
  enableHostPoolJoin:
  enableRestartVMsAfterExtensionsDeployment:
  enableJobSessionHostImageLifecycle:

jobs:
  ## Update Assets Storage Account
  - deployment: Update_AssetsStorageAccount
    displayName: Update Assets Storage Account
    environment: ${{ parameters.environment }}
    condition: |
      and(
        not(canceled()),
        eq(${{ parameters.enableJobUpdateAssetsStorageAccount }}, true)
      )
    timeoutInMinutes: 120
    pool:
      ${{ if ne(parameters.vmImage, '') }}:
        vmImage: '${{ parameters.vmImage }}'
      ${{ if ne(parameters.poolName, '') }}:
        name: '${{ parameters.poolName }}'
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - task: AzurePowerShell@4
              displayName: 'Upload latest configuration files to assets storage account'
              name: PostDeploy_StorageAccounts_Task
              inputs:
                azureSubscription: '${{ parameters.serviceConnection }}'
                ScriptType: InlineScript
                inline: |
                  Write-Verbose "Load function" -Verbose
                  . '$(Build.SourcesDirectory)/$(orchestrationFunctionsPath)/Storage/Update-AssetsStorageAccount.ps1'

                  $functionInput = @{
                    orchestrationFunctionsPath = Join-Path '$(Build.SourcesDirectory)' '$(orchestrationFunctionsPath)'
                    wvdUploadsPath             = Join-Path '$(Build.SourcesDirectory)' '$(wvdUploadsPath)'
                    resourceGroupPath          = Join-Path '$(Build.SourcesDirectory)' '$(rgFolderPath)'
                    storageContainerMapPath    = Join-Path '$(Build.SourcesDirectory)' '$(rgFolderPath)/$(storageContainerMapPath)'
                    hostPoolName               = '$(HostPoolName)'
                  }

                  Write-Verbose "Invoke task with" -Verbose
                  $functionInput.Keys | ForEach-Object { Write-Verbose ("PARAMETER: `t'{0}' with value '{1}'" -f $_, $functionInput[$_]) -Verbose }

                  Update-AssetsStorageAccount @functionInput -Verbose
                errorActionPreference: stop
                azurePowerShellVersion: LatestVersion
              enabled: true

  ## Sync VMs with registered session hosts & state table
  - deployment: Sync_HostPoolVMs
    displayName: Sync Session Host VMs
    environment: ${{ parameters.environment }}
    condition: |
      and(
        not(canceled()),
        eq('${{ parameters.enableJobSyncSessionHostVMs }}', 'true')
      )
    timeoutInMinutes: 120
    pool:
      ${{ if ne(parameters.vmImage, '') }}:
        vmImage: '${{ parameters.vmImage }}'
      ${{ if ne(parameters.poolName, '') }}:
        name: '${{ parameters.poolName }}'
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - powershell: |
                if(-not (Get-Module AzTable -ListAvailable)) {
                    Write-Verbose "Installing module 'AzTable'" -Verbose
                    Install-Module AzTable -Repository PSGallery -Force -Scope CurrentUser
                } else {
                    Write-Verbose "Module 'AzTable' already installed" -Verbose
                }
            - task: AzurePowerShell@4
              displayName: 'Sync Session Host VMs'
              inputs:
                azureSubscription: '${{ parameters.serviceConnection }}'
                ScriptType: InlineScript
                inline: |
                  Write-Verbose "Load function" -Verbose
                  . '$(Build.SourcesDirectory)/$(orchestrationFunctionsPath)/Storage/Sync-SessionHostEntry.ps1'

                  $functionInput = @{
                    orchestrationFunctionsPath = Join-Path '$(Build.SourcesDirectory)' '$(orchestrationFunctionsPath)'
                    hostPoolResourceGroupName  = '$(ResourceGroupName)'
                  }

                  if(-not ([String]::IsNullOrEmpty('$(stateStorageAccountName)'))) { $functionInput['stateStorageAccountName'] = '$(stateStorageAccountName)' }
                  if(-not ([String]::IsNullOrEmpty('$(stateTableName)'))) { $functionInput['stateTableName'] = '$(stateTableName)' }


                  Write-Verbose "Invoke task with" -Verbose
                  $functionInput.Keys | ForEach-Object { Write-Verbose ("PARAMETER: `t'{0}' with value '{1}'" -f $_, $functionInput[$_]) -Verbose }

                  Sync-SessionHostEntry @functionInput -Verbose
                errorActionPreference: stop
                azurePowerShellVersion: LatestVersion
              enabled: true

  ## Host Pool Resource Deployment
  - deployment: Deploy_HostPool
    displayName: Deploy Host Pool Resources
    dependsOn:
      - ${{ if eq(parameters.enableJobUpdateAssetsStorageAccount, true) }}:
          - Update_AssetsStorageAccount
      - ${{ if eq(parameters.enableJobSyncSessionHostVMs, true) }}:
          - Update_AssetsStorageAccount
    environment: ${{ parameters.environment }}
    condition: |
      and(
        not(canceled()),
        eq('${{ parameters.enableDeploymentMasterARMTemplate }}', true),
        in(dependencies.Update_AssetsStorageAccount.result, '', 'Succeeded', 'Skipped'),
        in(dependencies.Sync_HostPoolVMs.result, '', 'Succeeded', 'Skipped')
      )
    timeoutInMinutes: 120
    pool:
      ${{ if ne(parameters.vmImage, '') }}:
        vmImage: '${{ parameters.vmImage }}'
      ${{ if ne(parameters.poolName, '') }}:
        name: '${{ parameters.poolName }}'
    strategy:
      runOnce:
        deploy:
          steps:
            - template: template.dpl.yml
              parameters:
                serviceConnection: '${{ parameters.serviceConnection }}'
                jsonParameterToEnable: enableWvdResources
                purgeRgDeployments: true
                stepNameSuffix: '[WVD Resources]'

  ## Virtual Machine Deployment
  - deployment: Deploy_VirtualMachines
    displayName: Deploy Virtual Machines
    dependsOn:
      - Deploy_HostPool
    environment: ${{ parameters.environment }}
    condition: |
      and(
        not(canceled()),
        eq(${{ parameters.enableDeploymentMasterARMTemplate }}, true),
        in(dependencies.Deploy_HostPool.result, '', 'Succeeded')
      )
    timeoutInMinutes: 120
    pool:
      ${{ if ne(parameters.vmImage, '') }}:
        vmImage: '${{ parameters.vmImage }}'
      ${{ if ne(parameters.poolName, '') }}:
        name: '${{ parameters.poolName }}'
    strategy:
      runOnce:
        deploy:
          steps:
            - template: template.dpl.yml
              parameters:
                serviceConnection: '${{ parameters.serviceConnection }}'
                jsonParameterToEnable: enableVmResources
                stepNameSuffix: '[VM without extensions]'
                continueOnError: true

  ## Virtual Machine Deployment Retry 01
  - deployment: Deploy_VirtualMachinesRetry01
    displayName: Deploy Virtual Machines Retry 01
    dependsOn:
      - Deploy_VirtualMachines
    environment: ${{ parameters.environment }}
    condition: |
      and(
        not(canceled()),
        in(dependencies.Deploy_VirtualMachines.result, 'Failed', 'SucceededWithIssues')
      )
    timeoutInMinutes: 120
    pool:
      ${{ if ne(parameters.vmImage, '') }}:
        vmImage: '${{ parameters.vmImage }}'
      ${{ if ne(parameters.poolName, '') }}:
        name: '${{ parameters.poolName }}'
    strategy:
      runOnce:
        deploy:
          steps:
            - template: template.dpl.yml
              parameters:
                serviceConnection: '${{ parameters.serviceConnection }}'
                jsonParameterToEnable: enableVmResources
                stepNameSuffix: '[VM without extensions]'
                purgeFailedResources: true
                waitForDeployments: true
                continueOnError: true

  ## Virtual Machine Deployment Retry 02
  - deployment: Deploy_VirtualMachinesRetry02
    displayName: Deploy Virtual Machines Retry 02
    dependsOn:
      - Deploy_VirtualMachinesRetry01
    environment: ${{ parameters.environment }}
    condition: |
      and(
        not(canceled()),
        in(dependencies.Deploy_VirtualMachinesRetry01.result, 'Failed', 'SucceededWithIssues')
      )
    timeoutInMinutes: 120
    pool:
      ${{ if ne(parameters.vmImage, '') }}:
        vmImage: '${{ parameters.vmImage }}'
      ${{ if ne(parameters.poolName, '') }}:
        name: '${{ parameters.poolName }}'
    strategy:
      runOnce:
        deploy:
          steps:
            - template: template.dpl.yml
              parameters:
                serviceConnection: '${{ parameters.serviceConnection }}'
                jsonParameterToEnable: enableVmResources
                stepNameSuffix: '[VM without extensions]'
                purgeFailedResources: true
                waitForDeployments: true

  ## Virtual Machine Extensions Deployment
  - deployment: Deploy_VMExtensions
    displayName: Deploy Virtual Machine Extensions
    dependsOn:
      - ${{ if eq(parameters.enableJobUpdateAssetsStorageAccount, true) }}:
          - Update_AssetsStorageAccount
      - ${{ if eq(parameters.enableJobSyncSessionHostVMs, true) }}:
          - Update_AssetsStorageAccount
      - Deploy_VirtualMachines
      - Deploy_VirtualMachinesRetry01
      - Deploy_VirtualMachinesRetry02
    environment: ${{ parameters.environment }}
    condition: |
      and(
        not(canceled()),
        eq(${{ parameters.enableDeploymentMasterARMTemplate }}, true),
        in(dependencies.Update_AssetsStorageAccount.result, '', 'Succeeded', 'Skipped'),
        in(dependencies.Sync_HostPoolVMs.result, '', 'Succeeded', 'Skipped'),
        or(
          in(dependencies.Deploy_VirtualMachines.result, '', 'Succeeded'),
          in(dependencies.Deploy_VirtualMachinesRetry01.result, '', 'Succeeded'),
          in(dependencies.Deploy_VirtualMachinesRetry02.result, '', 'Succeeded')
        )
      )
    timeoutInMinutes: 120
    pool:
      ${{ if ne(parameters.vmImage, '') }}:
        vmImage: '${{ parameters.vmImage }}'
      ${{ if ne(parameters.poolName, '') }}:
        name: '${{ parameters.poolName }}'
    strategy:
      runOnce:
        deploy:
          steps:
            - template: template.dpl.yml
              parameters:
                serviceConnection: '${{ parameters.serviceConnection }}'
                jsonParameterToEnable: enableVmExtensions
                restartVMsAfterExtensionsDeployment: '${{ parameters.enableRestartVMsAfterExtensionsDeployment }}'
                stepNameSuffix: '[VM with extensions]'
                continueOnError: true

  ## Virtual Machine Extensions Deployment
  - deployment: Deploy_VMExtensionsRetry01
    displayName: Deploy Virtual Machine Extensions Retry 01
    dependsOn:
      - Deploy_VMExtensions
    environment: ${{ parameters.environment }}
    condition: |
      and(
        not(canceled()),
        in(dependencies.Deploy_VMExtensions.result, 'Failed', 'SucceededWithIssues')
      )
    timeoutInMinutes: 120
    pool:
      ${{ if ne(parameters.vmImage, '') }}:
        vmImage: '${{ parameters.vmImage }}'
      ${{ if ne(parameters.poolName, '') }}:
        name: '${{ parameters.poolName }}'
    strategy:
      runOnce:
        deploy:
          steps:
            - template: template.dpl.yml
              parameters:
                serviceConnection: '${{ parameters.serviceConnection }}'
                jsonParameterToEnable: enableVmExtensions
                restartVMsAfterExtensionsDeployment: '${{ parameters.enableRestartVMsAfterExtensionsDeployment }}'
                stepNameSuffix: '[VM with extensions]'
                purgeFailedResources: true
                continueOnError: true
                waitForDeployments: true

  ## Virtual Machine Extensions Deployment
  - deployment: Deploy_VMExtensionsRetry02
    displayName: Deploy Virtual Machine Extensions Retry 02
    dependsOn:
      - Deploy_VMExtensionsRetry01
    environment: ${{ parameters.environment }}
    condition: |
      and(
        not(canceled()),
        in(dependencies.Deploy_VMExtensionsRetry01.result, 'Failed', 'SucceededWithIssues')
      )
    timeoutInMinutes: 120
    pool:
      ${{ if ne(parameters.vmImage, '') }}:
        vmImage: '${{ parameters.vmImage }}'
      ${{ if ne(parameters.poolName, '') }}:
        name: '${{ parameters.poolName }}'
    strategy:
      runOnce:
        deploy:
          steps:
            - template: template.dpl.yml
              parameters:
                serviceConnection: '${{ parameters.serviceConnection }}'
                jsonParameterToEnable: enableVmExtensions
                restartVMsAfterExtensionsDeployment: '${{ parameters.enableRestartVMsAfterExtensionsDeployment }}'
                stepNameSuffix: '[VM with extensions]'
                purgeFailedResources: true
                waitForDeployments: true

  ## Virtual Machine Hostpool Join Extension Deployment
  - deployment: Deploy_VMHostPoolJoin
    displayName: Deploy Virtual Machine Host Pool Extension
    dependsOn:
      - Deploy_VMExtensions
      - Deploy_VMExtensionsRetry01
      - Deploy_VMExtensionsRetry02
    environment: ${{ parameters.environment }}
    condition: |
      and(
        not(canceled()),
        eq(${{ parameters.enableDeploymentMasterARMTemplate }}, true),
        or(
          in(dependencies.Deploy_VMExtensions.result, '', 'Succeeded'),
          in(dependencies.Deploy_VMExtensionsRetry01.result, '', 'Succeeded'),
          in(dependencies.Deploy_VMExtensionsRetry02.result, '', 'Succeeded')
        )
      )
    timeoutInMinutes: 120
    pool:
      ${{ if ne(parameters.vmImage, '') }}:
        vmImage: '${{ parameters.vmImage }}'
      ${{ if ne(parameters.poolName, '') }}:
        name: '${{ parameters.poolName }}'
    strategy:
      runOnce:
        deploy:
          steps:
            - template: template.dpl.yml
              parameters:
                serviceConnection: '${{ parameters.serviceConnection }}'
                jsonParameterToEnable: enableHostPoolJoin
                stepNameSuffix: '[VM with hostpool extensions]'
                continueOnError: true

  ## Virtual Machine Hostpool Join Extension Deployment
  - deployment: Deploy_VMHostPoolJoinRetry01
    displayName: Deploy Virtual Machine Host Pool Extension Retry 01
    dependsOn:
      - Deploy_VMHostPoolJoin
    environment: ${{ parameters.environment }}
    condition: |
      and(
        not(canceled()),
        in(dependencies.Deploy_VMHostPoolJoin.result, 'Failed', 'SucceededWithIssues')
      )
    timeoutInMinutes: 120
    pool:
      ${{ if ne(parameters.vmImage, '') }}:
        vmImage: '${{ parameters.vmImage }}'
      ${{ if ne(parameters.poolName, '') }}:
        name: '${{ parameters.poolName }}'
    strategy:
      runOnce:
        deploy:
          steps:
            - template: template.dpl.yml
              parameters:
                serviceConnection: '${{ parameters.serviceConnection }}'
                jsonParameterToEnable: enableHostPoolJoin
                stepNameSuffix: '[VM with hostpool extensions]'
                purgeFailedResources: true
                continueOnError: true
                waitForDeployments: true

  ## Virtual Machine Hostpool Join Extension Deployment
  - deployment: Deploy_VMHostPoolJoinRetry02
    displayName: Deploy Virtual Machine Host Pool Extension Retry 02
    dependsOn:
      - Deploy_VMHostPoolJoinRetry01
    environment: ${{ parameters.environment }}
    condition: |
      and(
        not(canceled()),
        in(dependencies.Deploy_VMHostPoolJoinRetry01.result, 'Failed', 'SucceededWithIssues')
      )
    timeoutInMinutes: 120
    pool:
      ${{ if ne(parameters.vmImage, '') }}:
        vmImage: '${{ parameters.vmImage }}'
      ${{ if ne(parameters.poolName, '') }}:
        name: '${{ parameters.poolName }}'
    strategy:
      runOnce:
        deploy:
          steps:
            - template: template.dpl.yml
              parameters:
                serviceConnection: '${{ parameters.serviceConnection }}'
                jsonParameterToEnable: enableHostPoolJoin
                stepNameSuffix: '[VM with hostpool extensions]'
                purgeFailedResources: true
                waitForDeployments: true

  ## Post VM Resource Deployment
  - deployment: Deploy_AppsAndScaling
    displayName: Deploy WVD Applications and Scaling
    dependsOn:
      - Deploy_VMHostPoolJoin
      - Deploy_VMHostPoolJoinRetry01
      - Deploy_VMHostPoolJoinRetry02
    environment: ${{ parameters.environment }}
    condition: |
      and(
        not(canceled()),
        eq(${{ parameters.enableDeploymentMasterARMTemplate }}, true),
        or (
          in(dependencies.Deploy_VMHostPoolJoin.result, '', 'Succeeded'),
          in(dependencies.Deploy_VMHostPoolJoinRetry01.result, '', 'Succeeded'),
          in(dependencies.Deploy_VMHostPoolJoinRetry02.result, '', 'Succeeded')
        )
      )
    timeoutInMinutes: 120
    pool:
      ${{ if ne(parameters.vmImage, '') }}:
        vmImage: '${{ parameters.vmImage }}'
      ${{ if ne(parameters.poolName, '') }}:
        name: '${{ parameters.poolName }}'
    strategy:
      runOnce:
        deploy:
          steps:
            - template: template.dpl.yml
              parameters:
                serviceConnection: '${{ parameters.serviceConnection }}'
                jsonParameterToEnable: enablePostVmResources
                stepNameSuffix: '[Post VM]'

  ## Image Lifecycle Update Deployment
  - deployment: Deploy_ImageLifecycleUpdate
    displayName: Invoke Session Host Image Lifecycle
    dependsOn:
      - ${{ if eq(parameters.enableDeploymentMasterARMTemplate, true) }}:
          - Deploy_AppsAndScaling
    environment: ${{ parameters.environment }}
    condition: |
      and(
        not(canceled()),
        eq(${{ parameters.enableJobSessionHostImageLifecycle }}, true),
        or (
          and(  eq(${{ parameters.enableDeploymentMasterARMTemplate }}, true),
            in(dependencies.Deploy_AppsAndScaling.result, '', 'Succeeded')
          ),
          and(  eq(${{ parameters.enableDeploymentMasterARMTemplate }}, false),
            in(dependencies.Deploy_AppsAndScaling.result, '', 'Skipped')
          )
        )
      )
    timeoutInMinutes: 180
    pool:
      ${{ if ne(parameters.vmImage, '') }}:
        vmImage: '${{ parameters.vmImage }}'
      ${{ if ne(parameters.poolName, '') }}:
        name: '${{ parameters.poolName }}'
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - powershell: |
                $reqModules = @('Az.DesktopVirtualization', 'OMSIngestionAPI', 'Az.StorageTable')
                foreach($reqModule in $reqModules) {
                  if(-not ($installed = Get-Module $reqModule -ListAvailable)) {
                      Write-Verbose "Installing module [$reqModule]" -Verbose
                      Install-Module $reqModule -Repository PSGallery -Force -Scope CurrentUser
                  } else {
                      Write-Verbose ("Module $reqModule already installed with version [{0}]" -f $installed.Version) -Verbose
                  }
                }
              displayName: 'Install required module'
            - task: AzurePowerShell@4
              displayName: 'Run image lifecycle update via [$(serviceConnection)]'
              name: ImageLifecycleUpdate
              inputs:
                azureSubscription: '${{ parameters.serviceConnection }}'
                ScriptType: InlineScript
                inline: |
                  Write-Verbose "Load function" -Verbose
                  . '$(Build.Repository.LocalPath)/$(orchestrationFunctionsPath)/GeneralDeployment/Invoke-UpdateHostPool.ps1'

                  $functionInput = @{
                    orchestrationFunctionsPath = Join-Path '$(Build.Repository.LocalPath)' '$(orchestrationFunctionsPath)'
                    HostPoolName               = '$(HostPoolName)'
                    HostPoolRGName             = '$(ResourceGroupName)'
                    LogoffDeadline             = '$(LogoffDeadline)'
                    LogOffMessageTitle         = '$(LogOffMessageTitle)'
                    LogOffMessageBody          = '$(LogOffMessageBody)'
                    UtcOffset                  = '$(UtcOffset)'
                    customImageReferenceId     = '$(customImageReferenceId)'
                    MarketplaceImageVersion    = '$(version)'
                    MarketplaceImagePublisher  = '$(publisher)'
                    MarketplaceImageOffer      = '$(offer)'
                    MarketplaceImageSku        = '$(sku)'
                    MarketplaceImageLocation   = '$(imagelocation)'
                    DeleteVMDeadline           = '$(DeleteVMDeadline)'
                    stateStorageAccountName    = '$(stateStorageAccountName)'
                    stateTableName             = '$(stateTableName)'
                    LAWorkspaceName            = '$(LAWorkspaceName)'
                  }

                  Write-Verbose "Invoke task with" -Verbose
                  $functionInput.Keys | ForEach-Object { Write-Verbose ("PARAMETER: `t'{0}' with value '{1}'" -f $_, $functionInput[$_]) -Verbose }

                  Invoke-UpdateHostPool @functionInput -Verbose
                errorActionPreference: stop
                azurePowerShellVersion: LatestVersion
              enabled: true
