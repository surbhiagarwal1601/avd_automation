{
    "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        // Resource Group
        "rgParameters": {
            "type": "object",
            "defaultValue": {}
        },
        // ANF
        "anfParameters": {
            "type": "object",
            "defaultValue": {}
        },
        // Shared
        "location": {
            "type": "string",
            "defaultValue": "[deployment().location]",
            "metadata": {
                "description": "Optional. Location of the deployment."
            }
        },
        "componentStorageAccountId": {
            "type": "string",
            "defaultValue": "<ReplaceWith-ComponentStorageAccountId>",
            "metadata": {
                "description": "Optional. Resource ID of the storage account that stores all the components."
            }
        },
        "componentsStorageContainerName": {
            "type": "string",
            "defaultValue": "<ReplaceWith-ComponentsStorageAccountContainer",
            "metadata": {
                "description": "Optional. Name of the storage container the module components will be stored in."
            }
        },
        "componentsStorageContainerIsPrivate": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Optional. Validity in hours for the SAS token (in case the components storage account is private). If it's set to false, no SAS token will be generated."
            }
        },
        "sasTokenValidityLength": {
            "defaultValue": "PT8H",
            "type": "string",
            "metadata": {
                "description": "Optional. SAS token validity length. Usage: 'PT8H' - valid for 8 hours; 'P5D' - valid for 5 days; 'P1Y' - valid for 1 year. When not provided, the SAS token will be valid for 8 hours."
            }
        },
        "baseTime": {
            "type": "string",
            "defaultValue": "[utcNow('u')]",
            "metadata": {
                "description": "Generated. Do not provide a value! This date value is used to generate a SAS token to access the modules."
            }
        },
        "lockForDeletion": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Optional. Whether or not to put deletion lock on all resources/resource group defined in this template."
            }
        },
        "tags": {
            "type": "object",
            "defaultValue": {
            },
            "metadata": {
                "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
            }
        }
    },
    "variables": {
        // Location of components
        "componentsBaseUrl": "[concat('https://', split(parameters('componentStorageAccountId'), '/')[8], '.blob.core.windows.net/', parameters('componentsStorageContainerName'))]",
        "modulesPath": "[concat(variables('componentsBaseUrl'), '/Modules/ARM/')]",

        // SAS token validity calculation - DO NOT CHANGE THESE VALUES !
        "accountSasProperties": {
            "signedServices": "b", //Blob (b), Queue (q), Table (t), File (f).
            "signedPermission": "r", //Read (r), Write (w), Delete (d), List (l), Add (a), Create (c), Update (u) and Process (p)
            "signedExpiry": "[dateTimeAdd(parameters('baseTime'), parameters('sasTokenValidityLength'))]", //format: 2017-05-24T10:42:03Z
            "signedResourceTypes": "o", //Service (s): Access to service-level APIs; Container (c): Access to container-level APIs; Object (o): Access to object-level APIs for blobs, queue messages, table entities, and files.
            "signedProtocol": "https"
        },

        // Format basetime. Removes columns, dashes and spaces
        "formattedTime": "[replace(replace(replace(parameters('baseTime'), ':', ''), '-', ''), ' ', '')]"

    },
    "resources": [
        // Resource Group
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[concat(deployment().name, '-', parameters('rgParameters').moduleName)]",
            "location": "[parameters('location')]",
            "condition": "[parameters('rgParameters').enabled]",
            "dependsOn": [
            ],
            "properties": {
                "mode": "Incremental",
                "debugSetting": {
                    "detailLevel": "requestContent,responseContent"
                },
                "templateLink": {
                    "uri": "[concat(variables('modulesPath'), parameters('rgParameters').moduleName, '/', parameters('rgParameters').moduleVersion, '/deploy.json', if(parameters('componentsStorageContainerIsPrivate'), concat('?', listAccountSas(parameters('componentStorageAccountId'), '2019-04-01', variables('accountSasProperties')).accountSasToken), ''))]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "resourceGroupName": {
                        "value": "[parameters('rgParameters').resourceGroupName]"
                    },
                    "lockForDeletion": {
                        "value": "[if(contains(parameters('rgParameters'), 'lockForDeletion'), parameters('rgParameters').lockForDeletion, parameters('lockForDeletion'))]"
                    },
                    "tags": {
                        "value": "[if(contains(parameters('rgParameters'), 'tags'), union(parameters('tags'), parameters('rgParameters').tags), parameters('tags'))]"
                    }
                }
            }
        },
        // ANF
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[concat(parameters('anfParameters').moduleName, '-', variables('formattedTime'))]",
            "condition": "[parameters('anfParameters').enabled]",
            "resourceGroup": "[parameters('rgParameters').resourceGroupName]",
            "dependsOn": [
                "[concat(deployment().name, '-', parameters('rgParameters').moduleName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "debugSetting": {
                    "detailLevel": "requestContent,responseContent"
                },
                "templateLink": {
                    "uri": "[concat(variables('modulesPath'), parameters('anfParameters').moduleName, '/', parameters('anfParameters').moduleVersion, '/deploy.json', if(parameters('componentsStorageContainerIsPrivate'), concat('?', listAccountSas(parameters('componentStorageAccountId'), '2019-04-01', variables('accountSasProperties')).accountSasToken), ''))]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "netAppAccountName": {
                        "value": "[parameters('anfParameters').netAppAccountName]"
                    },
                    "domainName": {
                        "value": "[parameters('anfParameters').domainName]"
                    },
                    "domainJoinUser": {
                        "value": "[parameters('anfParameters').domainJoinUser]"
                    },
                    "domainJoinPassword": {
                        "reference": "[parameters('anfParameters').domainJoinPassword]"
                    },
                    "dnsServers": {
                        "value": "[parameters('anfParameters').dnsServers]"
                    },
                    "smbServerNamePrefix": {
                        "value": "[parameters('anfParameters').smbServerNamePrefix]"
                    },
                    "domainJoinOU": {
                        "value": "[parameters('anfParameters').domainJoinOU]"
                    },
                    "capacityPools": {
                        "value": "[parameters('anfParameters').capacityPools]"
                    },
                    "lockForDeletion": {
                        "value": "[if(contains(parameters('anfParameters'), 'lockForDeletion'), parameters('anfParameters').lockForDeletion, parameters('lockForDeletion'))]"
                    },
                    "tags": {
                        "value": "[if(contains(parameters('anfParameters'), 'tags'), union(parameters('tags'), parameters('anfParameters').tags), parameters('tags'))]"
                    }
                }
            }
        }
    ],
    "outputs": {
        "sasExpiryDateTime": {
            "type": "string",
            "value": "[if(parameters('componentsStorageContainerIsPrivate'),variables('accountSasProperties').signedExpiry,'')]"
        }
    }
}
