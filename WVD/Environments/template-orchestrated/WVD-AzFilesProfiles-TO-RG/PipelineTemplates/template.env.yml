parameters:
  # Pipeline-related parameters
  environment:
  serviceConnection:
  poolName:
  vmImage:

  # Control-related parameters
  enableJobUpdateAssetsStorageAccount:
  enableDeploymentMasterARMTemplate:
  enableJobDeployFileSharesBackup:

jobs:
  ## Update Assets Storage Account
  - deployment: Update_AssetsStorageAccount
    displayName: Update Assets Storage Account
    environment: ${{ parameters.environment }}
    condition: |
      and (
        not(canceled()),
        eq(variables.identityApproach, 'AD'),
        eq(${{ parameters.enableJobUpdateAssetsStorageAccount }}, true)
      )
    timeoutInMinutes: 120
    pool:
      ${{ if ne(parameters.vmImage, '') }}:
        vmImage: '${{ parameters.vmImage }}'
      ${{ if ne(parameters.poolName, '') }}:
        name: '${{ parameters.poolName }}'
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - task: AzurePowerShell@4
              displayName: 'Upload latest configuration files to assets storage account'
              name: PostDeploy_StorageAccounts_Task
              inputs:
                azureSubscription: '${{ parameters.serviceConnection }}'
                ScriptType: InlineScript
                inline: |
                  Write-Verbose "Load function" -Verbose
                  . '$(Build.SourcesDirectory)/$(orchestrationFunctionsPath)/Storage/Update-AssetsStorageAccount.ps1'

                  $functionInput = @{
                    orchestrationFunctionsPath = Join-Path '$(Build.SourcesDirectory)' '$(orchestrationFunctionsPath)'
                    wvdUploadsPath             = Join-Path '$(Build.SourcesDirectory)' '$(wvdUploadsPath)'
                    resourceGroupPath          = Join-Path '$(Build.SourcesDirectory)' '$(rgFolderPath)'
                    storageContainerMapPath    = Join-Path '$(Build.SourcesDirectory)' '$(rgFolderPath)/$(storageContainerMapPath)'
                  }

                  Write-Verbose "Invoke task with" -Verbose
                  $functionInput.Keys | ForEach-Object { Write-Verbose ("PARAMETER: `t'{0}' with value '{1}'" -f $_, $functionInput[$_]) -Verbose }

                  Update-AssetsStorageAccount @functionInput -Verbose
                errorActionPreference: stop
                azurePowerShellVersion: LatestVersion
              enabled: true
  ## Deploy Azure Files Profile Resources
  - deployment: Deploy_Profiles
    displayName: Deploy Azure Files Profile Resources
    environment: ${{ parameters.environment }}
    condition: |
      and (
            not(canceled()),
            eq(${{ parameters.enableDeploymentMasterARMTemplate }}, true)
      )
    timeoutInMinutes: 120
    pool:
      ${{ if ne(parameters.vmImage, '') }}:
        vmImage: '${{ parameters.vmImage }}'
      ${{ if ne(parameters.poolName, '') }}:
        name: '${{ parameters.poolName }}'
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - task: AzurePowerShell@4
              displayName: 'Validate'
              inputs:
                azureSubscription: '${{ parameters.serviceConnection }}'
                ScriptType: InlineScript
                azurePowerShellVersion: LatestVersion
                errorActionPreference: stop
                inline: |
                  $templateFilePath = "$(Build.Repository.LocalPath)/$(rgFolderPath)/deploy.json"
                  $DeploymentInputs = @{
                    TemplateFile          = $templateFilePath
                    TemplateParameterFile = "$(Build.Repository.LocalPath)/$(rgFolderPath)/Parameters/parameters.json"
                    EnableVmResources     = $true
                    Verbose               = $true
                    OutVariable           = "ValidationErrors"
                    Location              = '$(location)'
                  }

                  Write-Verbose 'Handling subscription level deployment' -Verbose
                  $ValidationErrors = $null
                  Test-AzSubscriptionDeployment @DeploymentInputs

                  if ($ValidationErrors) {
                    Write-Error "Template is not valid."
                  }
            - task: AzurePowerShell@4
              displayName: 'Deploy'
              inputs:
                azureSubscription: '${{ parameters.serviceConnection }}'
                azurePowerShellVersion: LatestVersion
                ScriptType: InlineScript
                errorActionPreference: stop
                inline: |
                  $templateFilePath = "$(Build.Repository.LocalPath)/$(rgFolderPath)/deploy.json"
                  $DeploymentInputs = @{
                    Name                  = "$(resourcegroupname)-$(Get-Date -Format yyyyMMddHHMMss)"
                    TemplateFile          = $templateFilePath
                    TemplateParameterFile = "$(Build.Repository.LocalPath)/$(rgFolderPath)/Parameters/parameters.json"
                    EnableVmResources     = $true
                    Verbose               = $true
                    ErrorAction           = "Stop"
                    Location              = '$(location)'
                  }
                  New-AzSubscriptionDeployment @DeploymentInputs
  ## Deploy Azure File Shares Backup
  - deployment: Deploy_FileSharesBackup
    displayName: Deploy Azure File Shares Backup
    dependsOn:
      - ${{ if eq(parameters.enableDeploymentMasterARMTemplate, true) }}:
          - Deploy_Profiles
    environment: ${{ parameters.environment }}
    condition: |
      and (
        not(canceled()),
        eq('${{ parameters.enableJobDeployFileSharesBackup }}', true),
        in(dependencies.Deploy_Profiles.result, '', 'Succeeded', 'Skipped')
      )
    timeoutInMinutes: 120
    pool:
      ${{ if ne(parameters.vmImage, '') }}:
          vmImage: '${{ parameters.vmImage }}'
      ${{ if ne(parameters.poolName, '') }}:
          name: '${{ parameters.poolName }}'
    strategy:
        runOnce:
          deploy:
            steps:
              - checkout: self
              - task: AzurePowerShell@4
                displayName: "Deploy Azure File Shares Backup Task"
                name: Deploy_FileSharesBackup_Task
                inputs:
                  azureSubscription: '${{ parameters.serviceConnection }}'
                  ScriptType: InlineScript
                  inline: |
                    Write-Verbose "Load function" -Verbose
                    . '$(Build.Repository.LocalPath)/$(orchestrationFunctionsPath)/GeneralDeployment/Invoke-RsvPostDeployment.ps1'
                    $filesharePolicyMapPath = Join-Path '$(Build.Repository.LocalPath)' '$(rgFolderPath)/Parameters/rsv.backupmap.json'

                    if(-not (Test-Path $filesharePolicyMapPath)) {
                      throw "Unable to locate file share backup configuration in path [$filesharePolicyMapPath]"
                    }
                    $fileSharePolicyMaps = Get-Content -Path $filesharePolicyMapPath -Raw | ConvertFrom-Json -AsHashtable

                    $functionInput = @{
                      orchestrationFunctionsPath         = Join-Path '$(Build.Repository.LocalPath)' '$(orchestrationFunctionsPath)'
                      recoveryServicesVaultName          = "$(profilesBackupVault)"
                      RecoveryServicesVaultResourceGroup = "$(profilesBackupVaultRG)"
                      fileSharePolicyMaps                = $fileSharePolicyMaps.fileSharePolicyMaps
                    }

                    Write-Verbose "Invoke task with" -Verbose
                    $functionInput.Keys | ForEach-Object { Write-Verbose ("PARAMETER: `t'{0}' with value '{1}'" -f $_, $functionInput[$_]) -Verbose }

                    Invoke-RSVPostDeployment @functionInput -Verbose
                  errorActionPreference: stop
                  azurePowerShellVersion: LatestVersion
                enabled: true
  ## Add Key Vault Access Policies
  - deployment: Add_KVAccessPolicies
    displayName: Add Key Vault Access Policies
    dependsOn:
      - ${{ if eq(parameters.enableDeploymentMasterARMTemplate, true) }}:
          - Deploy_Profiles
    environment: ${{ parameters.environment }}
    condition: |
      and (
            not(canceled()),
            eq(variables.identityApproach, 'AD'),
            in(dependencies.Deploy_Profiles.result, '', 'Succeeded', 'Skipped')
        )
    timeoutInMinutes: 120
    pool:
      ${{ if ne(parameters.vmImage, '') }}:
        vmImage: '${{ parameters.vmImage }}'
      ${{ if ne(parameters.poolName, '') }}:
        name: '${{ parameters.poolName }}'
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - task: AzurePowerShell@4
              displayName: 'Add Helper Server to Key Vault Access Policies'
              inputs:
                azureSubscription: '${{ parameters.serviceConnection }}'
                ScriptType: InlineScript
                azurePowerShellVersion: LatestVersion
                errorActionPreference: stop
                inline: |
                  Write-Verbose "Load function" -Verbose
                  . '$(Build.SourcesDirectory)/$(orchestrationFunctionsPath)/KeyVault/Update-KeyVaultAccessPolicy.ps1'

                  Write-Verbose "keyVaultName $(keyVaultName)" -Verbose
                  Write-Verbose "helperServerName $(helperServerName)" -Verbose

                  $objectId=(Get-AzADServicePrincipal -DisplayName $(helperServerName)).Id

                  Update-KeyVaultAccessPolicy -VaultName $(keyVaultName) -ObjectId $objectId
  ## Enable AD authentication on Azure Files
  - deployment: Deploy_ADAuthentication
    displayName: Deploy AD authentication on Azure Files
    dependsOn:
      - ${{ if eq(parameters.enableJobUpdateAssetsStorageAccount, true) }}:
          - Update_AssetsStorageAccount
      - ${{ if eq(parameters.enableDeploymentMasterARMTemplate, true) }}:
          - Add_KVAccessPolicies
    environment: ${{ parameters.environment }}
    condition: |
      and (
            not(canceled()),
            eq(variables.identityApproach, 'AD'),
            in(dependencies.Add_KVAccessPolicies.result, '', 'Succeeded'),
            in(dependencies.Update_AssetsStorageAccount.result, '', 'Succeeded', 'Skipped')
        )
    timeoutInMinutes: 120
    pool:
      ${{ if ne(parameters.vmImage, '') }}:
        vmImage: '${{ parameters.vmImage }}'
      ${{ if ne(parameters.poolName, '') }}:
        name: '${{ parameters.poolName }}'
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - task: AzurePowerShell@4
              displayName: 'Validate'
              inputs:
                azureSubscription: '${{ parameters.serviceConnection }}'
                ScriptType: InlineScript
                azurePowerShellVersion: LatestVersion
                errorActionPreference: stop
                inline: |
                  $templateFilePath = "$(Build.Repository.LocalPath)/$(rgFolderPath)/deploy.json"
                  $DeploymentInputs = @{
                    TemplateFile          = $templateFilePath
                    TemplateParameterFile = "$(Build.Repository.LocalPath)/$(rgFolderPath)/Parameters/parameters.json"
                    EnableVmExtensions     = $true
                    Verbose               = $true
                    OutVariable           = "ValidationErrors"
                    Location              = '$(location)'
                  }

                  Write-Verbose 'Handling subscription level deployment' -Verbose
                  $ValidationErrors = $null
                  Test-AzSubscriptionDeployment @DeploymentInputs

                  if ($ValidationErrors) {
                    Write-Error "Template is not valid."
                  }
            - task: AzurePowerShell@4
              displayName: 'Deploy'
              inputs:
                azureSubscription: '${{ parameters.serviceConnection }}'
                azurePowerShellVersion: LatestVersion
                ScriptType: InlineScript
                errorActionPreference: stop
                inline: |
                  $templateFilePath = "$(Build.Repository.LocalPath)/$(rgFolderPath)/deploy.json"
                  $DeploymentInputs = @{
                    Name                  = "$(resourcegroupname)-$(Get-Date -Format yyyyMMddHHMMss)"
                    TemplateFile          = $templateFilePath
                    TemplateParameterFile = "$(Build.Repository.LocalPath)/$(rgFolderPath)/Parameters/parameters.json"
                    EnableVmExtensions     = $true
                    Verbose               = $true
                    ErrorAction           = "Stop"
                    Location              = '$(location)'
                  }
                  New-AzSubscriptionDeployment @DeploymentInputs
  ## Remove Key Vault Access Policies
  - deployment: Remove_KVAccessPolicies
    displayName: Remove Key Vault Access Policies
    dependsOn:
      - ${{ if eq(parameters.enableDeploymentMasterARMTemplate, true) }}:
          - Deploy_ADAuthentication
    environment: ${{ parameters.environment }}
    condition: |
      and (
        not(canceled()),
        eq(variables.identityApproach, 'AD'),
        in(dependencies.Deploy_ADAuthentication.result, '', 'Succeeded')
      )
    timeoutInMinutes: 120
    pool:
      ${{ if ne(parameters.vmImage, '') }}:
        vmImage: '${{ parameters.vmImage }}'
      ${{ if ne(parameters.poolName, '') }}:
        name: '${{ parameters.poolName }}'
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - task: AzurePowerShell@4
              displayName: 'Remove Helper Server from Key Vault Access Policies'
              inputs:
                azureSubscription: '${{ parameters.serviceConnection }}'
                ScriptType: InlineScript
                azurePowerShellVersion: LatestVersion
                errorActionPreference: stop
                inline: |
                  Write-Verbose "Load function" -Verbose
                  . '$(Build.SourcesDirectory)/$(orchestrationFunctionsPath)/KeyVault/Update-KeyVaultAccessPolicy.ps1'

                  Write-Verbose "keyVaultName $(keyVaultName)" -Verbose
                  Write-Verbose "helperServerName $(helperServerName)" -Verbose

                  $objectId=(Get-AzADServicePrincipal -DisplayName $(helperServerName)).Id

                  Update-KeyVaultAccessPolicy -VaultName $(keyVaultName) -ObjectId $objectId -remove