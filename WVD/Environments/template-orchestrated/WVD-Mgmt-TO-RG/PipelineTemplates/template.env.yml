parameters:
  # Pipeline-related parameters
  environment:
  serviceConnection:
  poolName:
  vmImage:

  # Control-related parameters
  enableDeploymentMasterARMTemplate:
  enablePostDeploymentWVDKeyVault:
  enablePostDeploymentAutomationAccount:

jobs:
## Deploy Management resource Group Resources
- deployment: Deploy_Mgmt
  displayName: Deploy Management Resources
  dependsOn: ''
  environment: ${{ parameters.environment }}
  condition: |
    and (
        not(canceled()),
        eq('${{ parameters.enableDeploymentMasterARMTemplate }}', true)
    )
  timeoutInMinutes: 120
  pool:
    ${{ if ne(parameters.vmImage, '') }}:
        vmImage: '${{ parameters.vmImage }}'
    ${{ if ne(parameters.poolName, '') }}:
        name: '${{ parameters.poolName }}'
  strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - task: AzurePowerShell@4
              displayName: 'Validate'
              inputs:
                azureSubscription: '${{ parameters.serviceConnection }}'
                ScriptType: InlineScript
                azurePowerShellVersion: LatestVersion
                errorActionPreference: stop
                inline: |
                  $templateFilePath = "$(Build.Repository.LocalPath)/$(rgFolderPath)/deploy.json"
                  $DeploymentInputs = @{
                    TemplateFile          = $templateFilePath
                    TemplateParameterFile = "$(Build.Repository.LocalPath)/$(rgFolderPath)/Parameters/parameters.json"
                    soCWvdPrincipalIds    = (Get-AzADServicePrincipal -DisplayName 'Windows Virtual Desktop').Id
                    Verbose               = $true
                    OutVariable           = "ValidationErrors"
                    Location              = '$(location)'
                  }

                  Write-Verbose 'Handling subscription level deployment' -Verbose
                  $ValidationErrors = $null
                  Test-AzSubscriptionDeployment @DeploymentInputs

                  if ($ValidationErrors) {
                    Write-Error "Template is not valid."
                  }
            - task: AzurePowerShell@4
              displayName: 'Deploy'
              inputs:
                azureSubscription: '${{ parameters.serviceConnection }}'
                azurePowerShellVersion: LatestVersion
                ScriptType: InlineScript
                errorActionPreference: stop
                inline: |
                  $templateFilePath = "$(Build.Repository.LocalPath)/$(rgFolderPath)/deploy.json"
                  $DeploymentInputs = @{
                    Name                  = "$(resourcegroupname)-$(Get-Date -Format yyyyMMddHHMMss)"
                    TemplateFile          = $templateFilePath
                    TemplateParameterFile = "$(Build.Repository.LocalPath)/$(rgFolderPath)/Parameters/parameters.json"
                    soCWvdPrincipalIds    = (Get-AzADServicePrincipal -DisplayName 'Windows Virtual Desktop').Id
                    Verbose               = $true
                    ErrorAction           = "Stop"
                    Location              = '$(location)'
                  }
                  New-AzSubscriptionDeployment @DeploymentInputs

## Invoke Key Vault Post Deployment
- deployment: Invoke_WVDKeyVaultPostDeployment
  displayName: Invoke Key Vault Post Deployment
  dependsOn:
  - ${{ if eq(parameters.enableDeploymentMasterARMTemplate, true) }}:
    - Deploy_Mgmt
  environment: ${{ parameters.environment }}
  condition: |
    and (
      not(canceled()),
      eq('${{ parameters.enablePostDeploymentWVDKeyVault }}', true),
      in(dependencies.Deploy_Mgmt.result, '', 'Succeeded', 'Skipped')
    )
  timeoutInMinutes: 120
  pool:
    ${{ if ne(parameters.vmImage, '') }}:
        vmImage: '${{ parameters.vmImage }}'
    ${{ if ne(parameters.poolName, '') }}:
        name: '${{ parameters.poolName }}'
  strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - task: AzurePowerShell@4
              displayName: "Trigger module KeyVault post-deployment"
              name: PostDeploy_KeyVault_Task
              inputs:
                azureSubscription: '${{ parameters.serviceConnection }}'
                ScriptType: InlineScript
                inline: |
                  Write-Verbose "Load function" -Verbose
                  . '$(Build.Repository.LocalPath)/$(orchestrationFunctionsPath)/GeneralDeployment/Invoke-KeyVaultPostDeployment.ps1'

                  $functionInput = @{
                    orchestrationFunctionsPath   = Join-Path '$(Build.Repository.LocalPath)' '$(orchestrationFunctionsPath)'
                    VaultName                    = '$(keyVaultName)'
                    domainJoin_userName          = '$(domainJoinUserName)'
                    domainJoin_pwd               = ConvertTo-SecureString '$(WVDJoinDomainUserPwd)' -AsPlainText -Force
                  }

                  if(-not ([string]::IsNullOrEmpty('$(localAdminPassword)'))) {
                    $functionInput += @{
                      localAdminPassword         = ConvertTo-SecureString "$(localAdminPassword)" -AsPlainText -Force
                    }
                  }

                  # Only required to enable Native AD identity-based access for file shares
                  if(-not ([string]::IsNullOrEmpty('$(storageJoinUserName)'))) {
                    $functionInput += @{
                      storageJoin_userName       = '$(storageJoinUserName)'
                      storageJoin_pwd            = ConvertTo-SecureString "$(StorageJoinUserPwd)" -AsPlainText -Force
                    }
                  }

                  Write-Verbose "Invoke task with" -Verbose
                  $functionInput.Keys | ForEach-Object { Write-Verbose ("PARAMETER: `t'{0}' with value '{1}'" -f $_, $functionInput[$_]) -Verbose }

                  Invoke-KeyVaultPostDeployment @functionInput -Verbose
                errorActionPreference: stop
                azurePowerShellVersion: LatestVersion
              enabled: true

## Invoke Automation Account Post Deployment
- deployment: Invoke_AutomationAccountPostDeployment
  displayName: Invoke Automation Account Post Deployment
  dependsOn:
  - ${{ if eq(parameters.enableDeploymentMasterARMTemplate, true) }}:
    - Deploy_Mgmt
  environment: ${{ parameters.environment }}
  condition: |
    and (
      not(canceled()),
      eq('${{ parameters.enablePostDeploymentAutomationAccount }}', true),
      in(dependencies.Deploy_Mgmt.result, '', 'Succeeded', 'Skipped')
    )
  timeoutInMinutes: 120
  pool:
    vmImage: 'windows-latest'
  strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - task: AzurePowerShell@4
              displayName: "Trigger module AutomationAccount post-deployment"
              name: PostDeploy_AutomationAccounts_Task
              inputs:
                azureSubscription: '${{ parameters.serviceConnection }}'
                ScriptType: InlineScript
                inline: |
                  Write-Verbose "Load function" -Verbose
                  . '$(Build.Repository.LocalPath)/$(orchestrationFunctionsPath)/GeneralDeployment/Invoke-AutomationAccountPostDeployment.ps1'

                  $functionInput = @{
                    orchestrationFunctionsPath         = Join-Path '$(Build.Repository.LocalPath)' '$(orchestrationFunctionsPath)'
                    AutomationAccountName              = '$(AutomationAccountName)'
                    AutomationAccountRGName            = '$(resourcegroupname)'
                    ScalingRunbookName                 = '$(ScalingRunbookName)'
                    WebhookName                        = '$(ScalingWebhookName)'
                    RunAsConnectionSPName              = '$(RunAsConnectionSPName)'
                    KeyVaultName                       = '$(keyVaultName)'
                    RunAsSelfSignedCertSecretName      = '$(RunAsSelfSignedCertSecretName)'
                    AutoAccountRunAsCertExpiryInMonths = '$(AutoAccountRunAsCertExpiryInMonths)'
                    tempPath                           = '$(Agent.TempDirectory)'
                    LAWorkspaceName                    = '$(LAWorkspaceName)'
                  }

                  Write-Verbose "Invoke task with" -Verbose
                  $functionInput.Keys | ForEach-Object { Write-Verbose ("PARAMETER: `t'{0}' with value '{1}'" -f $_, $functionInput[$_]) -Verbose }

                  Invoke-AutomationAccountPostDeployment @functionInput -Verbose
                errorActionPreference: stop
                azurePowerShellVersion: LatestVersion
                pwsh: true
              enabled: true