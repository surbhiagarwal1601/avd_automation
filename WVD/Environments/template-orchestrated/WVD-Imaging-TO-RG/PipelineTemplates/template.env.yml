parameters:
  # Pipeline-related parameters
  environment:
  serviceConnection:
  poolName:
  vmImage:

  # Control-related parameters
  enableJobUpdateAssetsStorageAccount:
  removeImageTemplateResourceGroups:
  enableDeploymentMasterARMTemplate:

jobs:
## Update Assets Storage Account
- deployment: Update_AssetsStorageAccount
  displayName: Update Assets Storage Account
  environment: ${{ parameters.environment }}
  condition: |
    and (
      not(canceled()),
      eq('${{ parameters.enableJobUpdateAssetsStorageAccount }}', true)
    )
  timeoutInMinutes: 120
  pool:
    ${{ if ne(parameters.vmImage, '') }}:
        vmImage: '${{ parameters.vmImage }}'
    ${{ if ne(parameters.poolName, '') }}:
        name: '${{ parameters.poolName }}'
  strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - task: AzurePowerShell@4
            displayName: "Upload latest configuration files to assets storage account"
            name: PostDeploy_StorageAccounts_Task
            inputs:
              azureSubscription: '${{ parameters.serviceConnection }}'
              ScriptType: InlineScript
              inline: |
                Write-Verbose "Load function" -Verbose
                . '$(Build.SourcesDirectory)/$(orchestrationFunctionsPath)/Storage/Update-AssetsStorageAccount.ps1'

                $functionInput = @{
                  orchestrationFunctionsPath = Join-Path '$(Build.SourcesDirectory)' '$(orchestrationFunctionsPath)'
                  wvdUploadsPath             = Join-Path '$(Build.SourcesDirectory)' '$(wvdUploadsPath)'
                  resourceGroupPath          = Join-Path '$(Build.SourcesDirectory)' '$(rgFolderPath)'
                  storageContainerMapPath    = Join-Path '$(Build.SourcesDirectory)' '$(rgFolderPath)/Parameters/Uploads/assets.config.json'
                }

                Write-Verbose "Invoke task with" -Verbose
                $functionInput.Keys | ForEach-Object { Write-Verbose ("PARAMETER: `t'{0}' with value '{1}'" -f $_, $functionInput[$_]) -Verbose }

                Update-AssetsStorageAccount @functionInput -Verbose
              errorActionPreference: stop
              azurePowerShellVersion: LatestVersion
            enabled: true

## Pre-Remove Image Template resource groups
- deployment: Remove_ImageTemplateResourceGroups
  displayName: Pre-Remove any image template resource group
  environment: ${{ parameters.environment }}
  condition: |
    and (
      not(canceled()),
      eq('${{ parameters.removeImageTemplateResourceGroups }}', true)
    )
  timeoutInMinutes: 120
  pool:
    ${{ if ne(parameters.vmImage, '') }}:
        vmImage: '${{ parameters.vmImage }}'
    ${{ if ne(parameters.poolName, '') }}:
        name: '${{ parameters.poolName }}'
  strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - task: AzurePowerShell@4
            displayName: 'Remove generated image template resource groups'
            name: Remove_ImageTemplates_Task
            inputs:
              azureSubscription: '${{ parameters.serviceConnection }}'
              ScriptType: InlineScript
              inline: |
                Write-Verbose "Load function" -Verbose
                . '$(Build.SourcesDirectory)/$(orchestrationFunctionsPath)/Imaging/Remove-ImageTemplate.ps1'

                $functionInput = @{
                  resourcegroupName = '$(resourcegroupname)'
                }

                Write-Verbose "Invoke task with" -Verbose
                $functionInput.Keys | ForEach-Object { Write-Verbose ("PARAMETER: `t'{0}' with value '{1}'" -f $_, $functionInput[$_]) -Verbose }

                Remove-ImageTemplate @functionInput -Verbose
              errorActionPreference: stop
              azurePowerShellVersion: LatestVersion
            enabled: true

## Deploy Imaging Resources
- deployment: Deploy_Imaging
  displayName: Deploy Imaging Resources
  dependsOn:
  - ${{ if eq(parameters.enableJobUpdateAssetsStorageAccount, true) }}:
    - Update_AssetsStorageAccount
  - ${{ if eq(parameters.removeImageTemplateResourceGroups, true) }}:
    - Remove_ImageTemplateResourceGroups
  environment: ${{ parameters.environment }}
  condition: |
    and (
        not(canceled()),
        eq('${{ parameters.enableDeploymentMasterARMTemplate }}', true),
        in(dependencies.Update_AssetsStorageAccount.result, '', 'Succeeded', 'Skipped'),
        in(dependencies.Remove_ImageTemplateResourceGroups.result, '', 'Succeeded', 'Skipped', 'Failed')
    )
  timeoutInMinutes: 120
  pool:
    ${{ if ne(parameters.vmImage, '') }}:
        vmImage: '${{ parameters.vmImage }}'
    ${{ if ne(parameters.poolName, '') }}:
        name: '${{ parameters.poolName }}'
  strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - task: AzurePowerShell@4
              displayName: 'Prepare environment'
              inputs:
                azureSubscription: '${{ parameters.serviceConnection }}'
                ScriptType: InlineScript
                azurePowerShellVersion: LatestVersion
                errorActionPreference: stop
                inline: |
                  $maximumRetries = 60
                  $waitTime = 10
                  $requiredResourceProviders = @(
                    'Microsoft.VirtualMachineImages'
                  )

                  foreach ($requiredResourceProvider in $requiredResourceProviders) {
                      $states = (Get-AzResourceProvider -ProviderNamespace $requiredResourceProvider).RegistrationState
                      if ($states -contains 'NotRegistered' -or $states -contains 'Unregistered') {
                        Write-Verbose "Resource provider '$requiredResourceProvider' not registered. Registering" -Verbose
                        Register-AzResourceProvider -ProviderNamespace $requiredResourceProvider
                      }
                      else {
                        Write-Verbose "Resource provider '$requiredResourceProvider' already registered" -Verbose
                      }
                  }

                  foreach ($requiredResourceProvider in $requiredResourceProviders) {
                      $currentTry = 0
                      do {
                        Write-Verbose "Resource provider '$requiredResourceProvider' still registering. Waiting $waitTime seconds [$currentTry|$maximumRetries]" -Verbose
                        Start-Sleep $waitTime
                        $currentTry++
                      } while ($currentTry -le $maximumRetries -and (Get-AzResourceProvider -ProviderNamespace $requiredResourceProvider).RegistrationState -contains 'Registering')
                  }
            - task: AzurePowerShell@4
              displayName: 'Validate'
              inputs:
                azureSubscription: '${{ parameters.serviceConnection }}'
                ScriptType: InlineScript
                azurePowerShellVersion: LatestVersion
                errorActionPreference: stop
                inline: |
                  $templateFilePath = "$(Build.Repository.LocalPath)/$(rgFolderPath)/deploy.json"
                  $DeploymentInputs = @{
                    TemplateFile          = $templateFilePath
                    TemplateParameterFile = "$(Build.Repository.LocalPath)/$(rgFolderPath)/Parameters/parameters.json"
                    Verbose               = $true
                    OutVariable           = "ValidationErrors"
                    Location              = '$(location)'
                  }

                  Write-Verbose 'Handling subscription level deployment' -Verbose
                  $ValidationErrors = $null
                  Test-AzSubscriptionDeployment @DeploymentInputs

                  if ($ValidationErrors) {
                    Write-Error "Template is not valid."
                  }
            - task: AzurePowerShell@4
              displayName: 'Deploy'
              inputs:
                azureSubscription: '${{ parameters.serviceConnection }}'
                azurePowerShellVersion: LatestVersion
                ScriptType: InlineScript
                errorActionPreference: stop
                inline: |
                  . '$(Build.SourcesDirectory)/$(orchestrationFunctionsPath)/GeneralDeployment/Set-SasKeysInFile.ps1'

                  $templateParameterFilePath = "$(Build.Repository.LocalPath)/$(rgFolderPath)/Parameters/parameters.json"
                  # Set SAS keys
                  Set-SasKeysInFile -filePath $templateParameterFilePath -Verbose

                  $templateFilePath = "$(Build.Repository.LocalPath)/$(rgFolderPath)/deploy.json"
                  $DeploymentInputs = @{
                    Name                  = "$(resourcegroupname)-$(Get-Date -Format yyyyMMddHHMMss)"
                    TemplateFile          = $templateFilePath
                    TemplateParameterFile = $templateParameterFilePath
                    Verbose               = $true
                    ErrorAction           = "Stop"
                    Location              = '$(location)'
                  }
                  New-AzSubscriptionDeployment @DeploymentInputs