parameters:
  # Pipeline-related parameters
  environment:
  serviceConnection:
  poolName:
  vmImage:

  # Control-related parameters
  enableJobDeployResourceGroup:
  enableJobDeployANF:

jobs:
## Resource Group
- deployment: Deploy_ANFProfilesResourceGroup
  displayName: Deploy Resource Group
  dependsOn: ''
  environment: ${{ parameters.environment }}
  condition: |
    and(
      not(canceled()),
      eq('${{ parameters.enableJobDeployResourceGroup }}', true)
    )
  timeoutInMinutes: 120
  pool:
    ${{ if ne(parameters.vmImage, '') }}:
        vmImage: '${{ parameters.vmImage }}'
    ${{ if ne(parameters.poolName, '') }}:
        name: '${{ parameters.poolName }}'
  strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - template: ../../.templates/pipeline.steps.artifact.yml
              parameters:
                moduleName: '$(resourceGroupModuleName)'
                moduleVersion: '$(resourceGroupModuleVersion)'
            - task: AzurePowerShell@4
              displayName: 'Deploy module [$(resourceGroupModuleName)] version [$(resourceGroupModuleVersion)] in [$(resourcegroupname)] via [$(serviceConnection)]'
              name: Deploy_ResourceGroup_Task_01
              inputs:
                azureSubscription: '${{ parameters.serviceConnection }}'
                ScriptType: InlineScript
                inline: |
                  Write-Verbose "Load function" -Verbose
                  . '$(Build.SourcesDirectory)/$(orchestrationFunctionsPath)/GeneralDeployment/Invoke-GeneralDeployment.ps1'

                  $parameterFilePath = Join-Path '$(Build.SourcesDirectory)' '$(rgFolderPath)/Parameters/resourcegroup.parameters.json'
                  $functionInput = @{
                    location          = '$(location)'
                    modulePackagePath = Join-Path '$(Build.SourcesDirectory)/$(packagePath)' '$(resourceGroupModuleName)'
                    parameterFilePath = $parameterFilePath
                  }

                  Write-Verbose "Invoke task with $functionInput" -Verbose
                  $functionInput.Keys | ForEach-Object { Write-Verbose ("PARAMETER: `t'{0}' with value '{1}'" -f $_, $functionInput[$_]) -Verbose }

                  Invoke-GeneralDeployment @functionInput -Verbose
                errorActionPreference: stop
                azurePowerShellVersion: LatestVersion
              enabled: true

## ANF
- deployment: Deploy_WVDProfilesAzureNetAppFiles
  displayName: Deploy Azure NetApp Files
  dependsOn:
  - ${{ if eq( parameters.enableJobDeployResourceGroup, true) }}:
    - Deploy_ANFProfilesResourceGroup
  environment: ${{ parameters.environment }}
  condition: |
    and (
      not(canceled()),
      eq('${{ parameters.enableJobDeployANF }}', true),
      in(dependencies.Deploy_ANFProfilesResourceGroup.result, '', 'Succeeded', 'Skipped')
    )
  timeoutInMinutes: 120
  pool:
    ${{ if ne(parameters.vmImage, '') }}:
        vmImage: '${{ parameters.vmImage }}'
    ${{ if ne(parameters.poolName, '') }}:
        name: '${{ parameters.poolName }}'
  strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - template: ../../.templates/pipeline.steps.artifact.yml
              parameters:
                moduleName: '$(anfModuleName)'
                moduleVersion: '$(anfModuleVersion)'
            - task: AzurePowerShell@4
              displayName: 'Deploy module [$(anfModuleName)] version [$(anfModuleVersion)] in [$(resourcegroupname)] via [$(serviceConnection)]'
              name: Deploy_ANF_Task
              inputs:
                azureSubscription: '${{ parameters.serviceConnection }}'
                ScriptType: InlineScript
                inline: |
                  Write-Verbose "Load function" -Verbose
                  . '$(Build.SourcesDirectory)/$(orchestrationFunctionsPath)/GeneralDeployment/Invoke-GeneralDeployment.ps1'

                  $parameterFilePath = Join-Path '$(Build.SourcesDirectory)' '$(rgFolderPath)/Parameters/azurenetappfiles.parameters.json'
                  $functionInput = @{
                    resourcegroupName = '$(resourcegroupname)'
                    modulePackagePath = Join-Path '$(Build.SourcesDirectory)/$(packagePath)' '$(anfModuleName)'
                    parameterFilePath = $parameterFilePath
                  }

                  Write-Verbose "Invoke task with $functionInput" -Verbose
                  $functionInput.Keys | ForEach-Object { Write-Verbose ("PARAMETER: `t'{0}' with value '{1}'" -f $_, $functionInput[$_]) -Verbose }

                  Invoke-GeneralDeployment @functionInput -Verbose
                errorActionPreference: stop
                azurePowerShellVersion: LatestVersion
              enabled: true
