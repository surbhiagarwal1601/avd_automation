parameters:
  # Pipeline-related parameters
  environment:
  serviceConnection:
  poolName:
  vmImage:

  # Control-related parameters
  enableJobDeployVMAdminRoleAssigment:
  enableJobDeployResourceGroup:
  enableJobDeployWVDKeyVault:
  enableJobDeployAssetsStorageAccount:
  enableJobDeployAutomationAccount:
  enableJobDeployRSV:

jobs:
## Start on connect role definition & assignment
- deployment: Deploy_StartOnConnectPreReq
  displayName: Deploy and assign custom role for start on connect
  dependsOn: ''
  environment: ${{ parameters.environment }}
  condition: |
    and(
      not(canceled()),
      eq('${{ parameters.enableJobDeployVMAdminRoleAssigment }}', true)
    )
  timeoutInMinutes: 120
  pool:
    ${{ if ne(parameters.vmImage, '') }}:
        vmImage: '${{ parameters.vmImage }}'
    ${{ if ne(parameters.poolName, '') }}:
        name: '${{ parameters.poolName }}'
  strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - template: ../../.templates/pipeline.steps.artifact.yml
              parameters:
                moduleName: '$(roleDefinitionModuleName)'
                moduleVersion: '$(roleDefinitionModuleVersion)'
            - task: AzurePowerShell@4
              displayName: 'Deploy module [$(roleDefinitionModuleName)] version [$(roleDefinitionModuleVersion)] via [$(serviceConnection)]'
              name: Deploy_RoleDefinition_Task_01
              inputs:
                azureSubscription: '${{ parameters.serviceConnection }}'
                ScriptType: InlineScript
                inline: |
                  Write-Verbose "Load function" -Verbose
                  . '$(Build.SourcesDirectory)/$(orchestrationFunctionsPath)/GeneralDeployment/Invoke-GeneralDeployment.ps1'

                  $parameterFilePath = Join-Path '$(Build.SourcesDirectory)' '$(rgFolderPath)/Parameters/startOnConnectRoleDefinition.parameters.json'
                  $functionInput = @{
                    location          = '$(location)'
                    modulePackagePath = Join-Path '$(Build.SourcesDirectory)/$(packagePath)' '$(roleDefinitionModuleName)'
                    parameterFilePath = $parameterFilePath
                  }

                  Write-Verbose "Invoke task with $functionInput" -Verbose
                  $functionInput.Keys | ForEach-Object { Write-Verbose ("PARAMETER: `t'{0}' with value '{1}'" -f $_, $functionInput[$_]) -Verbose }

                  Invoke-GeneralDeployment @functionInput -Verbose
                errorActionPreference: stop
                azurePowerShellVersion: LatestVersion
              enabled: true
            - template: ../../.templates/pipeline.steps.artifact.yml
              parameters:
                moduleName: '$(rbacModuleName)'
                moduleVersion: '$(rbacModuleVersion)'
            - task: AzurePowerShell@4
              displayName: 'Deploy module [$(rbacModuleName)] version [$(rbacModuleVersion)] via [$(serviceConnection)]'
              name: Deploy_RoleAssignment_Task_01
              inputs:
                azureSubscription: '${{ parameters.serviceConnection }}'
                ScriptType: InlineScript
                inline: |
                  Write-Verbose "Load function" -Verbose
                  . '$(Build.SourcesDirectory)/$(orchestrationFunctionsPath)/GeneralDeployment/Invoke-GeneralDeployment.ps1'
                  . '$(Build.SourcesDirectory)/$(orchestrationFunctionsPath)/GeneralDeployment/Add-CustomParameters.ps1'

                  $parameterFilePath = Join-Path '$(Build.SourcesDirectory)' '$(rgFolderPath)/Parameters/startOnConnectRoleAssignment.parameters.json'
                  $functionInput = @{
                    location          = '$(location)'
                    modulePackagePath = Join-Path '$(Build.SourcesDirectory)/$(packagePath)' '$(rbacModuleName)'
                    parameterFilePath = $parameterFilePath
                  }

                  # Update reference to correct role Id & principal(s)
                  # ref: https://docs.microsoft.com/en-us/azure/virtual-desktop/start-virtual-machine-connect#create-a-custom-role-for-start-vm-on-connect
                  $permissionInput = @{
                    parameterFilePath = $parameterFilePath
                    valueMap          = @(
                      @{
                        Path         = 'roleAssignments.value[0].roleDefinitionIdOrName'
                        Value        = $env:DEPLOY_ROLEDEFINITION_TASK_01_DEFINITIONID
                        replaceToken = '[AutopopulatedReadAndStartVMsRoleId]'
                      },
                      @{
                        Path       = 'roleAssignments.value[0].principalIds'
                        Value      = (Get-AzADServicePrincipal -DisplayName 'Windows Virtual Desktop').Id
                        AddToArray = $true
                      }
                    )
                  }
                  Add-CustomParameters @permissionInput

                  Write-Verbose "Invoke task with $functionInput" -Verbose
                  $functionInput.Keys | ForEach-Object { Write-Verbose ("PARAMETER: `t'{0}' with value '{1}'" -f $_, $functionInput[$_]) -Verbose }

                  Invoke-GeneralDeployment @functionInput -Verbose
                errorActionPreference: stop
                azurePowerShellVersion: LatestVersion
              enabled: true

## Resource Group
- deployment: Deploy_MgmtResourceGroup
  displayName: Deploy Resource Group
  dependsOn: ''
  environment: ${{ parameters.environment }}
  condition: |
    and(
      not(canceled()),
      eq('${{ parameters.enableJobDeployResourceGroup }}', true)
    )
  timeoutInMinutes: 120
  pool:
    ${{ if ne(parameters.vmImage, '') }}:
        vmImage: '${{ parameters.vmImage }}'
    ${{ if ne(parameters.poolName, '') }}:
        name: '${{ parameters.poolName }}'
  strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - template: ../../.templates/pipeline.steps.artifact.yml
              parameters:
                moduleName: '$(resourceGroupModuleName)'
                moduleVersion: '$(resourceGroupModuleVersion)'
            - task: AzurePowerShell@4
              displayName: 'Deploy module [$(resourceGroupModuleName)] version [$($resourceGroupModuleVersion)] in [$(resourcegroupname)] via [$(serviceConnection)]'
              name: Deploy_ResourceGroup_Task_01
              inputs:
                azureSubscription: '${{ parameters.serviceConnection }}'
                ScriptType: InlineScript
                inline: |
                  Write-Verbose "Load function" -Verbose
                  . '$(Build.SourcesDirectory)/$(orchestrationFunctionsPath)/GeneralDeployment/Invoke-GeneralDeployment.ps1'

                  $parameterFilePath = Join-Path '$(Build.SourcesDirectory)' '$(rgFolderPath)/Parameters/resourcegroup.parameters.json'
                  $functionInput = @{
                    location          = '$(location)'
                    modulePackagePath = Join-Path '$(Build.SourcesDirectory)/$(packagePath)' '$(resourceGroupModuleName)'
                    parameterFilePath = $parameterFilePath
                  }

                  Write-Verbose "Invoke task with $functionInput" -Verbose
                  $functionInput.Keys | ForEach-Object { Write-Verbose ("PARAMETER: `t'{0}' with value '{1}'" -f $_, $functionInput[$_]) -Verbose }

                  Invoke-GeneralDeployment @functionInput -Verbose
                errorActionPreference: stop
                azurePowerShellVersion: LatestVersion
              enabled: true

## Key Vault
- deployment: Deploy_WVDKeyVault
  displayName: Deploy Key Vault
  dependsOn:
  - ${{ if eq(parameters.enableJobDeployResourceGroup, true) }}:
    - Deploy_MgmtResourceGroup
  environment: ${{ parameters.environment }}
  condition: |
    and (
      not(canceled()),
      eq('${{ parameters.enableJobDeployWVDKeyVault }}', true),
      in(dependencies.Deploy_MgmtResourceGroup.result, '', 'Succeeded', 'Skipped')
    )
  timeoutInMinutes: 120
  pool:
    ${{ if ne(parameters.vmImage, '') }}:
        vmImage: '${{ parameters.vmImage }}'
    ${{ if ne(parameters.poolName, '') }}:
        name: '${{ parameters.poolName }}'
  strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - template: ../../.templates/pipeline.steps.artifact.yml
              parameters:
                moduleName: '$(keyVaultModuleName)'
                moduleVersion: '$(keyVaultModuleVersion)'
            - task: AzurePowerShell@4
              displayName: 'Deploy module [$(keyVaultModuleName)] version [$(keyVaultModuleVersion)] in [$(resourcegroupname)] via [$(serviceConnection)]'
              name: Deploy_KeyVault_Task
              inputs:
                azureSubscription: '${{ parameters.serviceConnection }}'
                ScriptType: InlineScript
                inline: |
                  Write-Verbose "Load function" -Verbose
                  . '$(Build.SourcesDirectory)/$(orchestrationFunctionsPath)/GeneralDeployment/Invoke-GeneralDeployment.ps1'

                  $parameterFilePath = Join-Path '$(Build.SourcesDirectory)' '$(rgFolderPath)/Parameters/keyvault.parameters.json'
                  $functionInput = @{
                    resourcegroupName = '$(resourcegroupname)'
                    modulePackagePath = Join-Path '$(Build.SourcesDirectory)/$(packagePath)' '$(keyVaultModuleName)'
                    parameterFilePath = $parameterFilePath
                  }

                  Write-Verbose "Invoke task with" -Verbose
                  $functionInput.Keys | ForEach-Object { Write-Verbose ("PARAMETER: `t'{0}' with value '{1}'" -f $_, $functionInput[$_]) -Verbose }

                  Invoke-GeneralDeployment @functionInput -Verbose
                errorActionPreference: stop
                azurePowerShellVersion: LatestVersion
              enabled: true
            - task: AzurePowerShell@4
              displayName: "Trigger module [$(keyVaultModuleName)] post-deployment"
              name: PostDeploy_KeyVault_Task
              inputs:
                azureSubscription: '${{ parameters.serviceConnection }}'
                ScriptType: InlineScript
                inline: |
                  Write-Verbose "Load function" -Verbose
                  . '$(Build.Repository.LocalPath)/$(orchestrationFunctionsPath)/GeneralDeployment/Invoke-KeyVaultPostDeployment.ps1'
                  $functionInput = @{
                    orchestrationFunctionsPath   = Join-Path '$(Build.Repository.LocalPath)' '$(orchestrationFunctionsPath)'
                    VaultName                    = '$(keyVaultName)'
                    domainJoin_userName          = '$(domainJoinUserName)'
                    domainJoin_pwd               = ConvertTo-SecureString '$(WVDJoinDomainUserPwd)' -AsPlainText -Force
                  }
                  if(-not ([string]::IsNullOrEmpty('$(localAdminPassword)'))) {
                    $functionInput += @{
                      localAdminPassword         = ConvertTo-SecureString "$(localAdminPassword)" -AsPlainText -Force
                    }
                  }
                  # Only required to enable Native AD identity-based access for file shares
                  if(-not ([string]::IsNullOrEmpty('$(storageJoinUserName)'))) {
                    $functionInput += @{
                      storageJoin_userName       = '$(storageJoinUserName)'
                      storageJoin_pwd            = ConvertTo-SecureString "$(StorageJoinUserPwd)" -AsPlainText -Force
                    }
                  }

                  Write-Verbose "Invoke task with" -Verbose
                  $functionInput.Keys | ForEach-Object { Write-Verbose ("PARAMETER: `t'{0}' with value '{1}'" -f $_, $functionInput[$_]) -Verbose }

                  Invoke-KeyVaultPostDeployment @functionInput -Verbose
                errorActionPreference: stop
                azurePowerShellVersion: LatestVersion
              enabled: true

## Storage Account
- deployment: Deploy_WVDAssetsStorageAccount
  displayName: Deploy Assets Storage Account
  dependsOn:
  - ${{ if eq(parameters.enableJobDeployResourceGroup, true) }}:
    - Deploy_MgmtResourceGroup
  environment: ${{ parameters.environment }}
  condition: |
    and (
      not(canceled()),
      eq('${{ parameters.enableJobDeployAssetsStorageAccount }}', true),
      in(dependencies.Deploy_MgmtResourceGroup.result, '', 'Succeeded', 'Skipped')
    )
  timeoutInMinutes: 120
  pool:
    ${{ if ne(parameters.vmImage, '') }}:
        vmImage: '${{ parameters.vmImage }}'
    ${{ if ne(parameters.poolName, '') }}:
        name: '${{ parameters.poolName }}'
  strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - template: ../../.templates/pipeline.steps.artifact.yml
              parameters:
                moduleName: '$(storageAccountModuleName)'
                moduleVersion: '$(storageAccountModuleVersion)'
            - task: AzurePowerShell@4
              displayName: 'Deploy module [$(storageAccountModuleName)] version [$(storageAccountModuleVersion)] in [$(resourcegroupname)] via [$(serviceConnection)]'
              name: Deploy_StorageAccounts_Task
              inputs:
                azureSubscription: '${{ parameters.serviceConnection }}'
                ScriptType: InlineScript
                inline: |
                  Write-Verbose "Load function" -Verbose
                  . '$(Build.SourcesDirectory)/$(orchestrationFunctionsPath)/GeneralDeployment/Invoke-GeneralDeployment.ps1'

                  $parameterFilePath = Join-Path '$(Build.SourcesDirectory)' '$(rgFolderPath)/Parameters/storageaccount.parameters.json'
                  $functionInput = @{
                    resourcegroupName = '$(resourcegroupname)'
                    modulePackagePath = Join-Path '$(Build.SourcesDirectory)/$(packagePath)' '$(storageAccountModuleName)'
                    parameterFilePath = $parameterFilePath
                  }

                  Write-Verbose "Invoke task with" -Verbose
                  $functionInput.Keys | ForEach-Object { Write-Verbose ("PARAMETER: `t'{0}' with value '{1}'" -f $_, $functionInput[$_]) -Verbose }

                  Invoke-GeneralDeployment @functionInput -Verbose
                errorActionPreference: stop
                azurePowerShellVersion: LatestVersion
              enabled: true

## Scaling Automation Account
- deployment: Deploy_WVDAutomationAccounts
  displayName: Deploy Automation Account
  dependsOn:
  - ${{ if eq(parameters.enableJobDeployResourceGroup, true) }}:
    - Deploy_MgmtResourceGroup
  - ${{ if eq(parameters.enableJobDeployWVDKeyVault, true) }}:
    - Deploy_WVDKeyVault
  environment: ${{ parameters.environment }}
  condition: |
    and (
      not(canceled()),
      eq('${{ parameters.enableJobDeployAutomationAccount }}', true),
      in(dependencies.Deploy_MgmtResourceGroup.result, '', 'Succeeded', 'Skipped'),
      in(dependencies.Deploy_WVDKeyVault.result, '', 'Succeeded', 'Skipped')
    )
  timeoutInMinutes: 120
  pool:
    vmImage: 'windows-latest'
  strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - template: ../../.templates/pipeline.steps.artifact.yml
              parameters:
                moduleName: '$(automationAccountModuleName)'
                moduleVersion: '$(automationAccountModuleVersion)'
            - task: AzurePowerShell@4
              displayName: 'Deploy module [$(automationAccountModuleName)] version [$(automationAccountModuleVersion)] in [$(resourcegroupname)] via [$(serviceConnection)]'
              name: Deploy_AutomationAccounts_Task
              inputs:
                azureSubscription: '${{ parameters.serviceConnection }}'
                ScriptType: InlineScript
                inline: |
                  Write-Verbose "Load function" -Verbose
                  . '$(Build.SourcesDirectory)/$(orchestrationFunctionsPath)/GeneralDeployment/Invoke-GeneralDeployment.ps1'

                  $parameterFilePath = Join-Path '$(Build.SourcesDirectory)' '$(rgFolderPath)/Parameters/automationaccounts.parameters.json'
                  $functionInput = @{
                    resourcegroupName = '$(resourcegroupname)'
                    modulePackagePath = Join-Path '$(Build.SourcesDirectory)/$(packagePath)' '$(automationAccountModuleName)'
                    parameterFilePath = $parameterFilePath
                  }

                  Write-Verbose "Invoke task with" -Verbose
                  $functionInput.Keys | ForEach-Object { Write-Verbose ("PARAMETER: `t'{0}' with value '{1}'" -f $_, $functionInput[$_]) -Verbose }

                  Invoke-GeneralDeployment @functionInput -Verbose
                errorActionPreference: stop
                azurePowerShellVersion: LatestVersion
                pwsh: true
              enabled: true
            - task: AzurePowerShell@4
              displayName: "Trigger module [$(automationAccountModuleName)] post-deployment"
              name: PostDeploy_AutomationAccounts_Task
              inputs:
                azureSubscription: '${{ parameters.serviceConnection }}'
                ScriptType: InlineScript
                inline: |
                  Write-Verbose "Load function" -Verbose
                  . '$(Build.SourcesDirectory)/$(orchestrationFunctionsPath)/GeneralDeployment/Invoke-AutomationAccountPostDeployment.ps1'

                  $functionInput = @{
                    orchestrationFunctionsPath         = Join-Path '$(Build.SourcesDirectory)' '$(orchestrationFunctionsPath)'
                    AutomationAccountName              = '$(AutomationAccountName)'
                    AutomationAccountRGName            = '$(resourcegroupname)'
                    ScalingRunbookName                 = '$(ScalingRunbookName)'
                    WebhookName                        = '$(ScalingWebhookName)'
                    RunAsConnectionSPName              = '$(RunAsConnectionSPName)'
                    KeyVaultName                       = '$(keyVaultName)'
                    RunAsSelfSignedCertSecretName      = '$(RunAsSelfSignedCertSecretName)'
                    AutoAccountRunAsCertExpiryInMonths = '$(AutoAccountRunAsCertExpiryInMonths)'
                    tempPath                           = '$(Agent.TempDirectory)'
                    LAWorkspaceName                    = '$(LAWorkspaceName)'
                  }

                  Write-Verbose "Invoke task with" -Verbose
                  $functionInput.Keys | ForEach-Object { Write-Verbose ("PARAMETER: `t'{0}' with value '{1}'" -f $_, $functionInput[$_]) -Verbose }

                  Invoke-AutomationAccountPostDeployment @functionInput -Verbose
                errorActionPreference: stop
                azurePowerShellVersion: LatestVersion
                pwsh: true
              enabled: true

## Recovery Services Vault
- deployment: Deploy_RecoveryServicesVault
  displayName: Deploy Recovery Services Vault
  dependsOn:
  - ${{ if eq(parameters.enableJobDeployResourceGroup, true) }}:
    - Deploy_MgmtResourceGroup
  environment: ${{ parameters.environment }}
  condition: |
    and (
      not(canceled()),
      eq('${{ parameters.enableJobDeployRSV }}', true),
      in(dependencies.Deploy_MgmtResourceGroup.result, '', 'Succeeded', 'Skipped')
    )
  timeoutInMinutes: 120
  pool:
    ${{ if ne(parameters.vmImage, '') }}:
        vmImage: '${{ parameters.vmImage }}'
    ${{ if ne(parameters.poolName, '') }}:
        name: '${{ parameters.poolName }}'
  strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - template: ../../.templates/pipeline.steps.artifact.yml
              parameters:
                moduleName: '$(rsvModuleName)'
                moduleVersion: '$(rsvModuleVersion)'
            - task: AzurePowerShell@4
              displayName: 'Deploy module [$(rsvModuleName)] version [$(rsvModuleVersion)] in [$(resourcegroupname)] via [$(serviceConnection)]'
              name: Deploy_RecoveryServicesVaults_Task
              inputs:
                azureSubscription: '${{ parameters.serviceConnection }}'
                ScriptType: InlineScript
                inline: |
                  Write-Verbose "Load function" -Verbose
                  . '$(Build.SourcesDirectory)/$(orchestrationFunctionsPath)/GeneralDeployment/Invoke-GeneralDeployment.ps1'

                  $parameterFilePath = Join-Path '$(Build.SourcesDirectory)' '$(rgFolderPath)/Parameters/rsv.parameters.json'
                  $functionInput = @{
                    resourcegroupName = '$(resourcegroupname)'
                    modulePackagePath = Join-Path '$(Build.SourcesDirectory)/$(packagePath)' '$(rsvModuleName)'
                    parameterFilePath = $parameterFilePath
                  }

                  Write-Verbose "Invoke task with" -Verbose
                  $functionInput.Keys | ForEach-Object { Write-Verbose ("PARAMETER: `t'{0}' with value '{1}'" -f $_, $functionInput[$_]) -Verbose }

                  Invoke-GeneralDeployment @functionInput -Verbose
                errorActionPreference: stop
                azurePowerShellVersion: LatestVersion
              enabled: true