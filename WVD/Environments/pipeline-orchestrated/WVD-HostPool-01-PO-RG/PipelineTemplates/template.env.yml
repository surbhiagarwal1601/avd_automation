parameters:
  # Pipeline-related parameters
  environment:
  serviceConnection:
  poolName:
  vmImage:

  # Control-related parameters
  enableJobUpdateAssetsStorageAccount:
  enableJobSyncSessionHostVMs:
  enableJobDeployResourceGroup:
  enableJobDeployHostPool:
  enableJobDeployDesktopAppGroup:
  enableJobDeployRemoteAppGroup01:
  enableJobDeploySessionHosts:
  enableJobDeployApplication:
  enableJobDeployWorkspace:
  enableJobDeployScalingScheduler:
  enableJobSessionHostImageLifecycle:

jobs:
  ## Update Assets Storage Account
  - deployment: Update_AssetsStorageAccount
    displayName: Update Assets Storage Account
    environment: ${{ parameters.environment }}
    condition: |
      and (
        not(canceled()),
        eq(${{ parameters.enableJobUpdateAssetsStorageAccount }}, true)
      )
    timeoutInMinutes: 120
    pool:
      ${{ if ne(parameters.vmImage, '') }}:
        vmImage: '${{ parameters.vmImage }}'
      ${{ if ne(parameters.poolName, '') }}:
        name: '${{ parameters.poolName }}'
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - task: AzurePowerShell@4
              displayName: 'Upload latest configuration files to assets storage account'
              inputs:
                azureSubscription: '${{ parameters.serviceConnection }}'
                ScriptType: InlineScript
                inline: |
                  Write-Verbose "Load function" -Verbose
                  . '$(Build.SourcesDirectory)/$(orchestrationFunctionsPath)/Storage/Update-AssetsStorageAccount.ps1'

                  $functionInput = @{
                    orchestrationFunctionsPath = Join-Path '$(Build.SourcesDirectory)' '$(orchestrationFunctionsPath)'
                    wvdUploadsPath             = Join-Path '$(Build.SourcesDirectory)' '$(wvdUploadsPath)'
                    resourceGroupPath          = Join-Path '$(Build.SourcesDirectory)' '$(rgFolderPath)'
                    storageContainerMapPath    = Join-Path '$(Build.SourcesDirectory)' '$(rgFolderPath)/$(storageContainerMapPath)'
                    hostPoolName               = '$(HostPoolName)'
                  }

                  Write-Verbose "Invoke task with" -Verbose
                  $functionInput.Keys | ForEach-Object { Write-Verbose ("PARAMETER: `t'{0}' with value '{1}'" -f $_, $functionInput[$_]) -Verbose }

                  Update-AssetsStorageAccount @functionInput -Verbose
                errorActionPreference: stop
                azurePowerShellVersion: LatestVersion
              enabled: true

  ## Sync VMs with registered session hosts & state table
  - deployment: Sync_HostPoolVMs
    displayName: Sync Session Host VMs
    environment: ${{ parameters.environment }}
    condition: |
      and (
        not(canceled()),
        eq('${{ parameters.enableJobSyncSessionHostVMs }}', 'true')
      )
    timeoutInMinutes: 120
    pool:
      ${{ if ne(parameters.vmImage, '') }}:
        vmImage: '${{ parameters.vmImage }}'
      ${{ if ne(parameters.poolName, '') }}:
        name: '${{ parameters.poolName }}'
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - powershell: |
                if(-not (Get-Module AzTable -ListAvailable)) {
                    Write-Verbose "Installing module 'AzTable'" -Verbose
                    Install-Module AzTable -Repository PSGallery -Force -Scope CurrentUser
                } else {
                    Write-Verbose "Module 'AzTable' already installed" -Verbose
                }
            - task: AzurePowerShell@4
              displayName: 'Sync Session Host VMs'
              inputs:
                azureSubscription: '${{ parameters.serviceConnection }}'
                ScriptType: InlineScript
                inline: |
                  Write-Verbose "Load function" -Verbose
                  . '$(Build.SourcesDirectory)/$(orchestrationFunctionsPath)/Storage/Sync-SessionHostEntry.ps1'

                  $functionInput = @{
                    orchestrationFunctionsPath = Join-Path '$(Build.SourcesDirectory)' '$(orchestrationFunctionsPath)'
                    hostPoolResourceGroupName  = '$(ResourceGroupName)'
                  }

                  if(-not ([String]::IsNullOrEmpty('$(stateStorageAccountName)'))) { $functionInput['stateStorageAccountName'] = '$(stateStorageAccountName)' }
                  if(-not ([String]::IsNullOrEmpty('$(stateTableName)'))) { $functionInput['stateTableName'] = '$(stateTableName)' }

                  Write-Verbose "Invoke task with" -Verbose
                  $functionInput.Keys | ForEach-Object { Write-Verbose ("PARAMETER: `t'{0}' with value '{1}'" -f $_, $functionInput[$_]) -Verbose }

                  Sync-SessionHostEntry @functionInput -Verbose
                errorActionPreference: stop
                azurePowerShellVersion: LatestVersion
              enabled: true

  ## Resource Group
  - deployment: Deploy_HostPoolResourceGroup
    displayName: Deploy Resource Group
    dependsOn: ''
    environment: ${{ parameters.environment }}
    condition: |
      and(
        not(canceled()),
        eq(${{ parameters.enableJobDeployResourceGroup }}, true)
      )
    timeoutInMinutes: 120
    pool:
      ${{ if ne(parameters.vmImage, '') }}:
        vmImage: '${{ parameters.vmImage }}'
      ${{ if ne(parameters.poolName, '') }}:
        name: '${{ parameters.poolName }}'
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - template: ../../.templates/pipeline.steps.artifact.yml
              parameters:
                moduleName: '$(resourceGroupModuleName)'
                moduleVersion: '$(resourceGroupModuleVersion)'
            - task: AzurePowerShell@4
              displayName: 'Deploy module [$(resourceGroupModuleName)] version [$(resourceGroupModuleVersion)] in [$(resourcegroupname)] via [$(serviceConnection)]'
              name: Deploy_ResourceGroup_Task_01
              inputs:
                azureSubscription: '${{ parameters.serviceConnection }}'
                ScriptType: InlineScript
                inline: |
                  Write-Verbose "Load function" -Verbose
                  . '$(Build.SourcesDirectory)/$(orchestrationFunctionsPath)/GeneralDeployment/Invoke-GeneralDeployment.ps1'

                  $parameterFilePath = Join-Path '$(Build.SourcesDirectory)' '$(rgFolderPath)/Parameters/resourcegroup.parameters.json'
                  $functionInput = @{
                    location          = '$(location)'
                    modulePackagePath = Join-Path '$(Build.SourcesDirectory)/$(packagePath)' '$(resourceGroupModuleName)'
                    parameterFilePath = $parameterFilePath
                  }

                  Write-Verbose "Invoke task with $functionInput" -Verbose
                  $functionInput.Keys | ForEach-Object { Write-Verbose ("PARAMETER: `t'{0}' with value '{1}'" -f $_, $functionInput[$_]) -Verbose }

                  Invoke-GeneralDeployment @functionInput -Verbose
                errorActionPreference: stop
                azurePowerShellVersion: LatestVersion
              enabled: true

  ## Host pool
  - deployment: Deploy_WVDHostPool
    displayName: Deploy Host Pool
    dependsOn:
      - ${{ if eq(parameters.enableJobDeployResourceGroup, true) }}:
          - Deploy_HostPoolResourceGroup
    environment: ${{ parameters.environment }}
    condition: |
      and (
        not(canceled()),
        eq(${{ parameters.enableJobDeployHostPool }}, true),
        in(dependencies.Deploy_HostPoolResourceGroup.result, '', 'Succeeded', 'Skipped')
      )
    timeoutInMinutes: 120
    pool:
      ${{ if ne(parameters.vmImage, '') }}:
        vmImage: '${{ parameters.vmImage }}'
      ${{ if ne(parameters.poolName, '') }}:
        name: '${{ parameters.poolName }}'
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - template: ../../.templates/pipeline.steps.artifact.yml
              parameters:
                moduleName: '$(wvdHostPoolsModuleName)'
                moduleVersion: '$(wvdHostPoolsModuleVersion)'
            - task: AzurePowerShell@4
              displayName: 'Deploy module [$(wvdHostPoolsModuleName)] version [$(wvdHostPoolsModuleVersion)] in [$(resourceGroupName)] via [$(serviceConnection)]'
              name: Deploy_WVDHostPool_Task
              inputs:
                azureSubscription: '${{ parameters.serviceConnection }}'
                ScriptType: InlineScript
                inline: |
                  Write-Verbose "Load function" -Verbose
                  . '$(Build.SourcesDirectory)/$(orchestrationFunctionsPath)/GeneralDeployment/Invoke-GeneralDeployment.ps1'

                  $parameterFilePath = Join-Path '$(Build.SourcesDirectory)' '$(rgFolderPath)/Parameters/wvdhostpool.parameters.json'
                  $functionInput = @{
                    resourcegroupName = '$(resourceGroupName)'
                    modulePackagePath = Join-Path '$(Build.SourcesDirectory)/$(packagePath)' '$(wvdHostPoolsModuleName)'
                    parameterFilePath = $parameterFilePath
                    location          = '$(secondaryLocation)' # Required by resource type
                  }

                  Write-Verbose "Invoke task with" -Verbose
                  $functionInput.Keys | ForEach-Object { Write-Verbose ("PARAMETER: `t'{0}' with value '{1}'" -f $_, $functionInput[$_]) -Verbose }

                  Invoke-GeneralDeployment @functionInput -Verbose
                errorActionPreference: stop
                azurePowerShellVersion: LatestVersion
              enabled: true

  ## Desktop Application Group
  - deployment: Deploy_DesktopAppGroup
    displayName: Deploy Desktop Application Group
    dependsOn:
      - ${{ if eq(parameters.enableJobDeployResourceGroup, true) }}:
          - Deploy_HostPoolResourceGroup
      - ${{ if eq(parameters.enableJobDeployHostPool, true) }}:
          - Deploy_WVDHostPool
    environment: ${{ parameters.environment }}
    condition: |
      and (
        not(canceled()),
        eq(${{ parameters.enableJobDeployDesktopAppGroup }}, true),
        in(dependencies.Deploy_HostPoolResourceGroup.result, '', 'Succeeded', 'Skipped'),
        in(dependencies.Deploy_WVDHostPool.result, '', 'Succeeded', 'Skipped')
      )
    timeoutInMinutes: 120
    pool:
      ${{ if ne(parameters.vmImage, '') }}:
        vmImage: '${{ parameters.vmImage }}'
      ${{ if ne(parameters.poolName, '') }}:
        name: '${{ parameters.poolName }}'
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - template: ../../.templates/pipeline.steps.artifact.yml
              parameters:
                moduleName: '$(wvdApplicationGroupsModuleName)'
                moduleVersion: '$(wvdApplicationGroupsModuleVersion)'
            - task: AzurePowerShell@4
              displayName: 'Deploy module [$(wvdApplicationGroupsModuleName)] version [$(wvdApplicationGroupsModuleVersion)] in [$(resourceGroupName)] via [$(serviceConnection)]'
              name: Deploy_WvdApplicationGroups_Task
              inputs:
                azureSubscription: '${{ parameters.serviceConnection }}'
                ScriptType: InlineScript
                inline: |
                  Write-Verbose "Load function" -Verbose
                  . '$(Build.SourcesDirectory)/$(orchestrationFunctionsPath)/GeneralDeployment/Invoke-GeneralDeployment.ps1'

                  $parameterFilePath = Join-Path '$(Build.SourcesDirectory)' '$(rgFolderPath)/Parameters/wvddesktoppapplicationgroup.parameters.json'
                  $functionInput = @{
                    resourcegroupName = '$(resourceGroupName)'
                    modulePackagePath = Join-Path '$(Build.SourcesDirectory)/$(packagePath)' '$(wvdApplicationGroupsModuleName)'
                    parameterFilePath = $parameterFilePath
                    location          = '$(secondaryLocation)' # Required by resource type
                  }

                  Write-Verbose "Invoke task with" -Verbose
                  $functionInput.Keys | ForEach-Object { Write-Verbose ("PARAMETER: `t'{0}' with value '{1}'" -f $_, $functionInput[$_]) -Verbose }

                  Invoke-GeneralDeployment @functionInput -Verbose
                errorActionPreference: stop
                azurePowerShellVersion: LatestVersion
              enabled: true

  ## Remote Application group
  - deployment: Deploy_RemoteAppGroup01
    displayName: Deploy Remote Application Group
    dependsOn:
      - ${{ if eq(parameters.enableJobDeployResourceGroup, true) }}:
          - Deploy_HostPoolResourceGroup
      - ${{ if eq(parameters.enableJobDeployHostPool, true) }}:
          - Deploy_WVDHostPool
    environment: ${{ parameters.environment }}
    condition: |
      and (
        not(canceled()),
        eq(${{ parameters.enableJobDeployRemoteAppGroup01 }}, true),
        in(dependencies.Deploy_HostPoolResourceGroup.result, '', 'Succeeded', 'Skipped'),
        in(dependencies.Deploy_WVDHostPool.result, '', 'Succeeded', 'Skipped')
      )
    timeoutInMinutes: 120
    pool:
      ${{ if ne(parameters.vmImage, '') }}:
        vmImage: '${{ parameters.vmImage }}'
      ${{ if ne(parameters.poolName, '') }}:
        name: '${{ parameters.poolName }}'
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - template: ../../.templates/pipeline.steps.artifact.yml
              parameters:
                moduleName: '$(wvdApplicationGroupsModuleName)'
                moduleVersion: '$(wvdApplicationGroupsModuleVersion)'
            - task: AzurePowerShell@4
              displayName: 'Deploy module [$(wvdApplicationGroupsModuleName)] version [$(wvdApplicationGroupsModuleVersion)] in [$(resourceGroupName)] via [$(serviceConnection)]'
              name: Deploy_WvdApplicationGroups_Task
              inputs:
                azureSubscription: '${{ parameters.serviceConnection }}'
                ScriptType: InlineScript
                inline: |
                  Write-Verbose "Load function" -Verbose
                  . '$(Build.SourcesDirectory)/$(orchestrationFunctionsPath)/GeneralDeployment/Invoke-GeneralDeployment.ps1'

                  $parameterFilePath = Join-Path '$(Build.SourcesDirectory)' '$(rgFolderPath)/Parameters/wvdapplicationgroup-01.parameters.json'
                  $functionInput = @{
                    resourcegroupName = '$(resourceGroupName)'
                    modulePackagePath = Join-Path '$(Build.SourcesDirectory)/$(packagePath)' '$(wvdApplicationGroupsModuleName)'
                    parameterFilePath = $parameterFilePath
                    location          = '$(secondaryLocation)' # Required by resource type
                  }

                  Write-Verbose "Invoke task with" -Verbose
                  $functionInput.Keys | ForEach-Object { Write-Verbose ("PARAMETER: `t'{0}' with value '{1}'" -f $_, $functionInput[$_]) -Verbose }

                  Invoke-GeneralDeployment @functionInput -Verbose
                errorActionPreference: stop
                azurePowerShellVersion: LatestVersion
              enabled: true

  ## Session Hosts
  - deployment: Deploy_WVDSessionHosts
    displayName: Deploy Session Hosts
    dependsOn:
      - ${{ if eq(parameters.enableJobDeployResourceGroup, true) }}:
          - Deploy_HostPoolResourceGroup
      - ${{ if eq(parameters.enableJobDeployHostPool, true) }}:
          - Deploy_WVDHostPool
      - ${{ if eq(parameters.enableJobUpdateAssetsStorageAccount, true) }}:
          - Update_AssetsStorageAccount
      - ${{ if eq(parameters.enableJobSyncSessionHostVMs, true) }}:
          - Sync_HostPoolVMs
    environment: ${{ parameters.environment }}
    condition: |
      and (
        not(canceled()),
        eq(${{ parameters.enableJobDeploySessionHosts }}, true),
        in(dependencies.Deploy_HostPoolResourceGroup.result, '', 'Succeeded', 'Skipped'),
        in(dependencies.Deploy_WVDHostPool.result, '', 'Succeeded', 'Skipped'),
        in(dependencies.Update_AssetsStorageAccount.result, '', 'Succeeded', 'Skipped'),
        in(dependencies.Sync_HostPoolVMs.result, '', 'Succeeded', 'Skipped')
      )
    timeoutInMinutes: 120
    pool:
      ${{ if ne(parameters.vmImage, '') }}:
        vmImage: '${{ parameters.vmImage }}'
      ${{ if ne(parameters.poolName, '') }}:
        name: '${{ parameters.poolName }}'
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - template: ../../.templates/pipeline.steps.artifact.yml
              parameters:
                moduleName: '$(virtualMachinesModuleName)'
                moduleVersion: '$(virtualMachinesModuleVersion)'
            - powershell: |
                if(-not (Get-Module Az.DesktopVirtualization -ListAvailable)) {
                    Write-Verbose "Installing module 'Az.DesktopVirtualization'" -Verbose
                    Install-Module Az.DesktopVirtualization -Repository PSGallery -Force -Scope CurrentUser
                } else {
                    Write-Verbose "Module 'Az.DesktopVirtualization' already installed" -Verbose
                }
              displayName: 'Install required module'
            - task: AzurePowerShell@4
              displayName: 'Deploy module [$(virtualMachinesModuleName)] version [$(virtualMachinesModuleVersion)] in [$(resourceGroupName)] via [$(serviceConnection)]'
              name: Deploy_SessionHosts_Task
              inputs:
                azureSubscription: '${{ parameters.serviceConnection }}'
                ScriptType: InlineScript
                inline: |
                  Write-Verbose "Load function" -Verbose
                  . '$(Build.SourcesDirectory)/$(orchestrationFunctionsPath)/GeneralDeployment/Invoke-GeneralDeployment.ps1'
                  . '$(Build.SourcesDirectory)/$(orchestrationFunctionsPath)/GeneralDeployment/Add-CustomParameters.ps1'

                  $parameterFilePath = Join-Path '$(Build.SourcesDirectory)' '$(rgFolderPath)/Parameters/wvdsessionhost.parameters.json'
                  $functionInput = @{
                    resourcegroupName = '$(resourceGroupName)'
                    modulePackagePath = Join-Path '$(Build.SourcesDirectory)/$(packagePath)' '$(virtualMachinesModuleName)'
                    parameterFilePath = $parameterFilePath
                  }

                  Write-Verbose "Invoke task with" -Verbose
                  $functionInput.Keys | ForEach-Object { Write-Verbose ("PARAMETER: `t'{0}' with value '{1}'" -f $_, $functionInput[$_]) -Verbose }

                  Write-Verbose "Fetch and populated pipeline outputs" -Verbose
                  $regInfo = Get-AzWvdRegistrationInfo -HostPoolName '$(hostpoolname)' -ResourceGroupName '$(resourceGroupName)'
                  if(-not $regInfo) {
                    throw 'Failed to fetch the registration info for host pool [$(hostpoolname)]'
                  }

                  $overwriteInputObject = @{
                    parameterFilePath     = $parameterFilePath
                    valueMap              = @(
                      @{ path = 'dscConfiguration.value.protectedSettings.configurationArguments.registrationInfoToken'; value = $($regInfo.Token) }
                    )
                  }
                  Add-CustomParameters @overwriteInputObject

                  $parameterObjects = $()
                  if (-not [String]::IsNullOrEmpty('$(customImageReferenceId)')) {
                    Write-Verbose "Using custom image ref ['$(customImageReferenceId)']" -Verbose
                    $parameterObjects += @{
                      imageReference = @{
                        id = '$(customImageReferenceId)'
                      }
                    }
                  }
                  else {
                    $imageReference = @{
                      publisher = '$(publisher)'
                      offer     = '$(offer)'
                      sku       = '$(sku)'
                      version   = '$(version)'
                    }
                    Write-Verbose ("Using published image ref [{0}]" -f ($imageReference | ConvertTo-Json)) -Verbose
                    $parameterObjects += @{
                      imageReference = $imageReference
                    }
                  }

                  if ([System.Convert]::ToBoolean('$(enableCSE)')) {
                    # Retrieve storage account key for the first storage account
                    $storageAccount01 = Get-AzResource -Name $(profilesStorageAccountName01) -ResourceType 'Microsoft.Storage/storageAccounts'
                    $SASKey01 = (Get-AzStorageAccountKey -AccountName $storageAccount01.Name -ResourceGroupName $storageAccount01.ResourceGroupName)[0]

                    # Retrieve storage account key for the second storage account
                    # $storageAccount02 = Get-AzResource -Name $(profilesStorageAccountName02) -ResourceType 'Microsoft.Storage/storageAccounts'
                    # $SASKey02 = (Get-AzStorageAccountKey -AccountName $storageAccount02.Name -ResourceGroupName $storageAccount02.ResourceGroupName)[0]

                    ## Option 1 - Enable ANF Profile management
                    # $windowsScriptExtensionCommandToExecute = 'powershell -ExecutionPolicy Unrestricted -Command "& .\scriptExtensionMasterInstaller.ps1 -Dynparameters @{}"'

                    ## Option 2 (default) - Enable Azure files Profile management with Single storage account
                    $windowsScriptExtensionCommandToExecute = 'powershell -ExecutionPolicy Unrestricted -Command "& .\scriptExtensionMasterInstaller.ps1 -Dynparameters @{FSLogixKeys = @([pscustomobject]@{StAName=\"'+ $($storageAccount01.Name) +'\";StAKey=\"'+ $($SASKey01.Value) +'\"})}"'

                    ## Option 3 - Enable Azure files Profile management with Two storage accounts
                    # $windowsScriptExtensionCommandToExecute = 'powershell -ExecutionPolicy Unrestricted -Command "& .\scriptExtensionMasterInstaller.ps1 -Dynparameters @{FSLogixKeys = @([pscustomobject]@{StAName=\"'+ $($storageAccount01.Name) +'\";StAKey=\"'+ $($SASKey01.Value) +'\"} ;[pscustomobject]@{StAName=\"'+ $($storageAccount02.Name) +'\";StAKey=\"'+ $($SASKey02.Value) +'\"})}"'

                    $windowsScriptExtensionCommandToExecute = ConvertTo-SecureString -String $windowsScriptExtensionCommandToExecute -AsPlainText -Force

                    $parameterObjects += @{
                      windowsScriptExtensionCommandToExecute = $windowsScriptExtensionCommandToExecute
                    }
                  }

                  $functionInput += @{
                    optionalParameters = $parameterObjects
                  }

                  Invoke-GeneralDeployment @functionInput -Verbose
                errorActionPreference: stop
                azurePowerShellVersion: LatestVersion
              enabled: true

  ## Applications
  - deployment: Deploy_Application
    displayName: Deploy Application
    dependsOn:
      - ${{ if eq(parameters.enableJobDeployResourceGroup, true) }}:
          - Deploy_HostPoolResourceGroup
      - ${{ if eq(parameters.enableJobDeploySessionHosts, true) }}:
          - Deploy_WVDSessionHosts
      - ${{ if eq(parameters.enableJobDeployRemoteAppGroup01, true) }}:
          - Deploy_RemoteAppGroup01
    environment: ${{ parameters.environment }}
    condition: |
      and (
        not(canceled()),
        eq(${{ parameters.enableJobDeployApplication }}, true),
        in(dependencies.Deploy_HostPoolResourceGroup.result, '', 'Succeeded', 'Skipped'),
        in(dependencies.Deploy_WVDSessionHosts.result, '', 'Succeeded', 'Skipped'),
        in(dependencies.Deploy_RemoteAppGroup01.result, '', 'Succeeded', 'Skipped')
      )
    timeoutInMinutes: 120
    pool:
      ${{ if ne(parameters.vmImage, '') }}:
        vmImage: '${{ parameters.vmImage }}'
      ${{ if ne(parameters.poolName, '') }}:
        name: '${{ parameters.poolName }}'
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - template: ../../.templates/pipeline.steps.artifact.yml
              parameters:
                moduleName: '$(wvdApplicationsModuleName)'
                moduleVersion: '$(wvdApplicationsModuleVersion)'
            - task: AzurePowerShell@4
              displayName: 'Deploy module [$(wvdApplicationsModuleName)] version [$(wvdApplicationsModuleVersion)] in [$(resourceGroupName)] via [$(serviceConnection)]'
              name: Deploy_WvdApplications_Task
              inputs:
                azureSubscription: '${{ parameters.serviceConnection }}'
                ScriptType: InlineScript
                inline: |
                  Write-Verbose "Load function" -Verbose
                  . '$(Build.SourcesDirectory)/$(orchestrationFunctionsPath)/GeneralDeployment/Invoke-GeneralDeployment.ps1'

                  $parameterFilePath = Join-Path '$(Build.SourcesDirectory)' '$(rgFolderPath)/Parameters/wvdapplication.parameters.json'
                  $functionInput = @{
                    resourcegroupName = '$(resourceGroupName)'
                    modulePackagePath = Join-Path '$(Build.SourcesDirectory)/$(packagePath)' '$(wvdApplicationsModuleName)'
                    parameterFilePath = $parameterFilePath
                    location          = '$(secondaryLocation)' # Required by resource type
                  }

                  Write-Verbose "Invoke task with" -Verbose
                  $functionInput.Keys | ForEach-Object { Write-Verbose ("PARAMETER: `t'{0}' with value '{1}'" -f $_, $functionInput[$_]) -Verbose }

                  Invoke-GeneralDeployment @functionInput -Verbose
                errorActionPreference: stop
                azurePowerShellVersion: LatestVersion
              enabled: true

  ## Workspace
  - deployment: Deploy_Workspace
    displayName: Deploy Workspace
    dependsOn:
      - ${{ if eq(parameters.enableJobDeployResourceGroup, true) }}:
          - Deploy_HostPoolResourceGroup
      - ${{ if eq(parameters.enableJobDeployDesktopAppGroup, true) }}:
          - Deploy_DesktopAppGroup
      - ${{ if eq(parameters.enableJobDeployRemoteAppGroup01, true) }}:
          - Deploy_RemoteAppGroup01
    environment: ${{ parameters.environment }}
    condition: |
      and (
        not(canceled()),
        eq(${{ parameters.enableJobDeployWorkspace }}, true),
        in(dependencies.Deploy_HostPoolResourceGroup.result, '', 'Succeeded', 'Skipped'),
        in(dependencies.Deploy_DesktopAppGroup.result, '', 'Succeeded', 'Skipped'),
        in(dependencies.Deploy_RemoteAppGroup01.result, '', 'Succeeded', 'Skipped')
      )
    timeoutInMinutes: 120
    pool:
      ${{ if ne(parameters.vmImage, '') }}:
        vmImage: '${{ parameters.vmImage }}'
      ${{ if ne(parameters.poolName, '') }}:
        name: '${{ parameters.poolName }}'
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - template: ../../.templates/pipeline.steps.artifact.yml
              parameters:
                moduleName: '$(wvdWorkspacesModuleName)'
                moduleVersion: '$(wvdWorkspacesModuleVersion)'
            - task: AzurePowerShell@4
              displayName: 'Deploy module [$(wvdWorkspacesModuleName)] version [$(wvdWorkspacesModuleVersion)] in [$(resourceGroupName)] via [$(serviceConnection)]'
              name: Deploy_WvdWorkspaces_Task
              inputs:
                azureSubscription: '${{ parameters.serviceConnection }}'
                ScriptType: InlineScript
                inline: |
                  Write-Verbose "Load function" -Verbose
                  . '$(Build.SourcesDirectory)/$(orchestrationFunctionsPath)/GeneralDeployment/Invoke-GeneralDeployment.ps1'

                  $parameterFilePath = Join-Path '$(Build.SourcesDirectory)' '$(rgFolderPath)/Parameters/wvdworkspace.parameters.json'
                  $functionInput = @{
                    resourcegroupName = '$(resourceGroupName)'
                    modulePackagePath  = Join-Path '$(Build.SourcesDirectory)/$(packagePath)' '$(wvdWorkspacesModuleName)'
                    parameterFilePath = $parameterFilePath
                    location          = '$(secondaryLocation)' # Required by resource type
                  }

                  Write-Verbose "Invoke task with" -Verbose
                  $functionInput.Keys | ForEach-Object { Write-Verbose ("PARAMETER: `t'{0}' with value '{1}'" -f $_, $functionInput[$_]) -Verbose }

                  Invoke-GeneralDeployment @functionInput -Verbose
                errorActionPreference: stop
                azurePowerShellVersion: LatestVersion
              enabled: true

  ## Scaling Logic App
  - deployment: Deploy_WvdScalingScheduler
    displayName: Deploy Scaling Scheduler
    dependsOn:
      - ${{ if eq(parameters.enableJobDeployResourceGroup, true) }}:
          - Deploy_HostPoolResourceGroup
      - ${{ if eq(parameters.enableJobDeploySessionHosts, true) }}:
          - Deploy_WVDSessionHosts
    environment: ${{ parameters.environment }}
    condition: |
      and (
        not(canceled()),
        eq(${{ parameters.enableJobDeployScalingScheduler }}, true),
        in(dependencies.Deploy_HostPoolResourceGroup.result, '', 'Succeeded', 'Skipped'),
        in(dependencies.Deploy_WVDSessionHosts.result, '', 'Succeeded', 'Skipped')
      )
    timeoutInMinutes: 120
    pool:
      ${{ if ne(parameters.vmImage, '') }}:
        vmImage: '${{ parameters.vmImage }}'
      ${{ if ne(parameters.poolName, '') }}:
        name: '${{ parameters.poolName }}'
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - template: ../../.templates/pipeline.steps.artifact.yml
              parameters:
                moduleName: '$(wvdScalingSchedulerModuleName)'
                moduleVersion: '$(wvdScalingSchedulerModuleVersion)'
            - task: AzurePowerShell@4
              displayName: 'Deploy module [$(wvdScalingSchedulerModuleName)] version [$(wvdScalingSchedulerModuleVersion)] in [$(resourceGroupName)] via [$(serviceConnection)]'
              name: Deploy_WvdScalingScheduler_Task
              inputs:
                azureSubscription: '${{ parameters.serviceConnection }}'
                ScriptType: InlineScript
                inline: |
                  Write-Verbose "Load function" -Verbose
                  . '$(Build.SourcesDirectory)/$(orchestrationFunctionsPath)/GeneralDeployment/Invoke-GeneralDeployment.ps1'

                  $parameterFilePath = Join-Path '$(Build.SourcesDirectory)' '$(rgFolderPath)/Parameters/wvdScalingScheduler.parameters.json'
                  $functionInput = @{
                    resourcegroupName = '$(resourceGroupName)'
                    modulePackagePath = Join-Path '$(Build.SourcesDirectory)/$(packagePath)' '$(wvdScalingSchedulerModuleName)'
                    parameterFilePath = $parameterFilePath
                  }

                  Write-Verbose "Invoke task with" -Verbose
                  $functionInput.Keys | ForEach-Object { Write-Host ("PARAMETER: `t'{0}' with value '{1}'" -f $_, $functionInput[$_].subString(0, [System.Math]::Min(50, $functionInput[$_].Length)) ) }

                  Invoke-GeneralDeployment @functionInput -Verbose
                errorActionPreference: stop
                azurePowerShellVersion: LatestVersion
              enabled: true

  ## Image lifecycle management script
  - deployment: Run_Session_Host_Image_Lifecycle
    displayName: Run Session Host Image Lifecycle
    dependsOn:
      - ${{ if eq(parameters.enableJobDeploySessionHosts, true) }}:
          - Deploy_WVDSessionHosts
    environment: ${{ parameters.environment }}
    condition: |
      and (
        not(canceled()),
        eq(${{ parameters.enableJobSessionHostImageLifecycle }}, true),
        in(dependencies.Deploy_WVDSessionHosts.result, '', 'Succeeded', 'Skipped')
      )
    timeoutInMinutes: 180
    pool:
      ${{ if ne(parameters.vmImage, '') }}:
        vmImage: '${{ parameters.vmImage }}'
      ${{ if ne(parameters.poolName, '') }}:
        name: '${{ parameters.poolName }}'
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - powershell: |
                $reqModules = @('Az.DesktopVirtualization', 'OMSIngestionAPI', 'Az.StorageTable')
                foreach($reqModule in $reqModules) {
                  if(-not ($installed = Get-Module $reqModule -ListAvailable)) {
                      Write-Verbose "Installing module [$reqModule]" -Verbose
                      Install-Module $reqModule -Repository PSGallery -Force -Scope CurrentUser
                  } else {
                      Write-Verbose ("Module $reqModule already installed with version [{0}]" -f $installed.Version) -Verbose
                  }
                }
              displayName: 'Install required module'
            - task: AzurePowerShell@4
              displayName: 'Run image lifecycle update via [$(serviceConnection)]'
              name: ImageLifecycleUpdate
              inputs:
                azureSubscription: '${{ parameters.serviceConnection }}'
                ScriptType: InlineScript
                inline: |
                  Write-Verbose "Load function" -Verbose
                  . '$(Build.SourcesDirectory)/$(orchestrationFunctionsPath)/GeneralDeployment/Invoke-UpdateHostPool.ps1'

                  $functionInput = @{
                    orchestrationFunctionsPath = Join-Path '$(Build.SourcesDirectory)' '$(orchestrationFunctionsPath)'
                    HostPoolName               = '$(HostPoolName)'
                    HostPoolRGName             = '$(ResourceGroupName)'
                    LogoffDeadline             = '$(LogoffDeadline)'
                    LogOffMessageTitle         = '$(LogOffMessageTitle)'
                    LogOffMessageBody          = '$(LogOffMessageBody)'
                    UtcOffset                  = '$(UtcOffset)'
                    customImageReferenceId     = '$(customImageReferenceId)'
                    MarketplaceImageVersion    = '$(version)'
                    MarketplaceImagePublisher  = '$(publisher)'
                    MarketplaceImageOffer      = '$(offer)'
                    MarketplaceImageSku        = '$(sku)'
                    MarketplaceImageLocation   = '$(imagelocation)'
                    DeleteVMDeadline           = '$(DeleteVMDeadline)'
                    stateStorageAccountName    = '$(stateStorageAccountName)'
                    stateTableName             = '$(stateTableName)'
                    LAWorkspaceName            = '$(LAWorkspaceName)'
                  }

                  Write-Verbose "Invoke task with" -Verbose
                  $functionInput.Keys | ForEach-Object { Write-Verbose ("PARAMETER: `t'{0}' with value '{1}'" -f $_, $functionInput[$_]) -Verbose }

                  Invoke-UpdateHostPool @functionInput -Verbose
                errorActionPreference: stop
                azurePowerShellVersion: LatestVersion
              enabled: true