parameters:
  # Pipeline-related parameters
  environment:
  serviceConnection:
  poolName:
  vmImage:

  # Control-related parameters
  enableJobUpdateAssetsStorageAccount:
  enableJobDeployResourceGroup:
  enableJobDeployUserAssignedIdentities:
  enableJobRoleAssignmentsImagingSubscriptionContributor:
  enableJobDeploySharedImageGallery:
  enableJobDeploySharedImageDefinition:
  removeImageTemplateResourceGroups:
  enableJobDeployImageTemplates:

jobs:
## Update Assets Storage Account
- deployment: Update_AssetsStorageAccount
  displayName: Update Assets Storage Account
  environment: ${{ parameters.environment }}
  condition: |
    and (
      not(canceled()),
      eq('${{ parameters.enableJobUpdateAssetsStorageAccount}}', true)
    )
  timeoutInMinutes: 120
  pool:
    ${{ if ne(parameters.vmImage, '') }}:
        vmImage: '${{ parameters.vmImage }}'
    ${{ if ne(parameters.poolName, '') }}:
        name: '${{ parameters.poolName }}'
  strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - task: AzurePowerShell@4
            displayName: "Upload latest configuration files to assets storage account"
            name: PostDeploy_StorageAccounts_Task
            inputs:
              azureSubscription: '${{ parameters.serviceConnection }}'
              ScriptType: InlineScript
              inline: |
                Write-Verbose "Load function" -Verbose
                . '$(Build.SourcesDirectory)/$(orchestrationFunctionsPath)/Storage/Update-AssetsStorageAccount.ps1'

                $functionInput = @{
                  orchestrationFunctionsPath = Join-Path '$(Build.SourcesDirectory)' '$(orchestrationFunctionsPath)'
                  wvdUploadsPath             = Join-Path '$(Build.SourcesDirectory)' '$(wvdUploadsPath)'
                  resourceGroupPath          = Join-Path '$(Build.SourcesDirectory)' '$(rgFolderPath)'
                  storageContainerMapPath    = Join-Path '$(Build.SourcesDirectory)' '$(rgFolderPath)/Parameters/Uploads/assets.config.json'
                }

                Write-Verbose "Invoke task with" -Verbose
                $functionInput.Keys | ForEach-Object { Write-Verbose ("PARAMETER: `t'{0}' with value '{1}'" -f $_, $functionInput[$_]) -Verbose }

                Update-AssetsStorageAccount @functionInput -Verbose
              errorActionPreference: stop
              azurePowerShellVersion: LatestVersion
            enabled: true

## Resource Group
- deployment: Deploy_ImagingsResourceGroup
  displayName: Deploy Resource Group
  dependsOn: ''
  environment: ${{ parameters.environment }}
  condition: |
    and(
      not(canceled()),
      eq('${{ parameters.enableJobDeployResourceGroup}}', true)
    )
  timeoutInMinutes: 120
  pool:
    ${{ if ne(parameters.vmImage, '') }}:
        vmImage: '${{ parameters.vmImage }}'
    ${{ if ne(parameters.poolName, '') }}:
        name: '${{ parameters.poolName }}'
  strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - template: ../../.templates/pipeline.steps.artifact.yml
              parameters:
                moduleName: '$(resourceGroupModuleName)'
                moduleVersion: '$(resourceGroupModuleVersion)'
            - task: AzurePowerShell@4
              displayName: 'Deploy module [$(resourceGroupModuleName)] version [$(resourceGroupModuleVersion)] in [$(resourcegroupname)] via [$(serviceConnection)]'
              name: Deploy_ResourceGroup_Task_01
              inputs:
                azureSubscription: '${{ parameters.serviceConnection }}'
                ScriptType: InlineScript
                inline: |
                  Write-Verbose "Load function" -Verbose
                  . '$(Build.SourcesDirectory)/$(orchestrationFunctionsPath)/GeneralDeployment/Invoke-GeneralDeployment.ps1'

                  $parameterFilePath = '$(rgFolderPath)/Parameters/resourcegroup.parameters.json'
                  $functionInput = @{
                    location          = '$(location)'
                    modulePackagePath = Join-Path '$(Build.SourcesDirectory)/$(packagePath)' '$(resourceGroupModuleName)'
                    parameterFilePath = $parameterFilePath
                  }

                  Write-Verbose "Invoke task with $functionInput" -Verbose
                  $functionInput.Keys | ForEach-Object { Write-Verbose ("PARAMETER: `t'{0}' with value '{1}'" -f $_, $functionInput[$_]) -Verbose }

                  Invoke-GeneralDeployment @functionInput -Verbose
                errorActionPreference: stop
                azurePowerShellVersion: LatestVersion
              enabled: true
            - task: AzurePowerShell@4
              displayName: 'Prepare environment'
              inputs:
                azureSubscription: '${{ parameters.serviceConnection }}'
                ScriptType: InlineScript
                azurePowerShellVersion: LatestVersion
                errorActionPreference: stop
                inline: |
                  $maximumRetries = 60
                  $waitTime = 10
                  $requiredResourceProviders = @(
                      'Microsoft.VirtualMachineImages'
                  )

                  foreach ($requiredResourceProvider in $requiredResourceProviders) {
                      $states = (Get-AzResourceProvider -ProviderNamespace $requiredResourceProvider).RegistrationState
                      if ($states -contains 'NotRegistered' -or $states -contains 'Unregistered') {
                          Write-Verbose "Resource provider '$requiredResourceProvider' not registered. Registering" -Verbose
                          Register-AzResourceProvider -ProviderNamespace $requiredResourceProvider
                      }
                      else {
                          Write-Verbose "Resource provider '$requiredResourceProvider' already registered" -Verbose
                      }
                  }

                  foreach ($requiredResourceProvider in $requiredResourceProviders) {
                      $currentTry = 0
                      do {
                          Write-Verbose "Resource provider '$requiredResourceProvider' still registering. Waiting $waitTime seconds [$currentTry|$maximumRetries]" -Verbose
                          Start-Sleep $waitTime
                          $currentTry++
                      } while ($currentTry -le $maximumRetries -and (Get-AzResourceProvider -ProviderNamespace $requiredResourceProvider).RegistrationState -contains 'Registering')
                  }

## User Assigned Identity (MSI)
- deployment: Deploy_UserAssignedIdentities
  displayName: Deploy Imaging MSI
  dependsOn:
  - ${{ if eq(parameters.enableJobDeployResourceGroup, true) }}:
    - Deploy_ImagingsResourceGroup
  environment: ${{ parameters.environment }}
  condition: |
    and (
      not(canceled()),
      eq('${{ parameters.enableJobDeployUserAssignedIdentities }}', true),
      in(dependencies.Deploy_ImagingsResourceGroup.result, '', 'Succeeded', 'Skipped')
    )
  timeoutInMinutes: 120
  pool:
    ${{ if ne(parameters.vmImage, '') }}:
        vmImage: '${{ parameters.vmImage }}'
    ${{ if ne(parameters.poolName, '') }}:
        name: '${{ parameters.poolName }}'
  strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - template: ../../.templates/pipeline.steps.artifact.yml
              parameters:
                moduleName: '$(msiModuleName)'
                moduleVersion: '$(msiModuleVersion)'
            - task: AzurePowerShell@4
              displayName: 'Deploy module [$(msiModuleName)] version [$(msiModuleVersion)] in [$(resourcegroupname)] via [$(serviceConnection)]'
              name: Deploy_UserAssignedIdentities_Task
              inputs:
                azureSubscription: '${{ parameters.serviceConnection }}'
                ScriptType: InlineScript
                inline: |
                  Write-Verbose "Load function" -Verbose
                  . '$(Build.SourcesDirectory)/$(orchestrationFunctionsPath)/GeneralDeployment/Invoke-GeneralDeployment.ps1'

                  $parameterFilePath = '$(rgFolderPath)/Parameters/userAssignedIdentity.parameters.json'
                  $functionInput = @{
                    resourcegroupName = '$(resourcegroupname)'
                    modulePackagePath = Join-Path '$(Build.SourcesDirectory)/$(packagePath)' '$(msiModuleName)'
                    parameterFilePath = $parameterFilePath
                  }

                  Write-Verbose "Invoke task with" -Verbose
                  $functionInput.Keys | ForEach-Object { Write-Verbose ("PARAMETER: `t'{0}' with value '{1}'" -f $_, $functionInput[$_]) -Verbose }

                  Invoke-GeneralDeployment @functionInput -Verbose
                errorActionPreference: stop
                azurePowerShellVersion: LatestVersion
              enabled: true

## Subscription contributor assignment
- deployment: Deploy_RoleAssignments_ImagingSubscriptionContributor
  displayName: Assign Imaging MSI Permissions
  dependsOn:
  - ${{ if eq(parameters.enableJobDeployResourceGroup, true) }}:
    - Deploy_ImagingsResourceGroup
  - ${{ if eq(parameters.enableJobDeployUserAssignedIdentities, true) }}:
    - Deploy_UserAssignedIdentities
  environment: ${{ parameters.environment }}
  condition: |
    and (
      not(canceled()),
      eq('${{ parameters.enableJobRoleAssignmentsImagingSubscriptionContributor }}', true),
      in(dependencies.Deploy_ImagingsResourceGroup.result, '', 'Succeeded', 'Skipped'),
      in(dependencies.Deploy_UserAssignedIdentities.result, '', 'Succeeded', 'Skipped')
    )
  timeoutInMinutes: 120
  pool:
    ${{ if ne(parameters.vmImage, '') }}:
        vmImage: '${{ parameters.vmImage }}'
    ${{ if ne(parameters.poolName, '') }}:
        name: '${{ parameters.poolName }}'
  variables:
    msiPrincipalId: $[ dependencies.Deploy_UserAssignedIdentities.outputs['Deploy_UserAssignedIdentities.Deploy_UserAssignedIdentities_Task.msiPrincipalId'] ]
  strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - template: ../../.templates/pipeline.steps.artifact.yml
              parameters:
                moduleName: '$(rbacModuleName)'
                moduleVersion: '$(rbacModuleVersion)'
            - task: AzurePowerShell@4
              displayName: 'Deploy module [$(rbacModuleName) version [$(rbacModuleVersion)] in [$(resourcegroupname)] via [$(serviceConnection)]'
              name: Deploy_ImagingSubscriptionOwnerAssignment_Task
              inputs:
                azureSubscription: '${{ parameters.serviceConnection }}'
                ScriptType: InlineScript
                inline: |
                  Write-Verbose "Load function" -Verbose
                  . '$(Build.SourcesDirectory)/$(orchestrationFunctionsPath)/GeneralDeployment/Invoke-GeneralDeployment.ps1'

                  $parameterFilePath = '$(rgFolderPath)/Parameters/imagingSubscriptionContributorAssignment.parameters.json'
                  $functionInput = @{
                    location          = '$(location)'
                    modulePackagePath = Join-Path '$(Build.SourcesDirectory)/$(packagePath)' '$(rbacModuleName)'
                    parameterFilePath = $parameterFilePath
                  }

                  $parameterObjects += @{
                    roleAssignments =   @{
                      roleDefinitionIdOrName = "Contributor"
                      principalIds           = @( '$(msiPrincipalId)' )
                    }
                  }

                  $functionInput += @{
                    optionalParameters = $parameterObjects
                  }

                  Write-Verbose "Invoke task with" -Verbose
                  ConvertTo-Json $functionInput -Depth 3
                  #$functionInput.Keys | ForEach-Object { Write-Verbose ("PARAMETER: `t'{0}' with value '{1}'" -f $_, $functionInput[$_]) -Verbose }

                  Invoke-GeneralDeployment @functionInput -Verbose
                errorActionPreference: stop
                azurePowerShellVersion: LatestVersion
              enabled: true

## Shared Image Gallery
- deployment: Deploy_SharedImageGallery
  displayName: Deploy Shared Image Gallery
  dependsOn:
  - ${{ if eq(parameters.enableJobDeployResourceGroup, true) }}:
    - Deploy_ImagingsResourceGroup
  environment: ${{ parameters.environment }}
  condition: |
    and (
      not(canceled()),
      eq('${{ parameters.enableJobDeploySharedImageGallery }}', true),
      in(dependencies.Deploy_ImagingsResourceGroup.result, '', 'Succeeded', 'Skipped')
    )
  timeoutInMinutes: 120
  pool:
    ${{ if ne(parameters.vmImage, '') }}:
        vmImage: '${{ parameters.vmImage }}'
    ${{ if ne(parameters.poolName, '') }}:
        name: '${{ parameters.poolName }}'
  strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - template: ../../.templates/pipeline.steps.artifact.yml
              parameters:
                moduleName: '$(sharedImageGalleryModuleName)'
                moduleVersion: '$(sharedImageGalleryModuleVersion)'
            - task: AzurePowerShell@4
              displayName: 'Deploy module [$(sharedImageGalleryModuleName)] version [$(sharedImageGalleryModuleVersion)] in [$(resourcegroupname)] via [$(serviceConnection)]'
              name: Deploy_SharedImageGallery_Task
              inputs:
                azureSubscription: '${{ parameters.serviceConnection }}'
                ScriptType: InlineScript
                inline: |
                  Write-Verbose "Load function" -Verbose
                  . '$(Build.SourcesDirectory)/$(orchestrationFunctionsPath)/GeneralDeployment/Invoke-GeneralDeployment.ps1'

                  $parameterFilePath = '$(rgFolderPath)/Parameters/sharedImageGallery.parameters.json'
                  $functionInput = @{
                    resourcegroupName = '$(resourcegroupname)'
                    modulePackagePath = Join-Path '$(Build.SourcesDirectory)/$(packagePath)' '$(sharedImageGalleryModuleName)'
                    parameterFilePath = $parameterFilePath
                  }

                  Write-Verbose "Invoke task with" -Verbose
                  $functionInput.Keys | ForEach-Object { Write-Verbose ("PARAMETER: `t'{0}' with value '{1}'" -f $_, $functionInput[$_]) -Verbose }

                  Invoke-GeneralDeployment @functionInput -Verbose
                errorActionPreference: stop
                azurePowerShellVersion: LatestVersion
              enabled: true

## Shared Image Definition
- deployment: Deploy_SharedImageDefinition
  displayName: Deploy Image Definition
  dependsOn:
  - ${{ if eq(parameters.enableJobDeployResourceGroup, true) }}:
    - Deploy_ImagingsResourceGroup
  - ${{ if eq(parameters.enableJobDeploySharedImageGallery, true) }}:
    - Deploy_SharedImageGallery
  environment: ${{ parameters.environment }}
  condition: |
    and (
      not(canceled()),
      eq('${{ parameters.enableJobDeploySharedImageDefinition }}', true),
      in(dependencies.Deploy_ImagingsResourceGroup.result, '', 'Succeeded', 'Skipped'),
      in(dependencies.Deploy_SharedImageGallery.result, '', 'Succeeded', 'Skipped')
    )
  timeoutInMinutes: 120
  pool:
    ${{ if ne(parameters.vmImage, '') }}:
        vmImage: '${{ parameters.vmImage }}'
    ${{ if ne(parameters.poolName, '') }}:
        name: '${{ parameters.poolName }}'
  strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - template: ../../.templates/pipeline.steps.artifact.yml
              parameters:
                moduleName: '$(sharedImageDefinitionModuleName)'
                moduleVersion: '$(sharedImageDefinitionModuleVersion)'
            - task: AzurePowerShell@4
              displayName: 'Deploy module [$(sharedImageDefinitionModuleName)] version [$(sharedImageDefinitionModuleVersion)] in [$(resourcegroupname)] via [$(serviceConnection)]'
              name: Deploy_SharedImageDefinition_Task
              inputs:
                azureSubscription: '${{ parameters.serviceConnection }}'
                ScriptType: InlineScript
                inline: |
                  Write-Verbose "Load function" -Verbose
                  . '$(Build.SourcesDirectory)/$(orchestrationFunctionsPath)/GeneralDeployment/Invoke-GeneralDeployment.ps1'

                  $parameterFilePath = '$(rgFolderPath)/Parameters/sharedImageDefinition.parameters.json'
                  $functionInput = @{
                    resourcegroupName = '$(resourcegroupname)'
                    modulePackagePath = Join-Path '$(Build.SourcesDirectory)/$(packagePath)' '$(sharedImageDefinitionModuleName)'
                    parameterFilePath = $parameterFilePath
                  }

                  Write-Verbose "Invoke task with" -Verbose
                  $functionInput.Keys | ForEach-Object { Write-Verbose ("PARAMETER: `t'{0}' with value '{1}'" -f $_, $functionInput[$_]) -Verbose }

                  Invoke-GeneralDeployment @functionInput -Verbose
                errorActionPreference: stop
                azurePowerShellVersion: LatestVersion
              enabled: true

## Image template
- deployment: Run_ImageTemplates
  displayName: Image Template Actions
  dependsOn:
  - ${{ if eq(parameters.enableJobDeployResourceGroup, true) }}:
    - Deploy_ImagingsResourceGroup
  - ${{ if eq(parameters.enableJobDeploySharedImageDefinition, true) }}:
    - Deploy_SharedImageDefinition
  - ${{ if eq(parameters.enableJobRoleAssignmentsImagingSubscriptionContributor, true) }}:
    - Deploy_RoleAssignments_ImagingSubscriptionContributor
  - ${{ if eq(parameters.enableJobUpdateAssetsStorageAccount, true) }}:
    - Update_AssetsStorageAccount
  environment: ${{ parameters.environment }}
  condition: |
    and (
      not(canceled()),
      or(eq('${{ parameters.enableJobDeployImageTemplates }}', true), eq('${{ parameters.removeImageTemplateResourceGroups }}', true)),
      in(dependencies.Deploy_ImagingsResourceGroup.result, '', 'Succeeded', 'Skipped'),
      in(dependencies.Deploy_SharedImageDefinition.result, '', 'Succeeded', 'Skipped'),
      in(dependencies.Deploy_RoleAssignments_ImagingSubscriptionContributor.result, '', 'Succeeded', 'Skipped'),
      in(dependencies.Update_AssetsStorageAccount.result, '', 'Succeeded', 'Skipped')
    )
  timeoutInMinutes: 120
  pool:
    ${{ if ne(parameters.vmImage, '') }}:
        vmImage: '${{ parameters.vmImage }}'
    ${{ if ne(parameters.poolName, '') }}:
        name: '${{ parameters.poolName }}'
  strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - task: AzurePowerShell@4
              displayName: 'Remove generated image template resource groups'
              name: Remove_ImageTemplates_Task
              inputs:
                azureSubscription: '${{ parameters.serviceConnection }}'
                ScriptType: InlineScript
                inline: |
                  Write-Verbose "Load function" -Verbose
                  . '$(Build.SourcesDirectory)/$(orchestrationFunctionsPath)/Imaging/Remove-ImageTemplate.ps1'

                  $parameterFilePath = '$(rgFolderPath)/Parameters/imageTemplates.parameters.json'
                  $imageTemplateName = (ConvertFrom-Json (Get-Content $parameterFilePath -Raw)).parameters.imageTemplateName.value

                  $functionInput = @{
                    resourcegroupName = '$(resourcegroupname)'
                    imageTemplateName =  $imageTemplateName
                  }

                  Write-Verbose "Invoke task with" -Verbose
                  $functionInput.Keys | ForEach-Object { Write-Verbose ("PARAMETER: `t'{0}' with value '{1}'" -f $_, $functionInput[$_]) -Verbose }

                  Remove-ImageTemplate @functionInput -Verbose
                errorActionPreference: stop
                azurePowerShellVersion: LatestVersion
              continueOnError: true
              enabled: ${{ eq(parameters.removeImageTemplateResourceGroups, true) }}
            - ${{ if eq( parameters.enableJobDeployImageTemplates, true) }}:
              - template: ../../.templates/pipeline.steps.artifact.yml
                parameters:
                  moduleName: '$(imageTemplateModuleName)'
                  moduleVersion: '$(imageTemplateModuleVersion)'
              - task: AzurePowerShell@4
                displayName: 'Deploy module [$(imageTemplateModuleName)] version [$(imageTemplateModuleVersion)] in [$(resourcegroupname)] via [$(serviceConnection)]'
                name: Deploy_ImageTemplates_Task
                inputs:
                  azureSubscription: '${{ parameters.serviceConnection }}'
                  ScriptType: InlineScript
                  inline: |
                    Write-Verbose "Load function" -Verbose
                    . '$(Build.SourcesDirectory)/$(orchestrationFunctionsPath)/GeneralDeployment/Invoke-GeneralDeployment.ps1'
                    . '$(Build.SourcesDirectory)/$(orchestrationFunctionsPath)/GeneralDeployment/Add-CustomParameters.ps1'
                    . '$(Build.SourcesDirectory)/$(orchestrationFunctionsPath)/GeneralDeployment/Set-SasKeysInFile.ps1'

                    $parameterFilePath = '$(rgFolderPath)/Parameters/imageTemplates.parameters.json'
                    $functionInput = @{
                      location          = '$(location)'
                      resourcegroupName = '$(resourcegroupname)'
                      modulePackagePath = Join-Path '$(Build.SourcesDirectory)/$(packagePath)' '$(imageTemplateModuleName)'
                      parameterFilePath = $parameterFilePath
                    }

                    Write-Verbose "Invoke task with" -Verbose
                    $functionInput.Keys | ForEach-Object { Write-Verbose ("PARAMETER: `t'{0}' with value '{1}'" -f $_, $functionInput[$_]) -Verbose }

                    # Set SAS keys
                    Set-SasKeysInFile -filePath $parameterFilePath -Verbose

                    Invoke-GeneralDeployment @functionInput -Verbose
                  errorActionPreference: stop
                  azurePowerShellVersion: LatestVersion
                enabled: true
              ## Trigger building new image
              - task: AzurePowerShell@4
                displayName: "Trigger module [$(imageTemplateModuleName)] post-deployment"
                name: PostDeploy_ImageTemplates_Task
                inputs:
                  azureSubscription: '${{ parameters.serviceConnection }}'
                  ScriptType: InlineScript
                  inline: |
                    Write-Verbose "Load function" -Verbose
                    . '$(Build.SourcesDirectory)/$(orchestrationFunctionsPath)/GeneralDeployment/Invoke-ImageTemplatesPostDeployment.ps1'

                    $functionInput = @{
                      orchestrationFunctionsPath     = '$(Build.SourcesDirectory)/$(orchestrationFunctionsPath)'
                      ResourceGroupName              = '$(resourcegroupname)'
                      ImageTemplateName              = '$(Deploy_ImageTemplates_Task.imageTemplateName)' # template deployment output
                      synchronouslyWaitForImageBuild = [System.Convert]::ToBoolean('$(synchronouslyWaitForImageBuild)')
                    }

                    Write-Verbose "Invoke task with" -Verbose
                    $functionInput.Keys | ForEach-Object { Write-Verbose ("PARAMETER: `t'{0}' with value '{1}'" -f $_, $functionInput[$_]) -Verbose }

                    Invoke-ImageTemplatesPostDeployment @functionInput -Verbose
                  errorActionPreference: stop
                  azurePowerShellVersion: LatestVersion
                enabled: true