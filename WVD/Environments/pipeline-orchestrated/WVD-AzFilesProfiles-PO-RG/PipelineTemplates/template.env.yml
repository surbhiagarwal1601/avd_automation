parameters:
  # Pipeline-related parameters
  environment:
  serviceConnection:
  poolName:
  vmImage:

  # Control-related parameters
  enableJobUpdateAssetsStorageAccount:
  enableJobDeployResourceGroup:
  enableJobDeployStorageAccount:
  enableJobDeployFileSharesBackup:
  enableJobDeployHelperServer:

jobs:
  ## Update Assets Storage Account (Native AD only)
  - deployment: Update_AssetsStorageAccount
    displayName: Update Assets Storage Account
    environment: ${{ parameters.environment }}
    condition: |
      and (
        not(canceled()),
        eq(variables.identityApproach, 'AD'),
        eq(${{ parameters.enableJobUpdateAssetsStorageAccount }}, true)
      )
    timeoutInMinutes: 120
    pool:
      ${{ if ne(parameters.vmImage, '') }}:
        vmImage: '${{ parameters.vmImage }}'
      ${{ if ne(parameters.poolName, '') }}:
        name: '${{ parameters.poolName }}'
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - task: AzurePowerShell@4
              displayName: 'Upload latest configuration files to assets storage account'
              name: PostDeploy_StorageAccounts_Task
              inputs:
                azureSubscription: '${{ parameters.serviceConnection }}'
                ScriptType: InlineScript
                inline: |
                  Write-Verbose "Load function" -Verbose
                  . '$(Build.SourcesDirectory)/$(orchestrationFunctionsPath)/Storage/Update-AssetsStorageAccount.ps1'

                  $functionInput = @{
                    orchestrationFunctionsPath = Join-Path '$(Build.SourcesDirectory)' '$(orchestrationFunctionsPath)'
                    wvdUploadsPath             = Join-Path '$(Build.SourcesDirectory)' '$(wvdUploadsPath)'
                    resourceGroupPath          = Join-Path '$(Build.SourcesDirectory)' '$(rgFolderPath)'
                    storageContainerMapPath    = Join-Path '$(Build.SourcesDirectory)' '$(rgFolderPath)/$(storageContainerMapPath)'
                  }

                  Write-Verbose "Invoke task with" -Verbose
                  $functionInput.Keys | ForEach-Object { Write-Verbose ("PARAMETER: `t'{0}' with value '{1}'" -f $_, $functionInput[$_]) -Verbose }

                  Update-AssetsStorageAccount @functionInput -Verbose
                errorActionPreference: stop
                azurePowerShellVersion: LatestVersion
              enabled: true
  ## Resource Group
  - deployment: Deploy_ProfilesResourceGroup
    displayName: Deploy Resource Group
    dependsOn: ''
    environment: ${{ parameters.environment }}
    condition: |
      and(
        not(canceled()),
        eq('${{ parameters.enableJobDeployResourceGroup }}', true)
      )
    timeoutInMinutes: 120
    pool:
      ${{ if ne(parameters.vmImage, '') }}:
        vmImage: '${{ parameters.vmImage }}'
      ${{ if ne(parameters.poolName, '') }}:
        name: '${{ parameters.poolName }}'
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - template: ../../.templates/pipeline.steps.artifact.yml
              parameters:
                moduleName: '$(resourceGroupModuleName)'
                moduleVersion: '$(resourceGroupModuleVersion)'
            - task: AzurePowerShell@4
              displayName: 'Deploy module [$(resourceGroupModuleName)] version [$(resourceGroupModuleVersion)] in [$(resourcegroupname)] via [$(serviceConnection)]'
              name: Deploy_ResourceGroup_Task_01
              inputs:
                azureSubscription: '${{ parameters.serviceConnection }}'
                ScriptType: InlineScript
                inline: |
                  Write-Verbose "Load function" -Verbose
                  . '$(Build.SourcesDirectory)/$(orchestrationFunctionsPath)/GeneralDeployment/Invoke-GeneralDeployment.ps1'

                  $parameterFilePath = Join-Path '$(Build.SourcesDirectory)' '$(rgFolderPath)/Parameters/resourcegroup.parameters.json'
                  $functionInput = @{
                    location          = '$(location)'
                    modulePackagePath = Join-Path '$(Build.SourcesDirectory)/$(packagePath)' '$(resourceGroupModuleName)'
                    parameterFilePath = $parameterFilePath
                  }

                  Write-Verbose "Invoke task with $functionInput" -Verbose
                  $functionInput.Keys | ForEach-Object { Write-Verbose ("PARAMETER: `t'{0}' with value '{1}'" -f $_, $functionInput[$_]) -Verbose }

                  Invoke-GeneralDeployment @functionInput -Verbose
                errorActionPreference: stop
                azurePowerShellVersion: LatestVersion
              enabled: true

  ## Storage Account
  - deployment: Deploy_WVDProfilesStorageAccount
    displayName: Deploy Profiles Storage Account
    dependsOn:
      - ${{ if eq(parameters.enableJobDeployResourceGroup, true) }}:
          - Deploy_ProfilesResourceGroup
    environment: ${{ parameters.environment }}
    condition: |
      and (
        not(canceled()),
        eq('${{ parameters.enableJobDeployStorageAccount }}', true),
        in(dependencies.Deploy_ProfilesResourceGroup.result, '', 'Succeeded', 'Skipped')
      )
    timeoutInMinutes: 120
    pool:
      ${{ if ne(parameters.vmImage, '') }}:
        vmImage: '${{ parameters.vmImage }}'
      ${{ if ne(parameters.poolName, '') }}:
        name: '${{ parameters.poolName }}'
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - template: ../../.templates/pipeline.steps.artifact.yml
              parameters:
                moduleName: '$(storageAccountModuleName)'
                moduleVersion: '$(storageaccountModuleVersion)'
            - task: AzurePowerShell@4
              displayName: 'Deploy module [$(storageAccountModuleName)] version [$(storageaccountModuleVersion)] in [$(resourcegroupname)] via [$(serviceConnection)]'
              name: Deploy_StorageAccounts_Task
              inputs:
                azureSubscription: '${{ parameters.serviceConnection }}'
                ScriptType: InlineScript
                inline: |
                  Write-Verbose "Load function" -Verbose
                  . '$(Build.SourcesDirectory)/$(orchestrationFunctionsPath)/GeneralDeployment/Invoke-GeneralDeployment.ps1'
                  $parameterFilePath = Join-Path '$(Build.SourcesDirectory)' '$(rgFolderPath)/Parameters/wvdprofiles-storageaccount.parameters.json'
                  $functionInput = @{
                    resourcegroupName = '$(resourcegroupname)'
                    modulePackagePath = Join-Path '$(Build.SourcesDirectory)/$(packagePath)' '$(storageAccountModuleName)'
                    parameterFilePath = $parameterFilePath
                  }
                  Write-Verbose "Checking identity approach: $(identityApproach)" -Verbose
                  If("$(identityApproach)" -eq "AADDS") {
                    Write-Verbose "Creating azureFilesIdentityBasedAuthentication object and set to AADDS" -Verbose
                    $parameterObjects=@{
                      azureFilesIdentityBasedAuthentication=@{
                        directoryServiceOptions = "AADDS"
                      }
                    }
                    $functionInput += @{
                      optionalParameters=$parameterObjects
                    }
                  }
                  Write-Verbose "Invoke task with $functionInput" -Verbose
                  $functionInput.Keys | ForEach-Object { Write-Verbose ("PARAMETER: `t'{0}' with value '{1}'" -f $_, $functionInput[$_]) -Verbose }
                  Invoke-GeneralDeployment @functionInput -Verbose
                errorActionPreference: stop
                azurePowerShellVersion: LatestVersion
              enabled: true

  ## Deploy Azure File Shares Backup
  - deployment: Deploy_FileSharesBackup
    displayName: Deploy Azure File Shares Backup
    dependsOn:
      - ${{ if eq(parameters.enableJobDeployStorageAccount, true) }}:
          - Deploy_WVDProfilesStorageAccount
    environment: ${{ parameters.environment }}
    condition: |
          and (
            not(canceled()),
            eq(${{ parameters.enableJobDeployFileSharesBackup }}, true),
            in(dependencies.Deploy_WVDProfilesStorageAccount.result, '', 'Succeeded', 'Skipped'),
          )
    timeoutInMinutes: 120
    pool:
      ${{ if ne(parameters.vmImage, '') }}:
        vmImage: '${{ parameters.vmImage }}'
      ${{ if ne(parameters.poolName, '') }}:
        name: '${{ parameters.poolName }}'
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - task: AzurePowerShell@4
              displayName: "Deploy Azure File Shares Backup Task"
              name: Deploy_FileSharesBackup_Task
              inputs:
                azureSubscription: '${{ parameters.serviceConnection }}'
                ScriptType: InlineScript
                inline: |
                  Write-Verbose "Load function" -Verbose
                  . '$(Build.SourcesDirectory)/$(orchestrationFunctionsPath)/GeneralDeployment/Invoke-RsvPostDeployment.ps1'
                  $filesharePolicyMapPath = Join-Path '$(Build.SourcesDirectory)' '$(rgFolderPath)/Parameters/rsv.backupmap.json'

                  if(-not (Test-Path $filesharePolicyMapPath)) {
                    throw "Unable to locate file share backup configuration in path [$filesharePolicyMapPath]"
                  }
                  $fileSharePolicyMaps = Get-Content -Path $filesharePolicyMapPath -Raw | ConvertFrom-Json -AsHashtable

                  $functionInput = @{
                    orchestrationFunctionsPath         = Join-Path '$(Build.SourcesDirectory)' '$(orchestrationFunctionsPath)'
                    recoveryServicesVaultName          = "$(profilesBackupVault)"
                    RecoveryServicesVaultResourceGroup = "$(profilesBackupVaultRG)"
                    fileSharePolicyMaps                = $fileSharePolicyMaps.fileSharePolicyMaps
                  }

                  Write-Verbose "Invoke task with" -Verbose
                  $functionInput.Keys | ForEach-Object { Write-Verbose ("PARAMETER: `t'{0}' with value '{1}'" -f $_, $functionInput[$_]) -Verbose }

                  Invoke-RSVPostDeployment @functionInput -Verbose
                errorActionPreference: stop
                azurePowerShellVersion: LatestVersion
              enabled: true
  ## Helper Server (Native AD only)
  - deployment: Deploy_HelperServer
    displayName: Deploy Helper Server
    dependsOn:
      - ${{ if eq(parameters.enableJobDeployResourceGroup, true) }}:
          - Deploy_ProfilesResourceGroup
    environment: ${{ parameters.environment }}
    condition: |
      and (
        not(canceled()),
        eq(variables.identityApproach, 'AD'),
        eq(${{ parameters.enableJobDeployHelperServer }}, true),
        in(dependencies.Deploy_ProfilesResourceGroup.result, '', 'Succeeded', 'Skipped')
      )
    timeoutInMinutes: 120
    pool:
      ${{ if ne(parameters.vmImage, '') }}:
        vmImage: '${{ parameters.vmImage }}'
      ${{ if ne(parameters.poolName, '') }}:
        name: '${{ parameters.poolName }}'
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - template: ../../.templates/pipeline.steps.artifact.yml
              parameters:
                moduleName: '$(virtualMachinesModuleName)'
                moduleVersion: '$(virtualMachinesModuleVersion)'
            - task: AzurePowerShell@4
              displayName: 'Deploy module [$(virtualMachinesModuleName)] version [$(virtualMachinesModuleVersion)] in [$(resourceGroupName)] via [$(serviceConnection)]'
              name: Deploy_HelperServer_Task
              inputs:
                azureSubscription: '${{ parameters.serviceConnection }}'
                ScriptType: InlineScript
                inline: |
                  Write-Verbose "Load function" -Verbose
                  . '$(Build.SourcesDirectory)/$(orchestrationFunctionsPath)/GeneralDeployment/Invoke-GeneralDeployment.ps1'
                  . '$(Build.SourcesDirectory)/$(orchestrationFunctionsPath)/GeneralDeployment/Add-CustomParameters.ps1'

                  # Load parameters
                  $parameterFilePath = Join-Path '$(Build.SourcesDirectory)' '$(rgFolderPath)/Parameters/helperserver.parameters.json'
                  $functionInput = @{
                    resourcegroupName = '$(resourceGroupName)'
                    modulePackagePath = Join-Path '$(Build.SourcesDirectory)/$(packagePath)' '$(virtualMachinesModuleName)'
                    parameterFilePath = $parameterFilePath
                  }
                  Write-Verbose "Invoke task with" -Verbose
                  $functionInput.Keys | ForEach-Object { Write-Verbose ("PARAMETER: `t'{0}' with value '{1}'" -f $_, $functionInput[$_]) -Verbose }

                  # Add imaging parameters from variables
                  $parameterObjects = $()
                  if (-not [String]::IsNullOrEmpty('$(customImageReferenceId)')) {
                    Write-Verbose "Using custom image ref ['$(customImageReferenceId)']" -Verbose
                    $parameterObjects += @{
                      imageReference = @{
                        id = '$(customImageReferenceId)'
                      }
                    }
                  }
                  else {
                    $imageReference = @{
                      publisher = '$(publisher)'
                      offer     = '$(offer)'
                      sku       = '$(sku)'
                      version   = '$(version)'
                    }
                    Write-Verbose ("Using published image ref [{0}]" -f ($imageReference | ConvertTo-Json)) -Verbose
                    $parameterObjects += @{
                      imageReference = $imageReference
                    }
                  }

                  $functionInput += @{
                    optionalParameters = $parameterObjects
                  }
                  Invoke-GeneralDeployment @functionInput -Verbose
                errorActionPreference: stop
                azurePowerShellVersion: LatestVersion
              enabled: true
  ## Add Key Vault Access Policies
  - deployment: Add_KVAccessPolicies
    displayName: Add Key Vault Access Policies
    dependsOn:
      - ${{ if eq(parameters.enableJobDeployHelperServer, true) }}:
          - Deploy_HelperServer
    environment: ${{ parameters.environment }}
    condition: |
      and (
        not(canceled()),
        eq(variables.identityApproach, 'AD'),
        eq(${{ parameters.enableJobDeployHelperServer }}, true),
        in(dependencies.Deploy_HelperServer.result, '', 'Succeeded')
      )
    timeoutInMinutes: 120
    pool:
      ${{ if ne(parameters.vmImage, '') }}:
        vmImage: '${{ parameters.vmImage }}'
      ${{ if ne(parameters.poolName, '') }}:
        name: '${{ parameters.poolName }}'
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - task: AzurePowerShell@4
              displayName: 'Add Helper Server to Key Vault Access Policies'
              inputs:
                azureSubscription: '${{ parameters.serviceConnection }}'
                ScriptType: InlineScript
                azurePowerShellVersion: LatestVersion
                errorActionPreference: stop
                inline: |
                  Write-Verbose "Load function" -Verbose
                  . '$(Build.SourcesDirectory)/$(orchestrationFunctionsPath)/KeyVault/Update-KeyVaultAccessPolicy.ps1'

                  Write-Verbose "keyVaultName $(keyVaultName)" -Verbose
                  Write-Verbose "helperServerName $(helperServerName)" -Verbose

                  $objectId=(Get-AzADServicePrincipal -DisplayName $(helperServerName)).Id

                  Update-KeyVaultAccessPolicy -VaultName $(keyVaultName) -ObjectId $objectId
  ## Enable AD authentication on Azure Files
  - deployment: Deploy_ADAuthentication
    displayName: Deploy AD authentication on Azure Files
    dependsOn:
      - ${{ if eq(parameters.enableJobUpdateAssetsStorageAccount, true) }}:
          - Update_AssetsStorageAccount
      - ${{ if eq(parameters.enableJobDeployStorageAccount, true) }}:
          - Deploy_WVDProfilesStorageAccount
      - ${{ if eq(parameters.enableJobDeployHelperServer, true) }}:
          - Add_KVAccessPolicies
    environment: ${{ parameters.environment }}
    condition: |
      and (
            not(canceled()),
            eq(variables.identityApproach, 'AD'),
            in(dependencies.Update_AssetsStorageAccount.result, '', 'Succeeded', 'Skipped'),
            in(dependencies.Deploy_WVDProfilesStorageAccount.result, '', 'Succeeded', 'Skipped'),
            eq(${{ parameters.enableJobDeployHelperServer }}, true),
            in(dependencies.Add_KVAccessPolicies.result, '', 'Succeeded')
        )
    timeoutInMinutes: 120
    pool:
      ${{ if ne(parameters.vmImage, '') }}:
        vmImage: '${{ parameters.vmImage }}'
      ${{ if ne(parameters.poolName, '') }}:
        name: '${{ parameters.poolName }}'
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - template: ../../.templates/pipeline.steps.artifact.yml
              parameters:
                moduleName: '$(virtualMachinesModuleName)'
                moduleVersion: '$(virtualMachinesModuleVersion)'
            - task: AzurePowerShell@4
              displayName: 'Deploy module [$(virtualMachinesModuleName)] version [$(virtualMachinesModuleVersion)] in [$(resourceGroupName)] via [$(serviceConnection)]'
              name: Deploy_HelperServerExtension_Task
              inputs:
                azureSubscription: '${{ parameters.serviceConnection }}'
                ScriptType: InlineScript
                inline: |
                  Write-Verbose "Load function" -Verbose
                  . '$(Build.SourcesDirectory)/$(orchestrationFunctionsPath)/GeneralDeployment/Invoke-GeneralDeployment.ps1'
                  . '$(Build.SourcesDirectory)/$(orchestrationFunctionsPath)/GeneralDeployment/Add-CustomParameters.ps1'

                  # Load parameters
                  $parameterFilePath = Join-Path '$(Build.SourcesDirectory)' '$(rgFolderPath)/Parameters/helperserver.parameters.json'
                  $functionInput = @{
                    resourcegroupName = '$(resourceGroupName)'
                    modulePackagePath = Join-Path '$(Build.SourcesDirectory)/$(packagePath)' '$(virtualMachinesModuleName)'
                    parameterFilePath = $parameterFilePath
                  }
                  Write-Verbose "Invoke task with" -Verbose
                  $functionInput.Keys | ForEach-Object { Write-Verbose ("PARAMETER: `t'{0}' with value '{1}'" -f $_, $functionInput[$_]) -Verbose }

                  # Add imaging parameters from variables
                  $parameterObjects = $()
                  if (-not [String]::IsNullOrEmpty('$(customImageReferenceId)')) {
                    Write-Verbose "Using custom image ref ['$(customImageReferenceId)']" -Verbose
                    $parameterObjects += @{
                      imageReference = @{
                        id = '$(customImageReferenceId)'
                      }
                    }
                  }
                  else {
                    $imageReference = @{
                      publisher = '$(publisher)'
                      offer     = '$(offer)'
                      sku       = '$(sku)'
                      version   = '$(version)'
                    }
                    Write-Verbose ("Using published image ref [{0}]" -f ($imageReference | ConvertTo-Json)) -Verbose
                    $parameterObjects += @{
                      imageReference = $imageReference
                    }
                  }

                  # Enable CSE
                  $windowsScriptExtensionCommandToExecute = 'powershell -ExecutionPolicy Unrestricted -Command "& .\scriptExtensionMasterInstaller.ps1 -Dynparameters @{}"'
                  $windowsScriptExtensionCommandToExecute = ConvertTo-SecureString -String $windowsScriptExtensionCommandToExecute -AsPlainText -Force
                  $parameterObjects += @{
                    windowsScriptExtensionCommandToExecute = $windowsScriptExtensionCommandToExecute
                  }

                  $functionInput += @{
                    optionalParameters = $parameterObjects
                  }
                  Invoke-GeneralDeployment @functionInput -Verbose
                errorActionPreference: stop
                azurePowerShellVersion: LatestVersion
              enabled: true
  ## Remove Key Vault Access Policies
  - deployment: Remove_KVAccessPolicies
    displayName: Remove Key Vault Access Policies
    dependsOn:
      - ${{ if eq(parameters.enableJobDeployHelperServer, true) }}:
          - Deploy_ADAuthentication
    environment: ${{ parameters.environment }}
    condition: |
      and (
        not(canceled()),
        eq(variables.identityApproach, 'AD'),
        eq(${{ parameters.enableJobDeployHelperServer }}, true),
        in(dependencies.Deploy_ADAuthentication.result, '', 'Succeeded')
      )
    timeoutInMinutes: 120
    pool:
      ${{ if ne(parameters.vmImage, '') }}:
        vmImage: '${{ parameters.vmImage }}'
      ${{ if ne(parameters.poolName, '') }}:
        name: '${{ parameters.poolName }}'
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - task: AzurePowerShell@4
              displayName: 'Remove Helper Server from Key Vault Access Policies'
              inputs:
                azureSubscription: '${{ parameters.serviceConnection }}'
                ScriptType: InlineScript
                azurePowerShellVersion: LatestVersion
                errorActionPreference: stop
                inline: |
                  Write-Verbose "Load function" -Verbose
                  . '$(Build.SourcesDirectory)/$(orchestrationFunctionsPath)/KeyVault/Update-KeyVaultAccessPolicy.ps1'

                  Write-Verbose "keyVaultName $(keyVaultName)" -Verbose
                  Write-Verbose "helperServerName $(helperServerName)" -Verbose

                  $objectId=(Get-AzADServicePrincipal -DisplayName $(helperServerName)).Id

                  Update-KeyVaultAccessPolicy -VaultName $(keyVaultName) -ObjectId $objectId -remove
