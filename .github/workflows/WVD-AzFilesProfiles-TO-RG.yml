name: AVD Profile StorageAccount deployment
on:
  workflow_dispatch:
    inputs:
      enableJobUpdateAssetsStorageAccount:
        description: 'Update Assets Storage Account'
        type: boolean
        default: true
      enableDeploymentMasterARMTemplate:
        description: 'Deploy Resources'
        type: boolean
        default: true
      enableJobDeployFileSharesBackup:
        description: 'Deploy Azure File Shares Backup'
        type: boolean
        default: true
      resourceGroupName:
        description: 'User Profiles Resource Group Name'
        required: true
        default: 'AVD-UserProfiles'
        type: string
      targetEnvironment:
        description: Environment(s) to deploy to
        type: string
        default: SBX
        options:
        - SBX
        - TEST
        - PRD
        - All

env:
  varFilePath: ./.github/variables/WVD-AzFilesProfiles-TO-RG.env
  rgFolder: WVD-AzFilesProfiles-TO-RG
  location: westus2
  storageContainerMapPath: Parameters/Uploads/assets.config.json

jobs:
  Update_AssetsStorageAccount:
    name: Update Assets Storage Account
    if: ${{ github.event.inputs.enableJobUpdateAssetsStorageAccount == 'true' }}
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set Environment Variables
        uses: ./.github/actions/setvars
        with:
          source: ./.github/variables/globals.env
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{secrets.AZURE_CREDENTIALS}}
          enable-AzPSSession: true
      - name: Upload latest configuration files to assets storage account
        id: task-post-deploy-storage-accounts
        uses: azure/powershell@v1
        with:
          inlineScript: |
            Write-Verbose "Load function" -Verbose
            . '${{ env.orchestrationFunctionsPath }}/Storage/Update-AssetsStorageAccount.ps1'

            $functionInput = @{
              orchestrationFunctionsPath = '${{ env.orchestrationFunctionsPath }}'
              wvdUploadsPath             = '${{ env.wvdUploadsPath }}'
              resourceGroupPath          = '${{ env.orchestrationPath }}/${{ env.rgFolder }}'
              storageContainerMapPath    = '${{ env.orchestrationPath }}/${{ env.rgFolder }}/${{ env.storageContainerMapPath }}'
            }

            Write-Verbose "Invoke task with" -Verbose
            $functionInput.Keys | ForEach-Object { Write-Verbose ("PARAMETER: `t'{0}' with value '{1}'" -f $_, $functionInput[$_]) -Verbose }

            Update-AssetsStorageAccount @functionInput -Verbose
          errorActionPreference: stop
          azPSVersion: "latest"
  
  Debug_Update_AssetsStorageAccount_Output:
    runs-on: ubuntu-latest
    needs: Update_AssetsStorageAccount
    if: ${{ always() }}     
    steps:
      - run: |
          echo job_id ${{ github.job }}
          echo job.status ${{ job.status }}
          echo Update_AssetsStorageAccount ${{ github.event.inputs.Update_AssetsStorageAccount }}
          echo Update_AssetsStorageAccount is true ${{ github.event.inputs.Update_AssetsStorageAccount == 'true' }} 

          echo Update_AssetsStorageAccount results ${{ needs.Update_AssetsStorageAccount.result }}    
          echo Update_AssetsStorageAccount contains success ${{ contains(needs.Update_AssetsStorageAccount.result, 'success')}}
          echo Update_AssetsStorageAccount contains skipped ${{ contains(needs.Update_AssetsStorageAccount.result, 'skipped')}}
          echo Update_AssetsStorageAccount contains failure ${{ contains(needs.Update_AssetsStorageAccount.result, 'failure')}}

  Deploy_Profiles:
    runs-on: ubuntu-latest
    needs: Update_AssetsStorageAccount
    if: ${{ github.event.inputs.enableDeploymentMasterARMTemplate == 'true' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set Environment Variables
        uses: ./.github/actions/setvars
        with:
          source: ./.github/variables/globals.env
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{secrets.AZURE_CREDENTIALS}}
      - name: Check Params
        run: |
          echo "Deployment Name: ${{ env.resourcegroupname }}-$(date +'%Y%m%d%H%M%S')"
          echo "Template Name: ${{ env.orchestrationPath }}/${{ env.rgFolder }}/deploy.json"
          echo "Parameters: ${{ env.orchestrationPath }}/${{ env.rgFolder }}/Parameters/parameters.json componentStorageAccountId=${{secrets.AZURE_CREDENTIALS}} componentsStorageContainerName=${{env.componentsStorageContainerName}}"
          echo "Pipeline Params: ${{ github.event.inputs.rgname }}"

      - name: Validate template
        id: task-validate-arm-template
        uses: azure/arm-deploy@v1
        with:
          deploymentMode: Validate
          scope: subscription
          region: ${{ env.location }}
          template: ${{ env.orchestrationPath }}/${{ env.rgFolder }}/deploy.json
          parameters: ${{ env.orchestrationPath }}/${{ env.rgFolder }}/Parameters/parameters.json resourcegroupname=${{ github.event.inputs.rgname }} componentStorageAccountId=${{secrets.COMPONENT_STORAGE_ACCOUNT_ID}} componentsStorageContainerName=${{env.componentsStorageContainerName}}

      - name: Deploy template
        id: task-deploy-arm-template
        uses: azure/arm-deploy@v1
        with:
          scope: subscription
          region: ${{ env.location }}
          template: ${{ env.orchestrationPath }}/${{ env.rgFolder }}/deploy.json
          parameters: ${{ env.orchestrationPath }}/${{ env.rgFolder }}/Parameters/parameters.json resourcegroupname=${{ github.event.inputs.resourcegroupname }} componentStorageAccountId=${{secrets.COMPONENT_STORAGE_ACCOUNT_ID}} componentsStorageContainerName=${{env.componentsStorageContainerName}} enableVmResources=true enableVmExtensions=true
