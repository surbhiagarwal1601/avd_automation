name: AVD Management deployment
on:
  workflow_dispatch:
    inputs:
      rgname:
        description: 'Target Resource Group Name'
        required: true
        default: 'myAvdWorkFlowCall'
        type: string
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'sbx' 
        type: choice
        options:
        - sbx
        - test
        - prod 

# env:
  # orchestrationPath: ${{ github.workspace }}/Workloads/WVD/Environments/template-orchestrated
  # orchestrationFunctionsPath: ${{ github.workspace }}/Workloads/WVD/OrchestrationSources/SharedDeploymentFunctions
  # wvdUploadsPath: ${{ github.workspace }}/Workloads/WVD/OrchestrationSources/Uploads

jobs:
## Deploy Management resource Group Resources
  

  Deploy_Mgmt:
    name: Deploy Management Resources
    runs-on: ubuntu-latest
    # strategy:
    #   matrix: ${{ fromJson(needs.parser.outputs.matrix) }}
    #   fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      # - name: Install PowerShell modules
      #   shell: pwsh
      #   run: |
      #     Install-Module -Name "Az" -RequiredVersion "4.7.0" -Force -Scope CurrentUser -ErrorAction Stop
      - name: Set Environment Variables
        uses: ./.github/actions/setvars
        with:
          varFilePath: ./.github/variables/WVD-Mgmt-TO-RG.env
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{secrets.AZURE_CREDENTIALS_Y3QJT}}
      - name: Check Params
        run: |
          echo "Deployment Name: ${{ env.resourcegroupname }}-$(date +'%Y%m%d%H%M%S')"
          echo "Template Name: ${{ env.orchestrationPath }}/${{ env.rgFolder }}/deploy.json"
          echo "Parameters: ${{ env.orchestrationPath }}/${{ env.rgFolder }}/Parameters/parameters.json componentStorageAccountId=${{secrets.AZURE_CREDENTIALS_Y3QJT}} componentsStorageContainerName=${{env.componentsStorageContainerName}}"
          echo "Pipeline Params: ${{ github.event.inputs.rgname }}"
      - name: Get Windows Virtual Desktop Service Principal
        id: task-get-sp
        uses: azure/CLI@v1
        with:
          azcliversion: 2.30.0
          inlineScript: |
            sp_client_id=$(az ad sp list --all --filter "displayname eq '${{ env.sp_name }}'" --query "[].appId" -o tsv)
            echo $sp_client_id >> sp_client_id
            echo ::set-output name=sp_client_id::$sp_client_id
      - name: Show Service Principal
        id: task-show-sp
        run: echo the client id is ${{ steps.task-get-sp.outputs.sp_client_id }}

      - name: Validate Module
        id: task-validate
        uses: azure/arm-deploy@v1
        with:
          deploymentMode: Validate
          deploymentName: github-test
          scope: subscription
          region: ${{ env.LOCATION }}
          template: ${{ env.orchestrationPath }}/${{ env.rgFolder }}/deploy.json
          parameters: ${{ env.orchestrationPath }}/${{ env.rgFolder }}/Parameters/parameters.json resourcegroupname=${{ github.event.inputs.rgname }} componentStorageAccountId=${{secrets.COMPONENT_STORAGE_ACCOUNT_ID_Y3QJT}} componentsStorageContainerName=${{env.componentsStorageContainerName}}
      
      - name: Deploy Module
        id: task-deploy
        uses: azure/arm-deploy@v1
        with:
          deploymentName: github-test
          scope: subscription
          region: ${{ env.LOCATION }}
          template: ${{ env.orchestrationPath }}/${{ env.rgFolder }}/deploy.json
          parameters: ${{ env.orchestrationPath }}/${{ env.rgFolder }}/Parameters/parameters.json resourcegroupname=${{ github.event.inputs.rgname }} componentStorageAccountId=${{secrets.COMPONENT_STORAGE_ACCOUNT_ID_Y3QJT}} componentsStorageContainerName=${{env.componentsStorageContainerName}}
      
      - run: |
          echo Template Output - sasExpiryDateTime: ${{ steps.task-deploy.outputs.sasExpiryDateTime }}
          echo Template Output - deploymentName: ${{ steps.task-deploy.ouputs.deploymentName }}
          echo Template Output - subscription Object: ${{ steps.task-deploy.ouputs.subscriptionObject }}
## Invoke Key Vault Post Deployment
#   Invoke_WVDKeyVaultPostDeployment:
#     name: Invoke Key Vault Post Deployment
#     needs: Deploy_Mgmt
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v2
#       - name: Set Environment Variables
#         uses: ./.github/actions/setvars
#         with:
#           varFilePath: ./.github/variables/WVD-Mgmt-TO-RG.env
#       - name: Login to Azure
#         uses: azure/login@v1
#         with:
#           creds: ${{secrets.AZURE_CREDENTIALS}}
#           enable-AzPSSession: true
#       - name: Trigger module KeyVault post-deployment
#         uses: azure/powershell@v1
#         with:
#           inlineScript: |
#             Write-Verbose "Load function" -Verbose
#             . '${{ env.orchestrationFunctionsPath }}/GeneralDeployment/Invoke-KeyVaultPostDeployment.ps1'

#             $functionInput = @{
#               orchestrationFunctionsPath   = '${{ env.orchestrationFunctionsPath }}'
#               VaultName                    = '${{ env.keyVaultName }}'
#               domainJoin_userName          = '${{ env.domainJoinUserName }}'
#               domainJoin_pwd               = ConvertTo-SecureString '${{ secrets.WVDJoinDomainUserPwd }}' -AsPlainText -Force
#             }

#             if(-not ([string]::IsNullOrEmpty('${{ secrets.localAdminPassword }}'))) {
#               $functionInput += @{
#                 localAdminPassword         = ConvertTo-SecureString '${{ secrets.localAdminPassword }}' -AsPlainText -Force
#               }
#             }

#             # # Only required to enable Native AD identity-based access for file shares
#             # if(-not ([string]::IsNullOrEmpty('$(storageJoinUserName)'))) {
#             #   $functionInput += @{
#             #     storageJoin_userName       = '$(storageJoinUserName)'
#             #     storageJoin_pwd            = ConvertTo-SecureString "$(StorageJoinUserPwd)" -AsPlainText -Force
#             #   }
#             # }

#             Write-Verbose "Invoke task with" -Verbose
#             $functionInput.Keys | ForEach-Object { Write-Verbose ("PARAMETER: `t'{0}' with value '{1}'" -f $_, $functionInput[$_]) -Verbose }

#             Invoke-KeyVaultPostDeployment @functionInput -Verbose
#           azPSVersion: "latest"

# ## Invoke Automation Account Post Deployment
#   Invoke_AutomationAccountPostDeployment:
#     name: Invoke Automation Account Post Deployment
#     needs: Deploy_Mgmt
#     runs-on: windows-latest
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v2
#       - name: Set Environment Variables
#         uses: ./.github/actions/setvars
#         with:
#           varFilePath: ./.github/variables/WVD-Mgmt-TO-RG.env
#       - name: Login to Azure
#         uses: azure/login@v1
#         with:
#           creds: ${{secrets.AZURE_CREDENTIALS}}
#           enable-AzPSSession: true
#       - name: Trigger module AutomationAccount post-deployment
#         uses: azure/powershell@v1
#         with:
#           inlineScript: |
#             Write-Verbose "Load function" -Verbose
#             . '${{ env.orchestrationFunctionsPath }}/GeneralDeployment/Invoke-AutomationAccountPostDeployment.ps1'

#             $functionInput = @{
#               orchestrationFunctionsPath         = '${{ env.orchestrationFunctionsPath }}'
#               AutomationAccountName              = '${{ env.AutomationAccountName }}'
#               AutomationAccountRGName            = '${{ env.resourcegroupname }}'
#               ScalingRunbookName                 = '${{ env.ScalingRunbookName }}'
#               WebhookName                        = '${{ env.ScalingWebhookName }}'
#               RunAsConnectionSPName              = '${{ env.RunAsConnectionSPName }}'
#               KeyVaultName                       = '${{ env.keyVaultName }}'
#               RunAsSelfSignedCertSecretName      = '${{ env.RunAsSelfSignedCertSecretName }}'
#               AutoAccountRunAsCertExpiryInMonths = '${{ env.AutoAccountRunAsCertExpiryInMonths }}'
#               tempPath                           = '${{ runner.temp }}'
#               # LAWorkspaceName                    = '${{ env.LAWorkspaceName }}'
#             }

#             Write-Verbose "Invoke task with" -Verbose
#             $functionInput.Keys | ForEach-Object { Write-Verbose ("PARAMETER: `t'{0}' with value '{1}'" -f $_, $functionInput[$_]) -Verbose }

#             Invoke-AutomationAccountPostDeployment @functionInput -Verbose
#           azPSVersion: "latest"