name: AVD Management RG Deployment
on:
  workflow_dispatch:
    inputs:
      enableDeploymentMasterARMTemplate:
        description: 'Deploy Master Template'
        type: boolean
        required: false 
      enablePostDeploymentWVDKeyVault:
        description: 'Key Vault Post Deployment'
        type: boolean
        required: true 
      enablePostDeploymentAutomationAccount:
        description: 'Automation Account Post Deployment'
        type: boolean
        required: true 
      deletePreviousResourceGroup:
        description: 'Delete Previous Resource Group'
        type: boolean
        required: true 
      old_resourceGroupName: 
        description: 'Previous Resource Group Name'
        required: false
        type: string
      resourceGroupName:
        description: 'Target Resource Group Name'
        required: true
        default: 'AVD-Mgmt-RG'
        type: string
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'sbx' 
        type: choice
        options:
        - sbx
        - test
        - prod 
env:
  ## GENERAL ##
  rgFolder: WVD-Mgmt-TO-RG
  RunAsConnectionSPName: avdScalingRunAsPrincipal
  soc_service_principal_ids: azure_virtual_desktop_service_principal azure_virtual_desktop_service_principal2
  avdStorageAccountName: avdaaddstoassetsstore
  domainJoinUserName: avd_domain_join_sp
  storageJoinUserName: avd_storage_join_sp
  automationAccountName: avd-scaling-autoaccount
  componentsStorageContainerName: components
  RunAsSelfSignedCertSecretName : RunAsSelfSignedCertSecretName 
  AutoAccountRunAsCertExpiryInMonths : 24


jobs:

  Clean_Resources:
    name: Clean up Resources
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.deletePreviousResourceGroup == 'true' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set Environment Variables
        uses: ./.github/actions/setvars
        with:
          source: ./.github/variables/globals.env
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{secrets.AZURE_CREDENTIALS}}
      - name: Remove Resources
        id: task-remove-resources
        uses: azure/CLI@v1
        with:
          azcliversion: 2.30.0
          inlineScript: |
            # Remove Management Resource Group
            {
              echo Deleting resource group ${{github.event.inputs.old_resourceGroupName}}
              az group delete --name ${{github.event.inputs.old_resourceGroupName}} --yes &&
              echo Done Deleting resource group ${{github.event.inputs.old_resourceGroupName}}
              
            } || {
              echo Failed Deleting resource group ${{github.event.inputs.old_resourceGroupName}}
            }
            
            # Remove app id    
            {        
              run_as_connection_sp_name=${{ env.RunAsConnectionSPName }}
              echo Removing app $run_as_connection_sp_name
              run_as_connection_app_id=$(az ad app list --filter "displayName eq '$run_as_connection_sp_name'" --query "[].appId" -o tsv)
              az ad app delete --id $run_as_connection_app_id
              } || {
              echo Failed Deleting app $run_as_connection_sp_name
            }

  ## Deploy Management resource Group Resources
  Deploy_Mgmt:
    runs-on: ubuntu-latest
    name: Deploy Management Resources
    needs: Clean_Resources
    if: |
      !failure() && !cancelled() && 
      (github.event.inputs.enableDeploymentMasterARMTemplate == 'true')    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set Environment Variables
        uses: ./.github/actions/setvars
        with:
          source: ./.github/variables/globals.env
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{secrets.AZURE_CREDENTIALS}}
          enable-AzPSSession: true
      # - name: Get Windows Virtual Desktop Service Principal ClientId
      #   id: task-get-sp-clientd-id
      #   uses: azure/CLI@v1
      #   with:
      #     azcliversion: 2.30.0
      #     inlineScript: |
      #       query_filter=
      #       for client_id in ${{ env.soc_service_principals }}; do 
      #           query_filter="${query_filter}displayname eq '${client_id}' or "
      #       done
      #       # remove trailing or
      #       query_filter=${query_filter:0:$#-4}
      #       sp_client_id=$(az ad sp list --all --filter "$query_filter" --query "[].objectId" -o tsv)
      #       echo ::set-output name=sp_client_id::$sp_client_id
      
      # - name: Show Service Principal
      #   id: task-show-sp
      #   run: echo client_id ${{ steps.task-get-sp-clientd-id.outputs.sp_client_id }}

      - name: Update Parameters
        id: step-update-parameters
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $templateFilePath = "${{ env.orchestrationPath }}/${{ env.rgFolder }}/deploy.json"
            $parameterFilePath = "${{ env.orchestrationPath }}/${{ env.rgFolder }}/Parameters/parameters.json"
            $parameterUpdatedFilePath = "${{ env.orchestrationPath }}/${{ env.rgFolder }}/Parameters/parameters.updated.json"
            $paramsRaw = Get-Content $parameterFilePath -Raw
            $paramsSanitized = $paramsRaw -replace '(?m)(?<=^([^"]|"[^"]*")*)//.*' -replace '(?ms)/\*.*?\*/'
            $json = ConvertFrom-Json $paramsSanitized -AsHashTable
            
            # Replace with Pipeline parameters
            $json.parameters.componentStorageAccountId.value = "${{secrets.COMPONENT_STORAGE_ACCOUNT_ID}}"
            $json.parameters.componentsStorageContainerName.value = "${{env.componentsStorageContainerName}}"
            $json.parameters.location.value = "${{ env.location }}"
            $json.parameters.resourcegroupname.value = "${{ github.event.inputs.resourceGroupName }}"
            $json.parameters.soCWvdPrincipalIds.value = "${{ env.soc_service_principal_ids }}" 

            New-Item -Path $parameterUpdatedFilePath -Force
            ConvertTo-Json $json -depth 10 | Out-File $parameterUpdatedFilePath
            Write-Verbose 'Handling subscription level deployment' -Verbose
            $ValidationErrors = $null

            echo "Parameters updated path:" $parameterUpdatedFilePath
            # Save Param file so next step can pick up
            echo ::set-output name=parameterUpdatedFilePath::$parameterUpdatedFilePath

            $text = Get-Content $parameterUpdatedFilePath -Raw 
            echo "contents are:" $text

            # az deployment sub create --location "${{ inputs.location }}" --template-file $templateFilePath --parameters @$parameterUpdatedFilePath
            # if ($ValidationErrors) {
            #   Write-Error "Template is not valid."
            # }
          azPSVersion: "latest"
      
      - name: Validate Module
        id: task-validate
        uses: azure/arm-deploy@v1
        with:
          deploymentMode: Validate
          deploymentName: github-test
          scope: subscription
          region: ${{ env.location }}
          template: ${{ env.orchestrationPath }}/${{ env.rgFolder }}/deploy.json
          parameters: ${{ env.orchestrationPath }}/${{ env.rgFolder }}/Parameters/parameters.updated.json 
      
      - name: Deploy Module
        id: task-deploy
        uses: azure/arm-deploy@v1
        with:
          deploymentName: github-test
          scope: subscription
          region: ${{ env.location }}
          template: ${{ env.orchestrationPath }}/${{ env.rgFolder }}/deploy.json
          parameters: ${{ env.orchestrationPath }}/${{ env.rgFolder }}/Parameters/parameters.updated.json
      
      # - name: Check Template Output Params
      #   run: |
      #     echo Template Output - socClientIds: ${{ steps.task-deploy.ouputs.socClientIds }}
      #     echo Template Output - sasExpiryDateTime: ${{ steps.task-deploy.outputs.sasExpiryDateTime }}
      #     echo Template Output - deploymentName: ${{ steps.task-deploy.ouputs.deploymentName }}
      #     echo Template Output - keyVaultResourceId: ${{ steps.task-deploy.ouputs.keyVaultResourceId }}

      # - name: Log out of Azure
      #   uses: azure/CLI@v1
      #   with:
      #     azcliversion: 2.30.0
      #     inlineScript: |
      #       az logout
      #       az cache purge
      #       az account clear

# Invoke Key Vault Post Deployment
  Invoke_WVDKeyVaultPostDeployment:
    name: Invoke Key Vault Post Deployment
    if: ${{ github.event.inputs.enablePostDeploymentWVDKeyVault == 'true' }}
    needs: Deploy_Mgmt
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set Environment Variables
        uses: ./.github/actions/setvars
        with:
          varFilePath: ./.github/variables/WVD-Mgmt-TO-RG.env
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{secrets.AZURE_CREDENTIALS}}
          enable-AzPSSession: true
      - name: Get KeyVault Name
        id: task-get-keyvault-name
        uses: azure/powershell@v1
        with:
          inlineScript: |
            Write-Verbose "Getting KeyVault Name" -Verbose
            
            Write-Verbose "Calling Get-AzKeyVault -ResourceGroupName '${{ github.event.inputs.resourceGroupName }}'" -Verbose
            $KeyVault = Get-AzKeyVault -ResourceGroupName "${{ github.event.inputs.resourceGroupName }}"

            Write-Verbose ("Key Vault Name is {0}" -f $KeyVault.VaultName) -Verbose

            Write-Verbose "Setting environment variable KeyVaultName=$($KeyVault.VaultName) to $Env:GITHUB_ENV" -Verbose
            echo "KeyVaultName=$($KeyVault.VaultName)" >> $Env:GITHUB_ENV
            
          azPSVersion: "latest"
      - name: Trigger module KeyVault post-deployment
        uses: azure/powershell@v1
        with:
          inlineScript: |
            Write-Verbose "Load function" -Verbose
            . '${{ env.orchestrationFunctionsPath }}/GeneralDeployment/Invoke-KeyVaultPostDeployment.ps1'

            $functionInput = @{
              orchestrationFunctionsPath   = '${{ env.orchestrationFunctionsPath }}'
              # VaultName                  = '${{ steps.task-get-keyvault-name.ouputs.key_vault_name }}'
              VaultName                    = $Env:KeyVaultName
              domainJoin_userName          = '${{ env.domainJoinUserName }}'
              domainJoin_pwd               = ConvertTo-SecureString '${{ secrets.WVD_JOIN_DOMAIN_USER_PWD }}' -AsPlainText -Force
            }

            if(-not ([string]::IsNullOrEmpty('${{ secrets.LOCAL_ADMIN_PASSWORD }}'))) {
              $functionInput += @{
                localAdminPassword         = ConvertTo-SecureString '${{ secrets.LOCAL_ADMIN_PASSWORD }}' -AsPlainText -Force
              }
            }

            # # Only required to enable Native AD identity-based access for file shares
            # if(-not ([string]::IsNullOrEmpty('$(storageJoinUserName)'))) {
            #   $functionInput += @{
            #     storageJoin_userName       = '$(storageJoinUserName)'
            #     storageJoin_pwd            = ConvertTo-SecureString "$(StorageJoinUserPwd)" -AsPlainText -Force
            #   }
            # }

            Write-Verbose "Invoke task with" -Verbose
            $functionInput.Keys | ForEach-Object { Write-Verbose ("PARAMETER: `t'{0}' with value '{1}'" -f $_, $functionInput[$_]) -Verbose }

            Invoke-KeyVaultPostDeployment @functionInput -Verbose
          azPSVersion: "latest"

## Invoke Automation Account Post Deployment
  Invoke_AutomationAccountPostDeployment:
    name: Invoke Automation Account Post Deployment
    needs: Invoke_WVDKeyVaultPostDeployment
    if: ${{ github.event.inputs.enablePostDeploymentAutomationAccount == 'true' }}
    runs-on: windows-latest
    env:
      ScalingRunbookName: ScalingRunbook
      ScalingWebhookName: AVDAutoScaleWebhook
      RunAsSelfSignedCertSecretName: avdScalingRunAsPrincipalCert-Secret 
      AutoAccountRunAsCertExpiryInMonths: 24
      TenantName: y3qjt

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set Environment Variables
        uses: ./.github/actions/setvars
        with:
          varFilePath: ./.github/variables/WVD-Mgmt-TO-RG.env
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{secrets.AZURE_CREDENTIALS}}
          enable-AzPSSession: true
      - name: Get KeyVault Name
        id: task-get-keyvault-name
        uses: azure/powershell@v1
        with:
          inlineScript: |
            Write-Verbose "Getting KeyVault Name" -Verbose
            
            Write-Verbose "Calling Get-AzKeyVault -ResourceGroupName '${{ github.event.inputs.resourceGroupName }}'" -Verbose
            $KeyVault = Get-AzKeyVault -ResourceGroupName "${{ github.event.inputs.resourceGroupName }}"

            Write-Verbose ("Key Vault Name is {0}" -f $KeyVault.VaultName) -Verbose

            Write-Verbose "Setting environment variable KeyVaultName=$($KeyVault.VaultName) to $Env:GITHUB_ENV" -Verbose
            echo "KeyVaultName=$($KeyVault.VaultName)" >> $Env:GITHUB_ENV
          azPSVersion: "latest"
      - name: Trigger module AutomationAccount post-deployment
        uses: azure/powershell@v1
        with:
          inlineScript: |
            Write-Verbose "Load function" -Verbose
            . '${{ env.orchestrationFunctionsPath }}/GeneralDeployment/Invoke-AutomationAccountPostDeployment.ps1'

            $functionInput = @{
              orchestrationFunctionsPath         = '${{ env.orchestrationFunctionsPath }}'
              AutomationAccountName              = '${{ env.automationAccountName }}'
              AutomationAccountRGName            = '${{ github.event.inputs.resourceGroupName }}'
              ScalingRunbookName                 = '${{ env.ScalingRunbookName }}'
              WebhookName                        = '${{ env.ScalingWebhookName }}'
              RunAsConnectionSPName              = '${{ env.RunAsConnectionSPName }}'
              KeyVaultName                       = $Env:KeyVaultName
              RunAsSelfSignedCertSecretName      = '${{ env.RunAsSelfSignedCertSecretName }}'
              AutoAccountRunAsCertExpiryInMonths = '${{ env.AutoAccountRunAsCertExpiryInMonths }}'
              tempPath                           = '${{ runner.temp }}'
              tenantName                           = '${{ env.TenantName }}'
              # LAWorkspaceName                    = '${{ env.LAWorkspaceName }}'
            }

            Write-Verbose "Invoke task with" -Verbose
            $functionInput.Keys | ForEach-Object { Write-Verbose ("PARAMETER: `t'{0}' with value '{1}'" -f $_, $functionInput[$_]) -Verbose }

            Invoke-AutomationAccountPostDeployment @functionInput -Verbose
          azPSVersion: "latest"